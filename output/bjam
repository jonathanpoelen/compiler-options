# https://boostorg.github.io/build/manual/develop/index.html

import feature : feature ;
import modules ;

CXX_BJAM_YEAR_VERSION = [ modules.peek : JAMVERSION ] ;

feature <jln-color> : default auto never always : incidental ;
feature <jln-control-flow> : default off on : propagated ;
feature <jln-incidental-control-flow> : default off on : incidental ;
feature <jln-coverage> : default off on : propagated ;
feature <jln-incidental-coverage> : default off on : incidental ;
feature <jln-cpu> : default generic native : propagated ;
feature <jln-incidental-cpu> : default generic native : incidental ;
feature <jln-debug> : default off on line_tables_only gdb lldb sce : propagated ;
feature <jln-incidental-debug> : default off on line_tables_only gdb lldb sce : incidental ;
feature <jln-diagnostics-format> : default fixits patch print_source_range_info : incidental ;
feature <jln-diagnostics-show-template-tree> : default off on : incidental ;
feature <jln-elide-type> : default off on : incidental ;
feature <jln-exceptions> : default off on : propagated ;
feature <jln-incidental-exceptions> : default off on : incidental ;
feature <jln-linker> : default bfd gold lld : incidental ;
feature <jln-lto> : default off on fat linker_plugin : propagated ;
feature <jln-incidental-lto> : default off on fat linker_plugin : incidental ;
feature <jln-narrowing-error> : on default off : propagated ;
feature <jln-incidental-narrowing-error> : on default off : incidental ;
feature <jln-optimize> : default off debugoptimized minsize release fast : propagated ;
feature <jln-incidental-optimize> : default off debugoptimized minsize release fast : incidental ;
feature <jln-pedantic> : on default off as_error : propagated ;
feature <jln-incidental-pedantic> : on default off as_error : incidental ;
feature <jln-pie> : default off on pic : propagated ;
feature <jln-incidental-pie> : default off on pic : incidental ;
feature <jln-relro> : default off on full : propagated ;
feature <jln-incidental-relro> : default off on full : incidental ;
feature <jln-reproducible-build-warnings> : default off on : incidental ;
feature <jln-rtti> : default off on : propagated ;
feature <jln-incidental-rtti> : default off on : incidental ;
feature <jln-sanitizers> : default off on : propagated ;
feature <jln-incidental-sanitizers> : default off on : incidental ;
feature <jln-sanitizers-extra> : default off thread pointer : propagated ;
feature <jln-incidental-sanitizers-extra> : default off thread pointer : incidental ;
feature <jln-shadow-warnings> : off default on local compatible_local all : incidental ;
feature <jln-stack-protector> : default off on strong all : propagated ;
feature <jln-incidental-stack-protector> : default off on strong all : incidental ;
feature <jln-stl-debug> : default off on allow_broken_abi assert_as_exception : propagated ;
feature <jln-incidental-stl-debug> : default off on allow_broken_abi assert_as_exception : incidental ;
feature <jln-stl-fix> : on default off : propagated ;
feature <jln-incidental-stl-fix> : on default off : incidental ;
feature <jln-suggests> : default off on : incidental ;
feature <jln-warnings> : on default off strict very_strict : incidental ;
feature <jln-whole-program> : default off on strip_all : propagated ;
feature <jln-incidental-whole-program> : default off on strip_all : incidental ;

if $(CXX_BJAM_YEAR_VERSION) < 2016.00 {
  import toolset ;
  toolset.flags jln-control-flow JLN_CONTROL_FLOW : <jln-control-flow> ;
  toolset.flags jln-incidental-control-flow JLN_INCIDENTAL_CONTROL_FLOW : <jln-incidental-control-flow> ;
  toolset.flags jln-coverage JLN_COVERAGE : <jln-coverage> ;
  toolset.flags jln-incidental-coverage JLN_INCIDENTAL_COVERAGE : <jln-incidental-coverage> ;
  toolset.flags jln-cpu JLN_CPU : <jln-cpu> ;
  toolset.flags jln-incidental-cpu JLN_INCIDENTAL_CPU : <jln-incidental-cpu> ;
  toolset.flags jln-debug JLN_DEBUG : <jln-debug> ;
  toolset.flags jln-incidental-debug JLN_INCIDENTAL_DEBUG : <jln-incidental-debug> ;
  toolset.flags jln-exceptions JLN_EXCEPTIONS : <jln-exceptions> ;
  toolset.flags jln-incidental-exceptions JLN_INCIDENTAL_EXCEPTIONS : <jln-incidental-exceptions> ;
  toolset.flags jln-lto JLN_LTO : <jln-lto> ;
  toolset.flags jln-incidental-lto JLN_INCIDENTAL_LTO : <jln-incidental-lto> ;
  toolset.flags jln-narrowing-error JLN_NARROWING_ERROR : <jln-narrowing-error> ;
  toolset.flags jln-incidental-narrowing-error JLN_INCIDENTAL_NARROWING_ERROR : <jln-incidental-narrowing-error> ;
  toolset.flags jln-optimize JLN_OPTIMIZE : <jln-optimize> ;
  toolset.flags jln-incidental-optimize JLN_INCIDENTAL_OPTIMIZE : <jln-incidental-optimize> ;
  toolset.flags jln-pedantic JLN_PEDANTIC : <jln-pedantic> ;
  toolset.flags jln-incidental-pedantic JLN_INCIDENTAL_PEDANTIC : <jln-incidental-pedantic> ;
  toolset.flags jln-pie JLN_PIE : <jln-pie> ;
  toolset.flags jln-incidental-pie JLN_INCIDENTAL_PIE : <jln-incidental-pie> ;
  toolset.flags jln-relro JLN_RELRO : <jln-relro> ;
  toolset.flags jln-incidental-relro JLN_INCIDENTAL_RELRO : <jln-incidental-relro> ;
  toolset.flags jln-rtti JLN_RTTI : <jln-rtti> ;
  toolset.flags jln-incidental-rtti JLN_INCIDENTAL_RTTI : <jln-incidental-rtti> ;
  toolset.flags jln-sanitizers JLN_SANITIZERS : <jln-sanitizers> ;
  toolset.flags jln-incidental-sanitizers JLN_INCIDENTAL_SANITIZERS : <jln-incidental-sanitizers> ;
  toolset.flags jln-sanitizers-extra JLN_SANITIZERS_EXTRA : <jln-sanitizers-extra> ;
  toolset.flags jln-incidental-sanitizers-extra JLN_INCIDENTAL_SANITIZERS_EXTRA : <jln-incidental-sanitizers-extra> ;
  toolset.flags jln-stack-protector JLN_STACK_PROTECTOR : <jln-stack-protector> ;
  toolset.flags jln-incidental-stack-protector JLN_INCIDENTAL_STACK_PROTECTOR : <jln-incidental-stack-protector> ;
  toolset.flags jln-stl-debug JLN_STL_DEBUG : <jln-stl-debug> ;
  toolset.flags jln-incidental-stl-debug JLN_INCIDENTAL_STL_DEBUG : <jln-incidental-stl-debug> ;
  toolset.flags jln-stl-fix JLN_STL_FIX : <jln-stl-fix> ;
  toolset.flags jln-incidental-stl-fix JLN_INCIDENTAL_STL_FIX : <jln-incidental-stl-fix> ;
  toolset.flags jln-whole-program JLN_WHOLE_PROGRAM : <jln-whole-program> ;
  toolset.flags jln-incidental-whole-program JLN_INCIDENTAL_WHOLE_PROGRAM : <jln-incidental-whole-program> ;
}

import property-set ;
import string ;

local ORIGINAL_TOOLSET = 0 ;
local COMP_VERSION = 00.00 ;

rule jln-get-normalized-compiler-version ( toolset : version )
{
  # TODO `version` is not the real version. For toolset=gcc-5, version is 5 ; for clang-scan, version is ''
  # define PP_CAT_I(a,b) a##b
  # define PP_CAT(a,b) PP_CAT_I(a,b)
  # g++ -x c++ -E - <<<'PP_CAT(__GNUC__, PP_CAT(__GNUC_MINOR__, __GNUC_PATCHLEVEL__))'
  # clang++ -x c++ -E - <<<'PP_CAT(__clang_major__, PP_CAT(__clang_minor__, __clang_patchlevel__))'
  if $(ORIGINAL_TOOLSET) != $(toolset)
  {
    local version = [ MATCH "^[^0-9]*(.*)$" : $(version) ] ;
    if ! $(version) {
      # if $(toolset) = gcc {
      #   version = [ SHELL "$(toolset) -dumpfullversion" ] ;
      # }
      # else {
        version = [ MATCH ".*(\\d+\\.\\d+\\.\\d+).*" : [ SHELL "$(toolset) --version" ] ] ;
      # }
    }
    local match = [ MATCH "^([0-9]+)(\\.([0-9]+))?" : $(version) ] ;
    local major = [ MATCH "(..)$" : [ string.join 00 $(match[1]) ] ] ;
    local minor = [ MATCH "(..)$" : [ string.join 00 $(match[3]) ] ] ;
    COMP_VERSION = $(major).$(minor) ;
    ORIGINAL_TOOLSET = $(toolset) ;
  }
  return $(COMP_VERSION) ;
}

rule jln_flags ( properties * )
{
  local ps = [ property-set.create $(properties) ] ;
  local toolset = [ $(ps).get <toolset> ] ;
  local version = [ jln-get-normalized-compiler-version $(toolset)
                  : [ $(ps).get <toolset-$(toolset):version> ] ] ;

  local flags = ;
  if $(CXX_BJAM_YEAR_VERSION) >= 2016.00
  {
    flags += 
      <relevant>jln-control-flow
      <relevant>jln-coverage
      <relevant>jln-cpu
      <relevant>jln-debug
      <relevant>jln-exceptions
      <relevant>jln-lto
      <relevant>jln-narrowing-error
      <relevant>jln-optimize
      <relevant>jln-pedantic
      <relevant>jln-pie
      <relevant>jln-relro
      <relevant>jln-rtti
      <relevant>jln-sanitizers
      <relevant>jln-sanitizers-extra
      <relevant>jln-stack-protector
      <relevant>jln-stl-debug
      <relevant>jln-stl-fix
      <relevant>jln-whole-program
    ;
  }

  local jln-color_isdefault ; if <jln-color>default in $(properties) { jln-color_isdefault = 1 ; }
  local jln-control-flow_isdefault ; if <jln-control-flow>default in $(properties) { jln-control-flow_isdefault = 1 ; }
  local jln-coverage_isdefault ; if <jln-coverage>default in $(properties) { jln-coverage_isdefault = 1 ; }
  local jln-cpu_isdefault ; if <jln-cpu>default in $(properties) { jln-cpu_isdefault = 1 ; }
  local jln-debug_isdefault ; if <jln-debug>default in $(properties) { jln-debug_isdefault = 1 ; }
  local jln-diagnostics-format_isdefault ; if <jln-diagnostics-format>default in $(properties) { jln-diagnostics-format_isdefault = 1 ; }
  local jln-diagnostics-show-template-tree_isdefault ; if <jln-diagnostics-show-template-tree>default in $(properties) { jln-diagnostics-show-template-tree_isdefault = 1 ; }
  local jln-elide-type_isdefault ; if <jln-elide-type>default in $(properties) { jln-elide-type_isdefault = 1 ; }
  local jln-exceptions_isdefault ; if <jln-exceptions>default in $(properties) { jln-exceptions_isdefault = 1 ; }
  local jln-linker_isdefault ; if <jln-linker>default in $(properties) { jln-linker_isdefault = 1 ; }
  local jln-lto_isdefault ; if <jln-lto>default in $(properties) { jln-lto_isdefault = 1 ; }
  local jln-narrowing-error_isdefault ; if <jln-narrowing-error>default in $(properties) { jln-narrowing-error_isdefault = 1 ; }
  local jln-optimize_isdefault ; if <jln-optimize>default in $(properties) { jln-optimize_isdefault = 1 ; }
  local jln-pedantic_isdefault ; if <jln-pedantic>default in $(properties) { jln-pedantic_isdefault = 1 ; }
  local jln-pie_isdefault ; if <jln-pie>default in $(properties) { jln-pie_isdefault = 1 ; }
  local jln-relro_isdefault ; if <jln-relro>default in $(properties) { jln-relro_isdefault = 1 ; }
  local jln-reproducible-build-warnings_isdefault ; if <jln-reproducible-build-warnings>default in $(properties) { jln-reproducible-build-warnings_isdefault = 1 ; }
  local jln-rtti_isdefault ; if <jln-rtti>default in $(properties) { jln-rtti_isdefault = 1 ; }
  local jln-sanitizers_isdefault ; if <jln-sanitizers>default in $(properties) { jln-sanitizers_isdefault = 1 ; }
  local jln-sanitizers-extra_isdefault ; if <jln-sanitizers-extra>default in $(properties) { jln-sanitizers-extra_isdefault = 1 ; }
  local jln-shadow-warnings_isdefault ; if <jln-shadow-warnings>default in $(properties) { jln-shadow-warnings_isdefault = 1 ; }
  local jln-stack-protector_isdefault ; if <jln-stack-protector>default in $(properties) { jln-stack-protector_isdefault = 1 ; }
  local jln-stl-debug_isdefault ; if <jln-stl-debug>default in $(properties) { jln-stl-debug_isdefault = 1 ; }
  local jln-stl-fix_isdefault ; if <jln-stl-fix>default in $(properties) { jln-stl-fix_isdefault = 1 ; }
  local jln-suggests_isdefault ; if <jln-suggests>default in $(properties) { jln-suggests_isdefault = 1 ; }
  local jln-warnings_isdefault ; if <jln-warnings>default in $(properties) { jln-warnings_isdefault = 1 ; }
  local jln-whole-program_isdefault ; if <jln-whole-program>default in $(properties) { jln-whole-program_isdefault = 1 ; }

  if (  $(toolset) = gcc || $(toolset) = clang  )
  {
    if ! ( $(jln-narrowing-error_isdefault) && <jln-incidental-narrowing-error>default in $(properties) )
    {
      if $(jln-narrowing-error_isdefault) && <jln-incidental-narrowing-error>on in $(properties) || <jln-narrowing-error>on in $(properties)
      {
        if (  $(toolset) = gcc && ! (  $(version) < 04.07  )  )
        {
          flags +=
            <cxxflags>"-Werror=narrowing"
          ;
        }
      }
      else if $(toolset) = clang
      {
        flags +=
          <cxxflags>"-Wno-error=c++11-narrowing"
        ;
      }
    }
    if ! ( $(jln-coverage_isdefault) && <jln-incidental-coverage>default in $(properties) )
    {
      if $(jln-coverage_isdefault) && <jln-incidental-coverage>on in $(properties) || <jln-coverage>on in $(properties)
      {
        flags +=
          <cxxflags>"--coverage"
          <linkflags>"--coverage"
        ;
        if $(toolset) = clang
        {
          flags +=
            <linkflags>"-lprofile_rt"
          ;
        }
      }
    }
    if ! ( $(jln-debug_isdefault) && <jln-incidental-debug>default in $(properties) )
    {
      if $(jln-debug_isdefault) && <jln-incidental-debug>off in $(properties) || <jln-debug>off in $(properties)
      {
        flags +=
          <cxxflags>"-g0"
        ;
      }
      else if $(jln-debug_isdefault) && <jln-incidental-debug>gdb in $(properties) || <jln-debug>gdb in $(properties)
      {
        flags +=
          <cxxflags>"-ggdb"
        ;
      }
      else if $(toolset) = clang
      {
        if $(jln-debug_isdefault) && <jln-incidental-debug>line-tables-only in $(properties) || <jln-debug>line-tables-only in $(properties)
        {
          flags +=
            <cxxflags>"-gline-tables-only"
          ;
        }
        if $(jln-debug_isdefault) && <jln-incidental-debug>lldb in $(properties) || <jln-debug>lldb in $(properties)
        {
          flags +=
            <cxxflags>"-glldb"
          ;
        }
        else if $(jln-debug_isdefault) && <jln-incidental-debug>sce in $(properties) || <jln-debug>sce in $(properties)
        {
          flags +=
            <cxxflags>"-gsce"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-g"
          ;
        }
      }
      else
      {
        flags +=
          <cxxflags>"-g"
        ;
      }
    }
    if ! $(jln-linker_isdefault)
    {
      if <jln-linker>bfd in $(properties)
      {
        flags +=
          <linkflags>"-fuse-ld=bfd"
        ;
      }
      else if (  <jln-linker>gold in $(properties) || $(toolset) = gcc  )
      {
        flags +=
          <linkflags>"-fuse-ld=gold"
        ;
      }
      else
      {
        flags +=
          <linkflags>"-fuse-ld=lld"
        ;
      }
    }
    if ! ( $(jln-lto_isdefault) && <jln-incidental-lto>default in $(properties) )
    {
      if $(jln-lto_isdefault) && <jln-incidental-lto>off in $(properties) || <jln-lto>off in $(properties)
      {
        flags +=
          <cxxflags>"-fno-lto"
          <linkflags>"-fno-lto"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-flto"
          <linkflags>"-flto"
        ;
        if (  $(toolset) = gcc && ! (  $(version) < 05.00  )  )
        {
          if ! $(jln-warnings_isdefault)
          {
            if ! <jln-warnings>off in $(properties)
            {
              flags +=
                <cxxflags>"-flto-odr-type-merging"
                <linkflags>"-flto-odr-type-merging"
              ;
            }
          }
          if $(jln-lto_isdefault) && <jln-incidental-lto>fat in $(properties) || <jln-lto>fat in $(properties)
          {
            flags +=
              <cxxflags>"-ffat-lto-objects"
            ;
          }
          if $(jln-lto_isdefault) && <jln-incidental-lto>linker-plugin in $(properties) || <jln-lto>linker-plugin in $(properties)
          {
            flags +=
              <linkflags>"-fuse-linker-plugin"
            ;
          }
        }
      }
    }
    if ! ( $(jln-optimize_isdefault) && <jln-incidental-optimize>default in $(properties) )
    {
      if $(jln-optimize_isdefault) && <jln-incidental-optimize>off in $(properties) || <jln-optimize>off in $(properties)
      {
        flags +=
          <cxxflags>"-O0"
          <linkflags>"-O0"
        ;
      }
      else if $(jln-optimize_isdefault) && <jln-incidental-optimize>debugoptimized in $(properties) || <jln-optimize>debugoptimized in $(properties)
      {
        flags +=
          <cxxflags>"-Og"
          <linkflags>"-Og"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-DNDEBUG"
        ;
        if $(jln-optimize_isdefault) && <jln-incidental-optimize>minsize in $(properties) || <jln-optimize>minsize in $(properties)
        {
          flags +=
            <cxxflags>"-Os"
            <linkflags>"-Os"
          ;
        }
        else if $(jln-optimize_isdefault) && <jln-incidental-optimize>fast in $(properties) || <jln-optimize>fast in $(properties)
        {
          flags +=
            <cxxflags>"-Ofast"
            <linkflags>"-Ofast"
          ;
        }
        else if $(jln-optimize_isdefault) && <jln-incidental-optimize>release in $(properties) || <jln-optimize>release in $(properties)
        {
          flags +=
            <cxxflags>"-O3"
            <linkflags>"-O3"
          ;
        }
      }
    }
    if ! ( $(jln-cpu_isdefault) && <jln-incidental-cpu>default in $(properties) )
    {
      if $(jln-cpu_isdefault) && <jln-incidental-cpu>generic in $(properties) || <jln-cpu>generic in $(properties)
      {
        flags +=
          <cxxflags>"-mtune=generic"
          <linkflags>"-mtune=generic"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-march=native"
          <cxxflags>"-mtune=native"
          <linkflags>"-march=native"
          <linkflags>"-mtune=native"
        ;
      }
    }
    if ! ( $(jln-whole-program_isdefault) && <jln-incidental-whole-program>default in $(properties) )
    {
      if $(jln-whole-program_isdefault) && <jln-incidental-whole-program>off in $(properties) || <jln-whole-program>off in $(properties)
      {
        flags +=
          <cxxflags>"-fno-whole-program"
        ;
        if (  $(toolset) = clang && ! (  $(version) < 03.09  )  )
        {
          flags +=
            <cxxflags>"-fno-whole-program-vtables"
            <linkflags>"-fno-whole-program-vtables"
          ;
        }
      }
      else
      {
        flags +=
          <linkflags>"-s"
        ;
        if $(jln-whole-program_isdefault) && <jln-incidental-whole-program>strip-all in $(properties) || <jln-whole-program>strip-all in $(properties)
        {
          flags +=
            <linkflags>"-Wl,--gc-sections"
            <linkflags>"-Wl,--strip-all"
          ;
        }
        if $(toolset) = gcc
        {
          flags +=
            <cxxflags>"-fwhole-program"
            <linkflags>"-fwhole-program"
          ;
        }
        else
        {
          if (  $(toolset) = clang && ! (  $(version) < 03.09  )  )
          {
            if ! ( $(jln-lto_isdefault) && <jln-incidental-lto>default in $(properties) )
            {
              if ! $(jln-lto_isdefault) && <jln-incidental-lto>off in $(properties) || <jln-lto>off in $(properties)
              {
                flags +=
                  <cxxflags>"-fwhole-program-vtables"
                  <linkflags>"-fwhole-program-vtables"
                ;
              }
            }
            if ! (  $(version) < 07.00  )
            {
              flags +=
                <cxxflags>"-fforce-emit-vtables"
                <linkflags>"-fforce-emit-vtables"
              ;
            }
          }
        }
      }
    }
    if ! ( $(jln-pedantic_isdefault) && <jln-incidental-pedantic>default in $(properties) )
    {
      if ! $(jln-pedantic_isdefault) && <jln-incidental-pedantic>off in $(properties) || <jln-pedantic>off in $(properties)
      {
        flags +=
          <cxxflags>"-pedantic"
        ;
        if $(jln-pedantic_isdefault) && <jln-incidental-pedantic>as-error in $(properties) || <jln-pedantic>as-error in $(properties)
        {
          flags +=
            <cxxflags>"-pedantic-errors"
          ;
        }
      }
    }
    if ! ( $(jln-stack-protector_isdefault) && <jln-incidental-stack-protector>default in $(properties) )
    {
      if $(jln-stack-protector_isdefault) && <jln-incidental-stack-protector>off in $(properties) || <jln-stack-protector>off in $(properties)
      {
        flags +=
          <cxxflags>"-Wno-stack-protector"
          <cxxflags>"-U_FORTIFY_SOURCE"
          <linkflags>"-Wno-stack-protector"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-D_FORTIFY_SOURCE=2"
          <cxxflags>"-Wstack-protector"
        ;
        if $(jln-stack-protector_isdefault) && <jln-incidental-stack-protector>strong in $(properties) || <jln-stack-protector>strong in $(properties)
        {
          if (  $(toolset) = gcc && ! (  $(version) < 04.09  )  )
          {
            flags +=
              <cxxflags>"-fstack-protector-strong"
              <linkflags>"-fstack-protector-strong"
            ;
          }
          else if $(toolset) = clang
          {
            flags +=
              <cxxflags>"-fstack-protector-strong"
              <cxxflags>"-fsanitize=safe-stack"
              <linkflags>"-fstack-protector-strong"
              <linkflags>"-fsanitize=safe-stack"
            ;
          }
        }
        else if $(jln-stack-protector_isdefault) && <jln-incidental-stack-protector>all in $(properties) || <jln-stack-protector>all in $(properties)
        {
          flags +=
            <cxxflags>"-fstack-protector-all"
            <linkflags>"-fstack-protector-all"
          ;
          if $(toolset) = clang
          {
            flags +=
              <cxxflags>"-fsanitize=safe-stack"
              <linkflags>"-fsanitize=safe-stack"
            ;
          }
        }
        else
        {
          flags +=
            <cxxflags>"-fstack-protector"
            <linkflags>"-fstack-protector"
          ;
        }
      }
    }
    if ! ( $(jln-relro_isdefault) && <jln-incidental-relro>default in $(properties) )
    {
      if $(jln-relro_isdefault) && <jln-incidental-relro>off in $(properties) || <jln-relro>off in $(properties)
      {
        flags +=
          <linkflags>"-Wl,-z,norelro"
        ;
      }
      else if $(jln-relro_isdefault) && <jln-incidental-relro>on in $(properties) || <jln-relro>on in $(properties)
      {
        flags +=
          <linkflags>"-Wl,-z,relro"
        ;
      }
      else if $(jln-relro_isdefault) && <jln-incidental-relro>full in $(properties) || <jln-relro>full in $(properties)
      {
        flags +=
          <linkflags>"-Wl,-z,relro,-z,now"
        ;
      }
    }
    if ! ( $(jln-pie_isdefault) && <jln-incidental-pie>default in $(properties) )
    {
      if $(jln-pie_isdefault) && <jln-incidental-pie>off in $(properties) || <jln-pie>off in $(properties)
      {
        flags +=
          <linkflags>"-no-pic"
        ;
      }
      else if $(jln-pie_isdefault) && <jln-incidental-pie>on in $(properties) || <jln-pie>on in $(properties)
      {
        flags +=
          <linkflags>"-pie"
        ;
      }
      else if $(jln-pie_isdefault) && <jln-incidental-pie>pic in $(properties) || <jln-pie>pic in $(properties)
      {
        flags +=
          <cxxflags>"-fPIC"
        ;
      }
    }
    if ! $(jln-suggests_isdefault)
    {
      if ! <jln-suggests>off in $(properties)
      {
        if $(toolset) = gcc
        {
          flags +=
            <cxxflags>"-Wsuggest-attribute=pure"
            <cxxflags>"-Wsuggest-attribute=const"
          ;
          if ! (  $(version) < 05.00  )
          {
            flags +=
              <cxxflags>"-Wsuggest-final-types"
              <cxxflags>"-Wsuggest-final-methods"
            ;
            if ! (  $(version) < 05.01  )
            {
              flags +=
                <cxxflags>"-Wnoexcept"
              ;
            }
          }
        }
      }
    }
    if ! ( $(jln-stl-debug_isdefault) && <jln-incidental-stl-debug>default in $(properties) )
    {
      if ! $(jln-stl-debug_isdefault) && <jln-incidental-stl-debug>off in $(properties) || <jln-stl-debug>off in $(properties)
      {
        flags +=
          <cxxflags>"-D_LIBCPP_DEBUG=1"
        ;
        if $(jln-stl-debug_isdefault) && <jln-incidental-stl-debug>assert-as-exception in $(properties) || <jln-stl-debug>assert-as-exception in $(properties)
        {
          flags +=
            <cxxflags>"-D_LIBCPP_DEBUG_USE_EXCEPTIONS"
          ;
        }
        if $(jln-stl-debug_isdefault) && <jln-incidental-stl-debug>allow-broken-abi in $(properties) || <jln-stl-debug>allow-broken-abi in $(properties)
        {
          flags +=
            <cxxflags>"-D_GLIBCXX_DEBUG"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-D_GLIBCXX_ASSERTIONS"
          ;
        }
        if ! ( $(jln-pedantic_isdefault) && <jln-incidental-pedantic>default in $(properties) )
        {
          if ! $(jln-pedantic_isdefault) && <jln-incidental-pedantic>off in $(properties) || <jln-pedantic>off in $(properties)
          {
            flags +=
              <cxxflags>"-D_GLIBCXX_DEBUG_PEDANTIC"
            ;
          }
        }
      }
    }
    if ! $(jln-shadow-warnings_isdefault)
    {
      if <jln-shadow-warnings>off in $(properties)
      {
        flags +=
          <cxxflags>"-Wno-shadow"
        ;
      }
      else if <jln-shadow-warnings>on in $(properties)
      {
        flags +=
          <cxxflags>"-Wshadow"
        ;
      }
      else if <jln-shadow-warnings>all in $(properties)
      {
        if $(toolset) = clang
        {
          flags +=
            <cxxflags>"-Wshadow-all"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wshadow"
          ;
        }
      }
      else if (  $(toolset) = gcc && ! (  $(version) < 07.01  )  )
      {
        if <jln-shadow-warnings>local in $(properties)
        {
          flags +=
            <cxxflags>"-Wshadow=local"
          ;
        }
        else if <jln-shadow-warnings>compatible-local in $(properties)
        {
          flags +=
            <cxxflags>"-Wshadow=compatible-local"
          ;
        }
      }
    }
    if ! $(jln-warnings_isdefault)
    {
      if <jln-warnings>off in $(properties)
      {
        flags +=
          <cxxflags>"-w"
        ;
      }
      else
      {
        if $(toolset) = gcc
        {
          flags +=
            <cxxflags>"-Wall"
            <cxxflags>"-Wextra"
            <cxxflags>"-Wcast-align"
            <cxxflags>"-Wcast-qual"
            <cxxflags>"-Wdisabled-optimization"
            <cxxflags>"-Wfloat-equal"
            <cxxflags>"-Wformat-security"
            <cxxflags>"-Wformat=2"
            <cxxflags>"-Wmissing-declarations"
            <cxxflags>"-Wmissing-include-dirs"
            <cxxflags>"-Wnon-virtual-dtor"
            <cxxflags>"-Wold-style-cast"
            <cxxflags>"-Woverloaded-virtual"
            <cxxflags>"-Wpacked"
            <cxxflags>"-Wredundant-decls"
            <cxxflags>"-Wundef"
            <cxxflags>"-Wunused-macros"
          ;
          if ! (  $(version) < 04.07  )
          {
            flags +=
              <cxxflags>"-Wsuggest-attribute=noreturn"
              <cxxflags>"-Wzero-as-null-pointer-constant"
              <cxxflags>"-Wlogical-op"
              <cxxflags>"-Wvector-operation-performance"
              <cxxflags>"-Wdouble-promotion"
              <cxxflags>"-Wtrampolines"
            ;
            if ! (  $(version) < 04.08  )
            {
              flags +=
                <cxxflags>"-Wuseless-cast"
              ;
              if ! (  $(version) < 04.09  )
              {
                flags +=
                  <cxxflags>"-Wconditionally-supported"
                  <cxxflags>"-Wfloat-conversion"
                ;
                if ! (  $(version) < 05.01  )
                {
                  flags +=
                    <cxxflags>"-Wformat-signedness"
                    <cxxflags>"-Warray-bounds=2"
                    <cxxflags>"-Wconditionally-supported"
                    <cxxflags>"-Wstrict-null-sentinel"
                    <cxxflags>"-Wsuggest-override"
                  ;
                  if ! (  $(version) < 06.01  )
                  {
                    flags +=
                      <cxxflags>"-Wduplicated-cond"
                      <cxxflags>"-Wnull-dereference"
                    ;
                    if ! (  $(version) < 07.00  )
                    {
                      flags +=
                        <cxxflags>"-Waligned-new"
                      ;
                      if ! (  $(version) < 07.01  )
                      {
                        flags +=
                          <cxxflags>"-Walloc-zero"
                          <cxxflags>"-Walloca"
                          <cxxflags>"-Wformat-overflow=2"
                          <cxxflags>"-Wduplicated-branches"
                        ;
                        if ! (  $(version) < 08.00  )
                        {
                          flags +=
                            <cxxflags>"-Wclass-memaccess"
                          ;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else if $(toolset) = clang
        {
          flags +=
            <cxxflags>"-Weverything"
            <cxxflags>"-Wno-c++98-compat"
            <cxxflags>"-Wno-c++98-compat-pedantic"
            <cxxflags>"-Wno-mismatched-tags"
            <cxxflags>"-Wno-padded"
            <cxxflags>"-Wno-global-constructors"
            <cxxflags>"-Wno-weak-vtables"
            <cxxflags>"-Wno-exit-time-destructors"
            <cxxflags>"-Wno-covered-switch-default"
            <cxxflags>"-Wno-switch-default"
            <cxxflags>"-Wno-switch-enum"
          ;
          if ! (  $(version) < 03.09  )
          {
            flags +=
              <cxxflags>"-Wno-undefined-var-template"
            ;
          }
          if ! (  $(version) < 05.00  )
          {
            flags +=
              <cxxflags>"-Wno-inconsistent-missing-destructor-override"
            ;
          }
        }
        if (  <jln-warnings>strict in $(properties) || <jln-warnings>very-strict in $(properties)  )
        {
          flags +=
            <cxxflags>"-Wconversion"
          ;
          if (  $(toolset) = gcc && ! (  $(version) < 08.00  )  )
          {
            flags +=
              <cxxflags>"-Wcast-align=strict"
            ;
          }
        }
        else if $(toolset) = clang
        {
          flags +=
            <cxxflags>"-Wno-conversion"
            <cxxflags>"-Wno-sign-conversion"
          ;
        }
      }
    }
    if ! ( $(jln-sanitizers_isdefault) && <jln-incidental-sanitizers>default in $(properties) )
    {
      if $(jln-sanitizers_isdefault) && <jln-incidental-sanitizers>off in $(properties) || <jln-sanitizers>off in $(properties)
      {
        flags +=
          <cxxflags>"-fno-sanitize=all"
          <linkflags>"-fno-sanitize=all"
        ;
      }
      else
      {
        if $(toolset) = clang
        {
          if ! (  $(version) < 03.01  )
          {
            flags +=
              <cxxflags>"-fsanitize=undefined"
              <cxxflags>"-fsanitize=address"
              <cxxflags>"-fsanitize-address-use-after-scope"
              <cxxflags>"-fno-omit-frame-pointer"
              <cxxflags>"-fno-optimize-sibling-calls"
              <linkflags>"-fsanitize=undefined"
              <linkflags>"-fsanitize=address"
            ;
            if ! (  $(version) < 03.04  )
            {
              flags +=
                <cxxflags>"-fsanitize=leak"
                <linkflags>"-fsanitize=leak"
              ;
              if ! (  $(version) < 06.00  )
              {
                flags +=
                  <cxxflags>"-fsanitize=bounds"
                  <linkflags>"-fsanitize=bounds"
                ;
              }
            }
          }
        }
        else
        {
          if ! (  $(version) < 04.08  )
          {
            flags +=
              <cxxflags>"-fsanitize=address"
              <cxxflags>"-fno-omit-frame-pointer"
              <cxxflags>"-fno-optimize-sibling-calls"
              <linkflags>"-fsanitize=address"
            ;
            if ! (  $(version) < 04.09  )
            {
              flags +=
                <cxxflags>"-fsanitize=undefined"
                <cxxflags>"-fsanitize=leak"
                <linkflags>"-fsanitize=undefined"
                <linkflags>"-fsanitize=leak"
              ;
              if ! (  $(version) < 06.00  )
              {
                flags +=
                  <cxxflags>"-fsanitize=bounds"
                  <cxxflags>"-fsanitize=bounds-strict"
                ;
              }
            }
          }
        }
      }
    }
    if ! ( $(jln-control-flow_isdefault) && <jln-incidental-control-flow>default in $(properties) )
    {
      if $(jln-control-flow_isdefault) && <jln-incidental-control-flow>off in $(properties) || <jln-control-flow>off in $(properties)
      {
        if (  $(toolset) = gcc && ! (  $(version) < 08.00  )  )
        {
          flags +=
            <cxxflags>"-fcf-protection=none"
          ;
        }
        if $(toolset) = clang
        {
          flags +=
            <cxxflags>"-fno-sanitize=cfi"
            <linkflags>"-fno-sanitize=cfi"
          ;
        }
      }
      else
      {
        if (  $(toolset) = gcc && ! (  $(version) < 08.00  )  )
        {
          flags +=
            <cxxflags>"-fcf-protection=full"
          ;
        }
        if $(toolset) = clang
        {
          flags +=
            <cxxflags>"-fsanitize=cfi"
            <cxxflags>"-fvisibility=hidden"
            <cxxflags>"-flto"
            <linkflags>"-fsanitize=cfi"
            <linkflags>"-flto"
          ;
        }
      }
    }
    if ! ( $(jln-sanitizers-extra_isdefault) && <jln-incidental-sanitizers-extra>default in $(properties) )
    {
      if $(jln-sanitizers-extra_isdefault) && <jln-incidental-sanitizers-extra>thread in $(properties) || <jln-sanitizers-extra>thread in $(properties)
      {
        flags +=
          <cxxflags>"-fsanitize=thread"
        ;
      }
      else if $(jln-sanitizers-extra_isdefault) && <jln-incidental-sanitizers-extra>pointer in $(properties) || <jln-sanitizers-extra>pointer in $(properties)
      {
        if (  $(toolset) = gcc && ! (  $(version) < 08.00  )  )
        {
          flags +=
            <cxxflags>"-fsanitize=pointer-compare"
            <cxxflags>"-fsanitize=pointer-subtract"
          ;
        }
      }
    }
    if ! $(jln-reproducible-build-warnings_isdefault)
    {
      if (  $(toolset) = gcc && ! (  $(version) < 04.09  )  )
      {
        if <jln-reproducible-build-warnings>on in $(properties)
        {
          flags +=
            <cxxflags>"-Wdate-time"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wno-date-time"
          ;
        }
      }
    }
    if ! $(jln-color_isdefault)
    {
      if (  (  $(toolset) = gcc && ! (  $(version) < 04.09  )  ) || $(toolset) = clang  )
      {
        if <jln-color>auto in $(properties)
        {
          flags +=
            <cxxflags>"-fdiagnostics-color=auto"
          ;
        }
        else if <jln-color>never in $(properties)
        {
          flags +=
            <cxxflags>"-fdiagnostics-color=never"
          ;
        }
        else if <jln-color>always in $(properties)
        {
          flags +=
            <cxxflags>"-fdiagnostics-color=always"
          ;
        }
      }
    }
    if ! $(jln-elide-type_isdefault)
    {
      if (  (  $(toolset) = gcc && ! (  $(version) < 08.00  )  ) || (  $(toolset) = clang && ! (  $(version) < 03.04  )  )  )
      {
        if <jln-elide-type>on in $(properties)
        {
          flags +=
            <cxxflags>"-felide-type"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-elide-type"
          ;
        }
      }
    }
    if ! ( $(jln-exceptions_isdefault) && <jln-incidental-exceptions>default in $(properties) )
    {
      if $(jln-exceptions_isdefault) && <jln-incidental-exceptions>on in $(properties) || <jln-exceptions>on in $(properties)
      {
        flags +=
          <cxxflags>"-fexceptions"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-fno-exceptions"
        ;
      }
    }
    if ! ( $(jln-rtti_isdefault) && <jln-incidental-rtti>default in $(properties) )
    {
      if $(jln-rtti_isdefault) && <jln-incidental-rtti>on in $(properties) || <jln-rtti>on in $(properties)
      {
        flags +=
          <cxxflags>"-frtti"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-fno-rtti"
        ;
      }
    }
    if ! $(jln-diagnostics-show-template-tree_isdefault)
    {
      if (  (  $(toolset) = gcc && ! (  $(version) < 08.00  )  ) || $(toolset) = clang  )
      {
        if <jln-diagnostics-show-template-tree>on in $(properties)
        {
          flags +=
            <cxxflags>"-fdiagnostics-show-template-tree"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-diagnostics-show-template-tree"
          ;
        }
      }
    }
    if ! $(jln-diagnostics-format_isdefault)
    {
      if <jln-diagnostics-format>fixits in $(properties)
      {
        if (  (  $(toolset) = gcc && ! (  $(version) < 07.00  )  ) || (  $(toolset) = clang && ! (  $(version) < 05.00  )  )  )
        {
          flags +=
            <cxxflags>"-fdiagnostics-parseable-fixits"
          ;
        }
      }
      else if <jln-diagnostics-format>patch in $(properties)
      {
      }
      if (  $(toolset) = gcc && ! (  $(version) < 07.00  )  )
      {
        flags +=
          <cxxflags>"-fdiagnostics-generate-patch"
        ;
      }
    }
  }
  else if $(toolset) = msvc
  {
    if ! ( $(jln-stl-fix_isdefault) && <jln-incidental-stl-fix>default in $(properties) )
    {
      if $(jln-stl-fix_isdefault) && <jln-incidental-stl-fix>on in $(properties) || <jln-stl-fix>on in $(properties)
      {
        flags +=
          <cxxflags>"/DNOMINMAX"
        ;
      }
    }
    if ! ( $(jln-debug_isdefault) && <jln-incidental-debug>default in $(properties) )
    {
      if $(jln-debug_isdefault) && <jln-incidental-debug>off in $(properties) || <jln-debug>off in $(properties)
      {
        flags +=
          <cxxflags>"/DEBUG:NONE"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/RTC1"
          <cxxflags>"/Od"
        ;
        if $(jln-debug_isdefault) && <jln-incidental-debug>on in $(properties) || <jln-debug>on in $(properties)
        {
          flags +=
            <cxxflags>"/DEBUG"
          ;
        }
        else if $(jln-debug_isdefault) && <jln-incidental-debug>line-tables-only in $(properties) || <jln-debug>line-tables-only in $(properties)
        {
          flags +=
            <cxxflags>"/DEBUG:FASTLINK"
          ;
        }
        if ! ( $(jln-optimize_isdefault) && <jln-incidental-optimize>default in $(properties) )
        {
          if $(jln-optimize_isdefault) && <jln-incidental-optimize>debugoptimized in $(properties) || <jln-optimize>debugoptimized in $(properties)
          {
            flags +=
              <cxxflags>"/Zi"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/ZI"
            ;
          }
        }
        else
        {
          flags +=
            <cxxflags>"/ZI"
          ;
        }
      }
    }
    if ! ( $(jln-exceptions_isdefault) && <jln-incidental-exceptions>default in $(properties) )
    {
      if $(jln-exceptions_isdefault) && <jln-incidental-exceptions>on in $(properties) || <jln-exceptions>on in $(properties)
      {
        flags +=
          <cxxflags>"/EHc"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/EHc-"
        ;
      }
    }
    if ! ( $(jln-optimize_isdefault) && <jln-incidental-optimize>default in $(properties) )
    {
      if $(jln-optimize_isdefault) && <jln-incidental-optimize>off in $(properties) || <jln-optimize>off in $(properties)
      {
        flags +=
          <cxxflags>"/Ob0 /Od /Oi- /Oy-"
        ;
      }
      else if $(jln-optimize_isdefault) && <jln-incidental-optimize>debugoptimized in $(properties) || <jln-optimize>debugoptimized in $(properties)
      {
        flags +=
          <cxxflags>"/Ob1"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/DNDEBUG"
        ;
        if $(jln-optimize_isdefault) && <jln-incidental-optimize>release in $(properties) || <jln-optimize>release in $(properties)
        {
          flags +=
            <cxxflags>"/O2"
            <cxxflags>"/OPT:REF"
            <linkflags>"/OPT:REF"
          ;
        }
        else if $(jln-optimize_isdefault) && <jln-incidental-optimize>minsize in $(properties) || <jln-optimize>minsize in $(properties)
        {
          flags +=
            <cxxflags>"/O1"
            <cxxflags>"/OPT:REF"
            <cxxflags>"/Gw"
            <linkflags>"/OPT:REF"
          ;
        }
        else if $(jln-optimize_isdefault) && <jln-incidental-optimize>fast in $(properties) || <jln-optimize>fast in $(properties)
        {
          flags +=
            <cxxflags>"/O2"
            <cxxflags>"/OPT:REF"
            <cxxflags>"/fp:fast"
            <linkflags>"/OPT:REF"
          ;
        }
      }
    }
    if ! ( $(jln-lto_isdefault) && <jln-incidental-lto>default in $(properties) )
    {
      if $(jln-lto_isdefault) && <jln-incidental-lto>off in $(properties) || <jln-lto>off in $(properties)
      {
        flags +=
          <cxxflags>"/LTCG:OFF"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/GL"
          <linkflags>"/LTCG"
        ;
      }
    }
    if ! ( $(jln-whole-program_isdefault) && <jln-incidental-whole-program>default in $(properties) )
    {
      if $(jln-whole-program_isdefault) && <jln-incidental-whole-program>off in $(properties) || <jln-whole-program>off in $(properties)
      {
        flags +=
          <cxxflags>"/GL-"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/GL"
          <cxxflags>"/Gw"
          <linkflags>"/LTCG"
        ;
      }
    }
    if ! ( $(jln-pedantic_isdefault) && <jln-incidental-pedantic>default in $(properties) )
    {
      if ! $(jln-pedantic_isdefault) && <jln-incidental-pedantic>off in $(properties) || <jln-pedantic>off in $(properties)
      {
        flags +=
          <cxxflags>"/permissive-"
          <cxxflags>"/Zc:__cplusplus"
        ;
      }
    }
    if ! ( $(jln-rtti_isdefault) && <jln-incidental-rtti>default in $(properties) )
    {
      if $(jln-rtti_isdefault) && <jln-incidental-rtti>on in $(properties) || <jln-rtti>on in $(properties)
      {
        flags +=
          <cxxflags>"/GR"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/GR-"
        ;
      }
    }
    if ! ( $(jln-stl-debug_isdefault) && <jln-incidental-stl-debug>default in $(properties) )
    {
      if $(jln-stl-debug_isdefault) && <jln-incidental-stl-debug>off in $(properties) || <jln-stl-debug>off in $(properties)
      {
        flags +=
          <cxxflags>"/D_HAS_ITERATOR_DEBUGGING=0"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/D_DEBUG"
          <cxxflags>"/D_HAS_ITERATOR_DEBUGGING=1"
        ;
      }
    }
    if ! ( $(jln-control-flow_isdefault) && <jln-incidental-control-flow>default in $(properties) )
    {
      if $(jln-control-flow_isdefault) && <jln-incidental-control-flow>off in $(properties) || <jln-control-flow>off in $(properties)
      {
        flags +=
          <cxxflags>"/guard:cf-"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/guard:cf"
        ;
      }
    }
    if ! ( $(jln-sanitizers_isdefault) && <jln-incidental-sanitizers>default in $(properties) )
    {
      if $(jln-sanitizers_isdefault) && <jln-incidental-sanitizers>on in $(properties) || <jln-sanitizers>on in $(properties)
      {
        flags +=
          <cxxflags>"/sdl"
        ;
      }
      else
      {
        if ! ( $(jln-stack-protector_isdefault) && <jln-incidental-stack-protector>default in $(properties) )
        {
          if ! $(jln-stack-protector_isdefault) && <jln-incidental-stack-protector>off in $(properties) || <jln-stack-protector>off in $(properties)
          {
            flags +=
              <cxxflags>"/sdl-"
            ;
          }
        }
      }
    }
    if ! ( $(jln-stack-protector_isdefault) && <jln-incidental-stack-protector>default in $(properties) )
    {
      if ! $(jln-stack-protector_isdefault) && <jln-incidental-stack-protector>off in $(properties) || <jln-stack-protector>off in $(properties)
      {
        flags +=
          <cxxflags>"/GS"
          <cxxflags>"/sdl"
        ;
        if $(jln-stack-protector_isdefault) && <jln-incidental-stack-protector>strong in $(properties) || <jln-stack-protector>strong in $(properties)
        {
          flags +=
            <cxxflags>"/RTC1"
          ;
        }
        else if $(jln-stack-protector_isdefault) && <jln-incidental-stack-protector>all in $(properties) || <jln-stack-protector>all in $(properties)
        {
          flags +=
            <cxxflags>"/RTC1"
            <cxxflags>"/RTCc"
          ;
        }
      }
    }
    if ! $(jln-shadow-warnings_isdefault)
    {
      if <jln-shadow-warnings>off in $(properties)
      {
        flags +=
          <cxxflags>"/wd4456"
          <cxxflags>"/wd4459"
        ;
      }
      else if (  <jln-shadow-warnings>on in $(properties) || <jln-shadow-warnings>all in $(properties)  )
      {
        flags +=
          <cxxflags>"/w4456"
          <cxxflags>"/w4459"
        ;
      }
      else if <jln-shadow-warnings>local in $(properties)
      {
        flags +=
          <cxxflags>"/w4456"
          <cxxflags>"/wd4459"
        ;
      }
    }
    if ! $(jln-warnings_isdefault)
    {
      if <jln-warnings>on in $(properties)
      {
        flags +=
          <cxxflags>"/W4"
          <cxxflags>"/wd4244"
          <cxxflags>"/wd4245"
        ;
      }
      else if <jln-warnings>strict in $(properties)
      {
        flags +=
          <cxxflags>"/Wall"
          <cxxflags>"/wd4820"
          <cxxflags>"/wd4514"
          <cxxflags>"/wd4710"
        ;
      }
      else if <jln-warnings>very-strict in $(properties)
      {
        flags +=
          <cxxflags>"/Wall"
        ;
      }
      else if <jln-warnings>off in $(properties)
      {
        flags +=
          <cxxflags>"/W0"
        ;
      }
    }
  }
  return $(flags) ;
}
