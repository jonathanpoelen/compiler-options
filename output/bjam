# https://boostorg.github.io/build/manual/develop/index.html

import feature : feature ;
import modules ;

CXX_BJAM_YEAR_VERSION = [ modules.peek : JAMVERSION ] ;

feature <jln-color> : default auto never always : incidental ;
feature <jln-coverage> : default off on : propagated ;
feature <jln-debug> : default off on line_tables_only gdb lldb sce : propagated ;
feature <jln-diagnostics-format> : default fixits patch print_source_range_info : incidental ;
feature <jln-diagnostics-show-template-tree> : default off on : incidental ;
feature <jln-elide-type> : default off on : incidental ;
feature <jln-exceptions> : default off on : propagated ;
feature <jln-fast-math> : default off on : propagated ;
feature <jln-lto> : default off on fat : propagated ;
feature <jln-optimize> : default off on size speed whole_program : propagated ;
feature <jln-pedantic> : on default off as_error : propagated ;
feature <jln-pie> : default off on pic : propagated ;
feature <jln-relro> : default off on full : propagated ;
feature <jln-reproducible-build-warnings> : default off on : incidental ;
feature <jln-rtti> : default off on : propagated ;
feature <jln-sanitizers> : default off on : propagated ;
feature <jln-sanitizers-extra> : default off thread pointer : propagated ;
feature <jln-stack-protector> : default off on strong all : propagated ;
feature <jln-stl-debug> : default off on allow_broken_abi assert_as_exception : propagated ;
feature <jln-stl-fix> : on default off : propagated ;
feature <jln-suggests> : default off on : incidental ;
feature <jln-warnings> : on default off strict : incidental ;

if $(CXX_BJAM_YEAR_VERSION) < 2016.00 {
  import toolset ;
  toolset.flags jln-coverage JLN_COVERAGE : <jln-coverage> ;
  toolset.flags jln-debug JLN_DEBUG : <jln-debug> ;
  toolset.flags jln-exceptions JLN_EXCEPTIONS : <jln-exceptions> ;
  toolset.flags jln-fast-math JLN_FAST_MATH : <jln-fast-math> ;
  toolset.flags jln-lto JLN_LTO : <jln-lto> ;
  toolset.flags jln-optimize JLN_OPTIMIZE : <jln-optimize> ;
  toolset.flags jln-pedantic JLN_PEDANTIC : <jln-pedantic> ;
  toolset.flags jln-pie JLN_PIE : <jln-pie> ;
  toolset.flags jln-relro JLN_RELRO : <jln-relro> ;
  toolset.flags jln-rtti JLN_RTTI : <jln-rtti> ;
  toolset.flags jln-sanitizers JLN_SANITIZERS : <jln-sanitizers> ;
  toolset.flags jln-sanitizers-extra JLN_SANITIZERS_EXTRA : <jln-sanitizers-extra> ;
  toolset.flags jln-stack-protector JLN_STACK_PROTECTOR : <jln-stack-protector> ;
  toolset.flags jln-stl-debug JLN_STL_DEBUG : <jln-stl-debug> ;
  toolset.flags jln-stl-fix JLN_STL_FIX : <jln-stl-fix> ;
}

import property-set ;
import string ;

local ORIGINAL_TOOLSET = 0 ;
local COMP_VERSION = 00.00 ;

rule jln-get-normalized-compiler-version ( toolset : version )
{
  # TODO `version` is not the real version. For toolset=gcc-5, version is 5 ; for clang-scan, version is ''
  # define PP_CAT_I(a,b) a##b
  # define PP_CAT(a,b) PP_CAT_I(a,b)
  # g++ -x c++ -E - <<<'PP_CAT(__GNUC__, PP_CAT(__GNUC_MINOR__, __GNUC_PATCHLEVEL__))'
  # clang++ -x c++ -E - <<<'PP_CAT(__clang_major__, PP_CAT(__clang_minor__, __clang_patchlevel__))'
  if $(ORIGINAL_TOOLSET) != $(toolset)
  {
    local version = [ MATCH "^[^0-9]*(.*)$" : $(version) ] ;
    if ! $(version) {
      # if $(toolset) = gcc {
      #   version = [ SHELL "$(toolset) -dumpfullversion" ] ;
      # }
      # else {
        version = [ MATCH ".*(\\d+\\.\\d+\\.\\d+).*" : [ SHELL "$(toolset) --version" ] ] ;
      # }
    }
    local match = [ MATCH "^([0-9]+)(\\.([0-9]+))?" : $(version) ] ;
    local major = [ MATCH "(..)$" : [ string.join 00 $(match[1]) ] ] ;
    local minor = [ MATCH "(..)$" : [ string.join 00 $(match[3]) ] ] ;
    COMP_VERSION = $(major).$(minor) ;
    ORIGINAL_TOOLSET = $(toolset) ;
  }
  return $(COMP_VERSION) ;
}

rule jln_flags ( properties * )
{
  local ps = [ property-set.create $(properties) ] ;
  local toolset = [ $(ps).get <toolset> ] ;
  local version = [ jln-get-normalized-compiler-version $(toolset)
                  : [ $(ps).get <toolset-$(toolset):version> ] ] ;

  local flags = ;
  if $(CXX_BJAM_YEAR_VERSION) >= 2016.00
  {
    flags += 
      <relevant>jln-coverage
      <relevant>jln-debug
      <relevant>jln-exceptions
      <relevant>jln-fast-math
      <relevant>jln-lto
      <relevant>jln-optimize
      <relevant>jln-pedantic
      <relevant>jln-pie
      <relevant>jln-relro
      <relevant>jln-rtti
      <relevant>jln-sanitizers
      <relevant>jln-sanitizers-extra
      <relevant>jln-stack-protector
      <relevant>jln-stl-debug
      <relevant>jln-stl-fix
    ;
  }


  if (  $(toolset) = gcc || $(toolset) = clang  )
  {
    if ! (  <jln-coverage>default in $(properties) )
    {
      if <jln-coverage>on in $(properties)
      {
        flags +=
          <cxxflags>--coverage
          <linkflags>--coverage
        ;
        if $(toolset) = clang
        {
          flags +=
            <linkflags>-lprofile_rt
          ;
        }
      }
    }
    if ! (  <jln-debug>default in $(properties) )
    {
      if <jln-debug>off in $(properties)
      {
        flags +=
          <cxxflags>-g0
        ;
      }
      else if <jln-debug>gdb in $(properties)
      {
        flags +=
          <cxxflags>-ggdb
        ;
      }
      else if $(toolset) = clang
      {
        if <jln-debug>line_tables_only in $(properties)
        {
          flags +=
            <cxxflags>-gline-tables-only
          ;
        }
        if <jln-debug>lldb in $(properties)
        {
          flags +=
            <cxxflags>-glldb
          ;
        }
        else if <jln-debug>sce in $(properties)
        {
          flags +=
            <cxxflags>-gsce
          ;
        }
        else
        {
          flags +=
            <cxxflags>-g
          ;
        }
      }
      else
      {
        flags +=
          <cxxflags>-g
        ;
      }
    }
    if ! (  <jln-lto>default in $(properties) )
    {
      if <jln-lto>off in $(properties)
      {
        flags +=
          <cxxflags>-fno-lto
          <linkflags>-fno-lto
        ;
      }
      else
      {
        flags +=
          <cxxflags>-flto
          <linkflags>-flto
        ;
        if (  $(toolset) = gcc && ! (  $(version) < 05.00  )  )
        {
          flags +=
            <cxxflags>-flto-odr-type-merging
            <linkflags>-flto-odr-type-merging
          ;
          if <jln-lto>fat in $(properties)
          {
            flags +=
              <cxxflags>-ffat-lto-objects
            ;
          }
        }
        else
        {
          if ! (  <jln-optimize>default in $(properties) )
          {
            if <jln-optimize>whole_program in $(properties)
            {
              if (  $(toolset) = clang && ! (  $(version) < 03.09  )  )
              {
                flags +=
                  <cxxflags>-fwhole-program-vtables
                  <linkflags>-fwhole-program-vtables
                ;
              }
            }
          }
        }
      }
    }
    if ! (  <jln-fast-math>default in $(properties) )
    {
      if <jln-fast-math>on in $(properties)
      {
        flags +=
          <cxxflags>-ffast-math
          <linkflags>-ffast-math
        ;
      }
      else
      {
        flags +=
          <cxxflags>-fno-fast-math
          <linkflags>-fno-fast-math
        ;
      }
    }
    if ! (  <jln-optimize>default in $(properties) )
    {
      if <jln-optimize>on in $(properties)
      {
        flags +=
          <cxxflags>-O2
          <linkflags>-O2
        ;
      }
      else if <jln-optimize>off in $(properties)
      {
        flags +=
          <cxxflags>-O0
          <linkflags>-O0
        ;
      }
      else if <jln-optimize>size in $(properties)
      {
        flags +=
          <cxxflags>-Os
          <linkflags>-Os
        ;
      }
      else if <jln-optimize>speed in $(properties)
      {
        flags +=
          <cxxflags>-O3
          <linkflags>-O3
        ;
      }
      else if <jln-optimize>whole_program in $(properties)
      {
        flags +=
          <cxxflags>-O3
          <cxxflags>-march=native
          <linkflags>-s
          <linkflags>-O3
          <linkflags>-march=native
        ;
        if (  $(toolset) = clang && ! (  $(version) < 07.00  )  )
        {
          flags +=
            <cxxflags>-fforce-emit-vtables
            <linkflags>-fforce-emit-vtables
          ;
        }
        else if $(toolset) = gcc
        {
          flags +=
            <cxxflags>-fwhole-program
            <linkflags>-fwhole-program
          ;
        }
      }
    }
    if ! (  <jln-pedantic>default in $(properties) )
    {
      if ! <jln-pedantic>off in $(properties)
      {
        flags +=
          <cxxflags>-pedantic
        ;
        if <jln-pedantic>as_error in $(properties)
        {
          flags +=
            <cxxflags>-pedantic-errors
          ;
        }
      }
    }
    if ! (  <jln-stack-protector>default in $(properties) )
    {
      if ! <jln-stack-protector>off in $(properties)
      {
        flags +=
          <cxxflags>-Wstack-protector
          <cxxflags>-fstack-protector
          <linkflags>-fstack-protector
          <define>_FORTIFY_SOURCE=2
        ;
        if <jln-stack-protector>strong in $(properties)
        {
          if ! (  $(toolset) = gcc && $(version) < 04.09  )
          {
            flags +=
              <cxxflags>-fstack-protector-strong
              <linkflags>-fstack-protector-strong
            ;
          }
          else if $(toolset) = clang
          {
            flags +=
              <cxxflags>-fsanitize=safe-stack
              <linkflags>-fsanitize=safe-stack
            ;
          }
        }
        else if <jln-stack-protector>all in $(properties)
        {
          flags +=
            <cxxflags>-fstack-protector-all
            <linkflags>-fstack-protector-all
          ;
        }
      }
    }
    if ! (  <jln-relro>default in $(properties) )
    {
      if <jln-relro>off in $(properties)
      {
        flags +=
          <linkflags>-Wl,-z,norelro
        ;
      }
      else if <jln-relro>on in $(properties)
      {
        flags +=
          <linkflags>-Wl,-z,relro
        ;
      }
      else if <jln-relro>full in $(properties)
      {
        flags +=
          <linkflags>-Wl,-z,relro,-z,now
        ;
      }
    }
    if ! (  <jln-pie>default in $(properties) )
    {
      if <jln-pie>off in $(properties)
      {
        flags +=
          <cxxflags>-fno-PIC
          <cxxflags>-fno-PIE
          <linkflags>-fno-PIC
          <linkflags>-fno-PIE
        ;
      }
      else if <jln-pie>on in $(properties)
      {
        flags +=
          <cxxflags>-fno-PIC
          <cxxflags>-fPIE
          <linkflags>-fno-PIC
          <linkflags>-fPIE
        ;
      }
      else if <jln-pie>pic in $(properties)
      {
        flags +=
          <cxxflags>-fno-PIE
          <cxxflags>-fPIC
          <linkflags>-fno-PIE
          <linkflags>-fPIC
        ;
      }
    }
    if ! (  <jln-suggests>default in $(properties) )
    {
      if ! <jln-suggests>off in $(properties)
      {
        if $(toolset) = gcc
        {
          flags +=
            <cxxflags>-Wsuggest-attribute=pure
            <cxxflags>-Wsuggest-attribute=const
          ;
          if ! (  $(version) < 05.00  )
          {
            flags +=
              <cxxflags>-Wsuggest-final-types
              <cxxflags>-Wsuggest-final-methods
            ;
            if ! (  $(version) < 05.01  )
            {
              flags +=
                <cxxflags>-Wnoexcept
              ;
            }
          }
        }
      }
    }
    if ! (  <jln-stl-debug>default in $(properties) )
    {
      if ! <jln-stl-debug>off in $(properties)
      {
        flags +=
          <define>_LIBCPP_DEBUG=1
        ;
        if <jln-stl-debug>assert_as_exception in $(properties)
        {
          flags +=
            <define>_LIBCPP_DEBUG_USE_EXCEPTIONS
          ;
        }
        if <jln-stl-debug>allow_broken_abi in $(properties)
        {
          flags +=
            <define>_GLIBCXX_DEBUG
          ;
        }
        else
        {
          flags +=
            <define>_GLIBCXX_ASSERTIONS
          ;
        }
        if ! (  <jln-pedantic>default in $(properties) )
        {
          if ! <jln-pedantic>off in $(properties)
          {
            flags +=
              <define>_GLIBCXX_DEBUG_PEDANTIC
            ;
          }
        }
      }
    }
    if ! (  <jln-warnings>default in $(properties) )
    {
      if <jln-warnings>off in $(properties)
      {
        flags +=
          <cxxflags>-w
        ;
      }
      else
      {
        if $(toolset) = gcc
        {
          flags +=
            <cxxflags>-Wall
            <cxxflags>-Wextra
            <cxxflags>-Wcast-align
            <cxxflags>-Wcast-qual
            <cxxflags>-Wdisabled-optimization
            <cxxflags>-Wfloat-equal
            <cxxflags>-Wformat-security
            <cxxflags>-Wformat-signedness
            <cxxflags>-Wformat=2
            <cxxflags>-Wmissing-declarations
            <cxxflags>-Wmissing-include-dirs
            <cxxflags>-Wnon-virtual-dtor
            <cxxflags>-Wold-style-cast
            <cxxflags>-Woverloaded-virtual
            <cxxflags>-Wpacked
            <cxxflags>-Wredundant-decls
            <cxxflags>-Wundef
            <cxxflags>-Wuninitialized
            <cxxflags>-Wunused-macros
            <cxxflags>-Wvla
          ;
          if ! (  $(version) < 04.07  )
          {
            flags +=
              <cxxflags>-Wsuggest-attribute=noreturn
              <cxxflags>-Wzero-as-null-pointer-constant
              <cxxflags>-Wlogical-op
              <cxxflags>-Wvector-operation-performance
              <cxxflags>-Wdouble-promotion
              <cxxflags>-Wtrampolines
            ;
            if ! (  $(version) < 04.08  )
            {
              flags +=
                <cxxflags>-Wuseless-cast
              ;
              if ! (  $(version) < 04.09  )
              {
                flags +=
                  <cxxflags>-Wconditionally-supported
                  <cxxflags>-Wfloat-conversion
                  <cxxflags>-Wopenmp-simd
                ;
                if ! (  $(version) < 05.01  )
                {
                  flags +=
                    <cxxflags>-fsized-deallocation
                    <cxxflags>-Warray-bounds=2
                    <cxxflags>-Wconditionally-supported
                    <cxxflags>-Wsized-deallocation
                    <cxxflags>-Wstrict-null-sentinel
                    <cxxflags>-Wsuggest-override
                  ;
                  if ! (  $(version) < 06.01  )
                  {
                    flags +=
                      <cxxflags>-Wduplicated-cond
                      <cxxflags>-Wnull-dereference
                    ;
                    if ! (  $(version) < 07.00  )
                    {
                      flags +=
                        <cxxflags>-Waligned-new
                      ;
                      if ! (  $(version) < 07.01  )
                      {
                        flags +=
                          <cxxflags>-Walloc-zero
                          <cxxflags>-Walloca
                          <cxxflags>-Wformat-overflow
                          <cxxflags>-Wshadow=compatible-local
                          <cxxflags>-Wduplicated-branches
                        ;
                        if ! (  $(version) < 08.00  )
                        {
                          flags +=
                            <cxxflags>-Wclass-memaccess
                          ;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if $(toolset) = clang
        {
          flags +=
            <cxxflags>-Weverything
            <cxxflags>-Wno-c++98-compat
            <cxxflags>-Wno-c++98-compat-pedantic
            <cxxflags>-Wno-mismatched-tags
            <cxxflags>-Wno-padded
            <cxxflags>-Wno-shadow
            <cxxflags>-Wno-global-constructors
            <cxxflags>-Wno-weak-vtables
            <cxxflags>-Wno-exit-time-destructors
            <cxxflags>-Wno-covered-switch-default
            <cxxflags>-Wno-switch-default
            <cxxflags>-Wno-switch-enum
            <cxxflags>-Wno-inconsistent-missing-destructor-override
          ;
        }
        if <jln-warnings>strict in $(properties)
        {
          flags +=
            <cxxflags>-Wconversion
          ;
          if (  $(toolset) = gcc && ! (  $(version) < 08.00  )  )
          {
            flags +=
              <cxxflags>-Wcast-align=strict
            ;
          }
        }
        else if $(toolset) = clang
        {
          flags +=
            <cxxflags>-Wno-conversion
            <cxxflags>-Wno-sign-conversion
          ;
        }
      }
    }
    if ! (  <jln-sanitizers>default in $(properties) )
    {
      if <jln-sanitizers>off in $(properties)
      {
        flags +=
          <cxxflags>-fno-sanitize=all
          <linkflags>-fno-sanitize=all
        ;
      }
      else
      {
        if $(toolset) = clang
        {
          if ! (  $(version) < 03.01  )
          {
            flags +=
              <cxxflags>-fsanitize=undefined
              <cxxflags>-fsanitize=address
              <cxxflags>-fsanitize-address-use-after-scope
              <cxxflags>-fno-omit-frame-pointer
              <cxxflags>-fno-optimize-sibling-calls
              <linkflags>-fsanitize=undefined
              <linkflags>-fsanitize=address
            ;
            if ! (  $(version) < 03.04  )
            {
              flags +=
                <cxxflags>-fsanitize=leak
                <linkflags>-fsanitize=leak
              ;
              if ! (  $(version) < 06.00  )
              {
                flags +=
                  <cxxflags>-fsanitize=bounds
                  <linkflags>-fsanitize=bounds
                ;
              }
            }
          }
        }
        else
        {
          if ! (  $(version) < 04.08  )
          {
            flags +=
              <cxxflags>-fsanitize=address
              <cxxflags>-fno-omit-frame-pointer
              <cxxflags>-fno-optimize-sibling-calls
              <linkflags>-fsanitize=address
            ;
            if ! (  $(version) < 04.09  )
            {
              flags +=
                <cxxflags>-fsanitize=undefined
                <cxxflags>-fsanitize=leak
                <linkflags>-fsanitize=undefined
                <linkflags>-fsanitize=leak
              ;
              if ! (  $(version) < 06.00  )
              {
                flags +=
                  <cxxflags>-fsanitize=bounds
                  <cxxflags>-fsanitize=bounds-strict
                ;
              }
            }
          }
        }
      }
    }
    if ! (  <jln-sanitizers-extra>default in $(properties) )
    {
      if <jln-sanitizers-extra>thread in $(properties)
      {
        flags +=
          <cxxflags>-fsanitize=thread
        ;
      }
      else if <jln-sanitizers-extra>pointer in $(properties)
      {
        if (  $(toolset) = gcc && ! (  $(version) < 08.00  )  )
        {
          flags +=
            <cxxflags>-fsanitize=pointer-compare
            <cxxflags>-fsanitize=pointer-subtract
          ;
        }
      }
    }
    if ! (  <jln-reproducible-build-warnings>default in $(properties) )
    {
      if (  $(toolset) = gcc && ! (  $(version) < 04.09  )  )
      {
        if <jln-reproducible-build-warnings>on in $(properties)
        {
          flags +=
            <cxxflags>-Wdate-time
          ;
        }
        else
        {
          flags +=
            <cxxflags>-Wno-date-time
          ;
        }
      }
    }
    if ! (  <jln-color>default in $(properties) )
    {
      if (  (  $(toolset) = gcc && ! (  $(version) < 04.09  )  ) || $(toolset) = clang  )
      {
        if <jln-color>auto in $(properties)
        {
          flags +=
            <cxxflags>-fdiagnostics-color=auto
          ;
        }
        else if <jln-color>never in $(properties)
        {
          flags +=
            <cxxflags>-fdiagnostics-color=never
          ;
        }
        else if <jln-color>always in $(properties)
        {
          flags +=
            <cxxflags>-fdiagnostics-color=always
          ;
        }
      }
    }
    if ! (  <jln-elide-type>default in $(properties) )
    {
      if (  (  $(toolset) = gcc && ! (  $(version) < 08.00  )  ) || (  $(toolset) = clang && ! (  $(version) < 03.04  )  )  )
      {
        if <jln-elide-type>on in $(properties)
        {
          flags +=
            <cxxflags>-felide-type
          ;
        }
        else
        {
          flags +=
            <cxxflags>-fno-elide-type
          ;
        }
      }
    }
    if ! (  <jln-exceptions>default in $(properties) )
    {
      if <jln-exceptions>on in $(properties)
      {
        flags +=
          <cxxflags>-fexceptions
        ;
      }
      else
      {
        flags +=
          <cxxflags>-fno-exceptions
        ;
      }
    }
    if ! (  <jln-rtti>default in $(properties) )
    {
      if <jln-rtti>on in $(properties)
      {
        flags +=
          <cxxflags>-frtti
        ;
      }
      else
      {
        flags +=
          <cxxflags>fno-rtti
        ;
      }
    }
    if ! (  <jln-diagnostics-show-template-tree>default in $(properties) )
    {
      if (  (  $(toolset) = gcc && ! (  $(version) < 08.00  )  ) || $(toolset) = clang  )
      {
        if <jln-diagnostics-show-template-tree>on in $(properties)
        {
          flags +=
            <cxxflags>-fdiagnostics-show-template-tree
          ;
        }
        else
        {
          flags +=
            <cxxflags>-fno-diagnostics-show-template-tree
          ;
        }
      }
    }
    if ! (  <jln-diagnostics-format>default in $(properties) )
    {
      if <jln-diagnostics-format>fixits in $(properties)
      {
        if (  (  $(toolset) = gcc && ! (  $(version) < 07.00  )  ) || (  $(toolset) = clang && ! (  $(version) < 05.00  )  )  )
        {
          flags +=
            <cxxflags>-fdiagnostics-parseable-fixits
          ;
        }
      }
      else if <jln-diagnostics-format>patch in $(properties)
      {
      }
      if (  $(toolset) = gcc && ! (  $(version) < 07.00  )  )
      {
        flags +=
          <cxxflags>-fdiagnostics-generate-patch
        ;
      }
    }
  }
  else if $(toolset) = msvc
  {
    if ! (  <jln-stl-fix>default in $(properties) )
    {
      if <jln-stl-fix>on in $(properties)
      {
        flags +=
          <cxxflags>/DNOMINMAX
        ;
      }
    }
    if ! (  <jln-debug>default in $(properties) )
    {
      if <jln-debug>off in $(properties)
      {
        flags +=
          <cxxflags>/DEBUG:NONE
        ;
      }
      else
      {
        flags +=
          <cxxflags>/Z7
        ;
        if <jln-debug>on in $(properties)
        {
          flags +=
            <cxxflags>/DEBUG
          ;
        }
        else if <jln-debug>line_tables_only in $(properties)
        {
          flags +=
            <cxxflags>/DEBUG:FASTLINK
          ;
        }
        if ! (  <jln-optimize>default in $(properties) )
        {
          if <jln-optimize>off in $(properties)
          {
            flags +=
              <cxxflags>/Od
            ;
          }
          else
          {
            flags +=
              <cxxflags>/Zi
            ;
          }
        }
      }
    }
    if ! (  <jln-exceptions>default in $(properties) )
    {
      if <jln-exceptions>on in $(properties)
      {
        flags +=
          <cxxflags>/EHc
        ;
      }
      else
      {
        flags +=
          <cxxflags>/EHc-
        ;
      }
    }
    if ! (  <jln-fast-math>default in $(properties) )
    {
      if <jln-fast-math>on in $(properties)
      {
        flags +=
          <cxxflags>/fp:fast
        ;
      }
      else
      {
        flags +=
          <cxxflags>/fp:fast-
        ;
      }
    }
    if ! (  <jln-optimize>default in $(properties) )
    {
      if <jln-optimize>off in $(properties)
      {
        flags +=
          <cxxflags>/Ob0 /Od /Oi- /Oy-
        ;
      }
      else if <jln-optimize>on in $(properties)
      {
        flags +=
          <cxxflags>/O2
        ;
      }
      else if <jln-optimize>size in $(properties)
      {
        flags +=
          <cxxflags>/O1
        ;
      }
      else if <jln-optimize>speed in $(properties)
      {
        flags +=
          <cxxflags>/O2
        ;
      }
      else if <jln-optimize>whole_program in $(properties)
      {
        flags +=
          <cxxflags>/O2
          <cxxflags>/GL
          <cxxflags>/Gw
        ;
      }
    }
    if ! (  <jln-pedantic>default in $(properties) )
    {
      if ! <jln-pedantic>off in $(properties)
      {
        flags +=
          <cxxflags>/permissive-
          <cxxflags>/Zc:__cplusplus
        ;
      }
    }
    if ! (  <jln-rtti>default in $(properties) )
    {
      if <jln-rtti>on in $(properties)
      {
        flags +=
          <cxxflags>/GR
        ;
      }
      else
      {
        flags +=
          <cxxflags>/GR-
        ;
      }
    }
    if ! (  <jln-stl-debug>default in $(properties) )
    {
      if <jln-stl-debug>off in $(properties)
      {
        flags +=
          <cxxflags>/D_HAS_ITERATOR_DEBUGGING=0
        ;
      }
      else
      {
        flags +=
          <cxxflags>/D_HAS_ITERATOR_DEBUGGING=1
        ;
      }
    }
    if ! (  <jln-sanitizers>default in $(properties) )
    {
      if <jln-sanitizers>on in $(properties)
      {
        flags +=
          <cxxflags>/guard:cf
          <cxxflags>/sdl
        ;
      }
      else
      {
          flags +=
          <cxxflags>/guard:cf-
          ;
        if ! (  <jln-stack-protector>default in $(properties) )
        {
          if ! <jln-stack-protector>off in $(properties)
          {
            flags +=
              <cxxflags>/sdl-
            ;
          }
        }
      }
    }
    if ! (  <jln-stack-protector>default in $(properties) )
    {
      if ! <jln-stack-protector>off in $(properties)
      {
        flags +=
          <cxxflags>/GS
          <cxxflags>/sdl
        ;
        if <jln-stack-protector>strong in $(properties)
        {
          flags +=
            <cxxflags>/RTC1
          ;
        }
        else if <jln-stack-protector>all in $(properties)
        {
          flags +=
            <cxxflags>/RTC1
            <cxxflags>/RTCc
          ;
        }
      }
    }
    if ! (  <jln-warnings>default in $(properties) )
    {
      if <jln-warnings>on in $(properties)
      {
        flags +=
          <cxxflags>/W4
        ;
      }
      else if <jln-warnings>strict in $(properties)
      {
        flags +=
          <cxxflags>/Wall
        ;
      }
      else if <jln-warnings>off in $(properties)
      {
        flags +=
          <cxxflags>/W0
        ;
      }
    }
  }
  return $(flags) ;
}
