# File generated with https://github.com/jonathanpoelen/cpp-compiler-options

from SCons.Environment import Environment
from SCons.Variables.EnumVariable import EnumVariable
import os
import re

_default_flags = {
  'color': 'default',
  'control_flow': 'default',
  'conversion_warnings': 'on',
  'coverage': 'default',
  'covered_switch_default_warnings': 'on',
  'cpu': 'default',
  'debug': 'default',
  'diagnostics_format': 'default',
  'diagnostics_show_template_tree': 'default',
  'elide_type': 'default',
  'exceptions': 'default',
  'fix_compiler_error': 'on',
  'float_sanitizers': 'default',
  'integer_sanitizers': 'default',
  'linker': 'default',
  'lto': 'default',
  'msvc_conformance': 'all',
  'msvc_crt_secure_no_warnings': 'on',
  'msvc_isystem': 'default',
  'msvc_isystem_with_template_from_non_external': 'default',
  'noexcept_warnings': 'default',
  'optimization': 'default',
  'other_sanitizers': 'default',
  'pedantic': 'on',
  'pie': 'default',
  'relro': 'default',
  'reproducible_build_warnings': 'default',
  'rtti': 'default',
  'sanitizers': 'default',
  'shadow_warnings': 'off',
  'stack_protector': 'default',
  'stl_debug': 'default',
  'stl_fix': 'on',
  'suggestions': 'default',
  'switch_warnings': 'on',
  'warnings': 'on',
  'warnings_as_error': 'default',
  'whole_program': 'default',
  'windows_abi_compatibility_warnings': 'off',
  'windows_bigobj': 'on',
}

_var2opts = {
  'jln_color': 'color',
  'jln_control_flow': 'control_flow',
  'jln_conversion_warnings': 'conversion_warnings',
  'jln_coverage': 'coverage',
  'jln_covered_switch_default_warnings': 'covered_switch_default_warnings',
  'jln_cpu': 'cpu',
  'jln_debug': 'debug',
  'jln_diagnostics_format': 'diagnostics_format',
  'jln_diagnostics_show_template_tree': 'diagnostics_show_template_tree',
  'jln_elide_type': 'elide_type',
  'jln_exceptions': 'exceptions',
  'jln_fix_compiler_error': 'fix_compiler_error',
  'jln_float_sanitizers': 'float_sanitizers',
  'jln_integer_sanitizers': 'integer_sanitizers',
  'jln_linker': 'linker',
  'jln_lto': 'lto',
  'jln_msvc_conformance': 'msvc_conformance',
  'jln_msvc_crt_secure_no_warnings': 'msvc_crt_secure_no_warnings',
  'jln_msvc_isystem': 'msvc_isystem',
  'jln_msvc_isystem_with_template_from_non_external': 'msvc_isystem_with_template_from_non_external',
  'jln_noexcept_warnings': 'noexcept_warnings',
  'jln_optimization': 'optimization',
  'jln_other_sanitizers': 'other_sanitizers',
  'jln_pedantic': 'pedantic',
  'jln_pie': 'pie',
  'jln_relro': 'relro',
  'jln_reproducible_build_warnings': 'reproducible_build_warnings',
  'jln_rtti': 'rtti',
  'jln_sanitizers': 'sanitizers',
  'jln_shadow_warnings': 'shadow_warnings',
  'jln_stack_protector': 'stack_protector',
  'jln_stl_debug': 'stl_debug',
  'jln_stl_fix': 'stl_fix',
  'jln_suggestions': 'suggestions',
  'jln_switch_warnings': 'switch_warnings',
  'jln_warnings': 'warnings',
  'jln_warnings_as_error': 'warnings_as_error',
  'jln_whole_program': 'whole_program',
  'jln_windows_abi_compatibility_warnings': 'windows_abi_compatibility_warnings',
  'jln_windows_bigobj': 'windows_bigobj',
}

_opt2vars = {
  'color': 'jln_color',
  'control_flow': 'jln_control_flow',
  'conversion_warnings': 'jln_conversion_warnings',
  'coverage': 'jln_coverage',
  'covered_switch_default_warnings': 'jln_covered_switch_default_warnings',
  'cpu': 'jln_cpu',
  'debug': 'jln_debug',
  'diagnostics_format': 'jln_diagnostics_format',
  'diagnostics_show_template_tree': 'jln_diagnostics_show_template_tree',
  'elide_type': 'jln_elide_type',
  'exceptions': 'jln_exceptions',
  'fix_compiler_error': 'jln_fix_compiler_error',
  'float_sanitizers': 'jln_float_sanitizers',
  'integer_sanitizers': 'jln_integer_sanitizers',
  'linker': 'jln_linker',
  'lto': 'jln_lto',
  'msvc_conformance': 'jln_msvc_conformance',
  'msvc_crt_secure_no_warnings': 'jln_msvc_crt_secure_no_warnings',
  'msvc_isystem': 'jln_msvc_isystem',
  'msvc_isystem_with_template_from_non_external': 'jln_msvc_isystem_with_template_from_non_external',
  'noexcept_warnings': 'jln_noexcept_warnings',
  'optimization': 'jln_optimization',
  'other_sanitizers': 'jln_other_sanitizers',
  'pedantic': 'jln_pedantic',
  'pie': 'jln_pie',
  'relro': 'jln_relro',
  'reproducible_build_warnings': 'jln_reproducible_build_warnings',
  'rtti': 'jln_rtti',
  'sanitizers': 'jln_sanitizers',
  'shadow_warnings': 'jln_shadow_warnings',
  'stack_protector': 'jln_stack_protector',
  'stl_debug': 'jln_stl_debug',
  'stl_fix': 'jln_stl_fix',
  'suggestions': 'jln_suggestions',
  'switch_warnings': 'jln_switch_warnings',
  'warnings': 'jln_warnings',
  'warnings_as_error': 'jln_warnings_as_error',
  'whole_program': 'jln_whole_program',
  'windows_abi_compatibility_warnings': 'jln_windows_abi_compatibility_warnings',
  'windows_bigobj': 'jln_windows_bigobj',
}

def set_global_flags(default_values):
  _default_flags.update(default_values)

def add_variables(vars, default_values={}):
  vars.AddVariables(
    EnumVariable('jln_color', '', default_values.get('color', _default_flags['color']),
                 allowed_values=('default', 'auto', 'never', 'always')),
    EnumVariable('jln_control_flow', 'insert extra runtime security checks to detect attempts to compromise your code', default_values.get('control_flow', _default_flags['control_flow']),
                 allowed_values=('default', 'off', 'on', 'branch', 'return', 'allow_bugs')),
    EnumVariable('jln_conversion_warnings', 'warn for implicit conversions that may alter a value', default_values.get('conversion_warnings', _default_flags['conversion_warnings']),
                 allowed_values=('default', 'off', 'on', 'sign', 'conversion')),
    EnumVariable('jln_coverage', '', default_values.get('coverage', _default_flags['coverage']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_covered_switch_default_warnings', 'warning for default label in switch which covers all enumeration values', default_values.get('covered_switch_default_warnings', _default_flags['covered_switch_default_warnings']),
                 allowed_values=('default', 'on', 'off')),
    EnumVariable('jln_cpu', '', default_values.get('cpu', _default_flags['cpu']),
                 allowed_values=('default', 'generic', 'native')),
    EnumVariable('jln_debug', 'produce debugging information in the operating system\'s', default_values.get('debug', _default_flags['debug']),
                 allowed_values=('default', 'off', 'on', 'line_tables_only', 'gdb', 'lldb', 'sce')),
    EnumVariable('jln_diagnostics_format', 'emit fix-it hints in a machine-parseable format', default_values.get('diagnostics_format', _default_flags['diagnostics_format']),
                 allowed_values=('default', 'fixits', 'patch', 'print_source_range_info')),
    EnumVariable('jln_diagnostics_show_template_tree', 'enables printing a tree-like structure showing the common and differing parts of the types', default_values.get('diagnostics_show_template_tree', _default_flags['diagnostics_show_template_tree']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_elide_type', 'prints diagnostics showing common parts of template types as \"[...]\"', default_values.get('elide_type', _default_flags['elide_type']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_exceptions', 'enable C++ exception', default_values.get('exceptions', _default_flags['exceptions']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_fix_compiler_error', 'transforms some warnings into errors to comply with the standard', default_values.get('fix_compiler_error', _default_flags['fix_compiler_error']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_float_sanitizers', '', default_values.get('float_sanitizers', _default_flags['float_sanitizers']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_integer_sanitizers', '', default_values.get('integer_sanitizers', _default_flags['integer_sanitizers']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_linker', 'configure linker', default_values.get('linker', _default_flags['linker']),
                 allowed_values=('default', 'bfd', 'gold', 'lld', 'native')),
    EnumVariable('jln_lto', 'enable Link Time Optimization', default_values.get('lto', _default_flags['lto']),
                 allowed_values=('default', 'off', 'on', 'fat', 'thin')),
    EnumVariable('jln_msvc_conformance', 'standard conformance options', default_values.get('msvc_conformance', _default_flags['msvc_conformance']),
                 allowed_values=('default', 'all', 'all_without_throwing_new')),
    EnumVariable('jln_msvc_crt_secure_no_warnings', 'disable CRT warnings', default_values.get('msvc_crt_secure_no_warnings', _default_flags['msvc_crt_secure_no_warnings']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_msvc_isystem', 'warnings concerning external header (https://devblogs.microsoft.com/cppblog/broken-warnings-theory)', default_values.get('msvc_isystem', _default_flags['msvc_isystem']),
                 allowed_values=('default', 'anglebrackets', 'include_and_caexcludepath')),
    EnumVariable('jln_msvc_isystem_with_template_from_non_external', 'warnings concerning template in an external header (requires msvc_isystem)', default_values.get('msvc_isystem_with_template_from_non_external', _default_flags['msvc_isystem_with_template_from_non_external']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_noexcept_warnings', 'Warn when a noexcept-expression evaluates to false because of a call to a function that does not have a non-throwing exception specification (i.e. \"throw()\" or \"noexcept\") but is known by the compiler to never throw an exception.', default_values.get('noexcept_warnings', _default_flags['noexcept_warnings']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_optimization', 'optimization level\\n - 0: not optimize\\n - g: enable debugging experience\\n - 1: optimize\\n - 2: optimize even more\\n - 3: optimize yet more\\n - fast: enables all optimization=3 and disregard strict standards compliance\\n - size: optimize for size\\n - z: optimize for size aggressively (/!\\ possible slow compilation)', default_values.get('optimization', _default_flags['optimization']),
                 allowed_values=('default', '0', 'g', '1', '2', '3', 'fast', 'size', 'z')),
    EnumVariable('jln_other_sanitizers', 'enable other sanitizers', default_values.get('other_sanitizers', _default_flags['other_sanitizers']),
                 allowed_values=('default', 'off', 'thread', 'pointer', 'memory')),
    EnumVariable('jln_pedantic', 'issue all the warnings demanded by strict ISO C and ISO C++', default_values.get('pedantic', _default_flags['pedantic']),
                 allowed_values=('default', 'off', 'on', 'as_error')),
    EnumVariable('jln_pie', 'controls position-independent code generation', default_values.get('pie', _default_flags['pie']),
                 allowed_values=('default', 'off', 'on', 'static', 'fpic', 'fPIC', 'fpie', 'fPIE')),
    EnumVariable('jln_relro', 'specifies a memory segment that should be made read-only after relocation, if supported.', default_values.get('relro', _default_flags['relro']),
                 allowed_values=('default', 'off', 'on', 'full')),
    EnumVariable('jln_reproducible_build_warnings', 'warn when macros \"__TIME__\", \"__DATE__\" or \"__TIMESTAMP__\" are encountered as they might prevent bit-wise-identical reproducible compilations', default_values.get('reproducible_build_warnings', _default_flags['reproducible_build_warnings']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_rtti', 'disable generation of information about every class with virtual functions for use by the C++ run-time type identification features (\"dynamic_cast\" and \"typeid\")', default_values.get('rtti', _default_flags['rtti']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_sanitizers', 'enable sanitizers (asan, ubsan, etc)', default_values.get('sanitizers', _default_flags['sanitizers']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_shadow_warnings', '', default_values.get('shadow_warnings', _default_flags['shadow_warnings']),
                 allowed_values=('default', 'off', 'on', 'local', 'compatible_local', 'all')),
    EnumVariable('jln_stack_protector', 'emit extra code to check for buffer overflows, such as stack smashing attacks', default_values.get('stack_protector', _default_flags['stack_protector']),
                 allowed_values=('default', 'off', 'on', 'strong', 'all')),
    EnumVariable('jln_stl_debug', 'controls the debug level of the STL', default_values.get('stl_debug', _default_flags['stl_debug']),
                 allowed_values=('default', 'off', 'on', 'allow_broken_abi', 'allow_broken_abi_and_bugs', 'assert_as_exception')),
    EnumVariable('jln_stl_fix', 'enable /DNOMINMAX with msvc', default_values.get('stl_fix', _default_flags['stl_fix']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_suggestions', 'warn for cases where adding an attribute may be beneficial', default_values.get('suggestions', _default_flags['suggestions']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_switch_warnings', 'warnings concerning the switch keyword', default_values.get('switch_warnings', _default_flags['switch_warnings']),
                 allowed_values=('default', 'on', 'off', 'exhaustive_enum', 'mandatory_default', 'exhaustive_enum_and_mandatory_default')),
    EnumVariable('jln_warnings', 'warning level', default_values.get('warnings', _default_flags['warnings']),
                 allowed_values=('default', 'off', 'on', 'strict', 'very_strict')),
    EnumVariable('jln_warnings_as_error', 'make all or some warnings into errors', default_values.get('warnings_as_error', _default_flags['warnings_as_error']),
                 allowed_values=('default', 'off', 'on', 'basic')),
    EnumVariable('jln_whole_program', 'Assume that the current compilation unit represents the whole program being compiled. This option should not be used in combination with lto.', default_values.get('whole_program', _default_flags['whole_program']),
                 allowed_values=('default', 'off', 'on', 'strip_all')),
    EnumVariable('jln_windows_abi_compatibility_warnings', 'In code that is intended to be portable to Windows-based compilers the warning helps prevent unresolved references due to the difference in the mangling of symbols declared with different class-keys', default_values.get('windows_abi_compatibility_warnings', _default_flags['windows_abi_compatibility_warnings']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_windows_bigobj', 'increases that addressable sections capacity', default_values.get('windows_bigobj', _default_flags['windows_bigobj']),
                 allowed_values=('default', 'on'))  )

def varname_to_optname(options):
  return {_var2opts.get(k, k):v for k,v in options.items()}
def optname_to_varname(options):
  return {_opt2vars.get(k, k):v for k,v in options.items()}
def variables_to_options(vars):
  args = vars.args
  return {_var2opts[v.key]:args.get(v.key, v.default) for v in vars.options}

_default_env = Environment()
_map_compiler = {
  "g++": "gcc",
  "clang++": "clang",
  "icpc": "icc",
}
_compiler_name_extractor = re.compile('([\w+]+(?:-[\w+]+)*)')
_compiler_version_cache = {}

def get_flags(options, env=None):
  env = env or _default_env
  compiler = env['CXX']
  version = env.get('CXXVERSION')
  linker = env.get('LD')

  _compiler = os.path.basename(compiler)
  _compiler = _compiler_name_extractor.match(_compiler).group(1)
  _compiler = _map_compiler.get(_compiler, _compiler)
  platform = None

  if version:
    version = version.split(".")
    version[0] = int(version[0])
    version[1] = int(version[1]) if len(version) == 1 else 0

  if _compiler == 'mingw':
    compiler = 'gcc'
    platform = 'mingw'
  elif _compiler in ('icx', 'icpx', 'dpcpp'):
    # is icx version, replace with clang version
    if not version or version[0] > 2000:
      version = _compiler_version_cache.get(compiler)
      if not version:
        from subprocess import check_output
        out = check_output([compiler, '-x', 'c', '-', '-dM', '-E'], input=b'').decode()
        m = re.search(
            '__clang_major__ (\d+)\n'
            '#define __clang_minor__ (\d+)\n'
            '#define __clang_patchlevel__ (\d+)',
            out
        )
        version = (int(m.group(1)), int(m.group(2)))
        _compiler_version_cache[compiler] = version
    compiler = 'clang'
  else:
    compiler = _compiler

  version = version or (0,0)

  options = options if type(options) == dict else variables_to_options(options)

  def verless(major, minor):
    return version[0] < major or (version[0] == major and version[1] < minor)

  flags=[]
  linkflags=[]
  x_color = options.get('color', _default_flags['color'])
  x_control_flow = options.get('control_flow', _default_flags['control_flow'])
  x_conversion_warnings = options.get('conversion_warnings', _default_flags['conversion_warnings'])
  x_coverage = options.get('coverage', _default_flags['coverage'])
  x_covered_switch_default_warnings = options.get('covered_switch_default_warnings', _default_flags['covered_switch_default_warnings'])
  x_cpu = options.get('cpu', _default_flags['cpu'])
  x_debug = options.get('debug', _default_flags['debug'])
  x_diagnostics_format = options.get('diagnostics_format', _default_flags['diagnostics_format'])
  x_diagnostics_show_template_tree = options.get('diagnostics_show_template_tree', _default_flags['diagnostics_show_template_tree'])
  x_elide_type = options.get('elide_type', _default_flags['elide_type'])
  x_exceptions = options.get('exceptions', _default_flags['exceptions'])
  x_fix_compiler_error = options.get('fix_compiler_error', _default_flags['fix_compiler_error'])
  x_float_sanitizers = options.get('float_sanitizers', _default_flags['float_sanitizers'])
  x_integer_sanitizers = options.get('integer_sanitizers', _default_flags['integer_sanitizers'])
  x_linker = options.get('linker', _default_flags['linker'])
  x_lto = options.get('lto', _default_flags['lto'])
  x_msvc_conformance = options.get('msvc_conformance', _default_flags['msvc_conformance'])
  x_msvc_crt_secure_no_warnings = options.get('msvc_crt_secure_no_warnings', _default_flags['msvc_crt_secure_no_warnings'])
  x_msvc_isystem = options.get('msvc_isystem', _default_flags['msvc_isystem'])
  x_msvc_isystem_with_template_from_non_external = options.get('msvc_isystem_with_template_from_non_external', _default_flags['msvc_isystem_with_template_from_non_external'])
  x_noexcept_warnings = options.get('noexcept_warnings', _default_flags['noexcept_warnings'])
  x_optimization = options.get('optimization', _default_flags['optimization'])
  x_other_sanitizers = options.get('other_sanitizers', _default_flags['other_sanitizers'])
  x_pedantic = options.get('pedantic', _default_flags['pedantic'])
  x_pie = options.get('pie', _default_flags['pie'])
  x_relro = options.get('relro', _default_flags['relro'])
  x_reproducible_build_warnings = options.get('reproducible_build_warnings', _default_flags['reproducible_build_warnings'])
  x_rtti = options.get('rtti', _default_flags['rtti'])
  x_sanitizers = options.get('sanitizers', _default_flags['sanitizers'])
  x_shadow_warnings = options.get('shadow_warnings', _default_flags['shadow_warnings'])
  x_stack_protector = options.get('stack_protector', _default_flags['stack_protector'])
  x_stl_debug = options.get('stl_debug', _default_flags['stl_debug'])
  x_stl_fix = options.get('stl_fix', _default_flags['stl_fix'])
  x_suggestions = options.get('suggestions', _default_flags['suggestions'])
  x_switch_warnings = options.get('switch_warnings', _default_flags['switch_warnings'])
  x_warnings = options.get('warnings', _default_flags['warnings'])
  x_warnings_as_error = options.get('warnings_as_error', _default_flags['warnings_as_error'])
  x_whole_program = options.get('whole_program', _default_flags['whole_program'])
  x_windows_abi_compatibility_warnings = options.get('windows_abi_compatibility_warnings', _default_flags['windows_abi_compatibility_warnings'])
  x_windows_bigobj = options.get('windows_bigobj', _default_flags['windows_bigobj'])

  if ( compiler == 'gcc' or compiler == 'clang' or compiler == 'clang-cl' ) :
    if not ( x_warnings == 'default') :
      if x_warnings == 'off' :
        flags += ('-w', )
      else:
        if compiler == 'gcc' :
          flags += ('-Wall', '-Wextra', '-Wcast-align', '-Wcast-qual', '-Wdisabled-optimization', '-Wfloat-equal', '-Wformat-security', '-Wformat=2', '-Winvalid-pch', '-Wmissing-include-dirs', '-Wpacked', '-Wredundant-decls', '-Wundef', '-Wunused-macros', '-Wpointer-arith', '-Wmissing-declarations', '-Wnon-virtual-dtor', '-Wold-style-cast', '-Woverloaded-virtual', )
          if not ( x_switch_warnings == 'default') :
            if x_switch_warnings == 'on' :
              flags += ('-Wswitch', )
            else:
              if x_switch_warnings == 'exhaustive_enum' :
                flags += ('-Wswitch-enum', )
              else:
                if x_switch_warnings == 'mandatory_default' :
                  flags += ('-Wswitch-default', )
                else:
                  if x_switch_warnings == 'exhaustive_enum_and_mandatory_default' :
                    flags += ('-Wswitch-default', '-Wswitch-enum', )
                  else:
                    flags += ('-Wno-switch', )
          if not ( verless(4, 7) ) :
            flags += ('-Wsuggest-attribute=noreturn', '-Wzero-as-null-pointer-constant', '-Wlogical-op', '-Wvector-operation-performance', '-Wdouble-promotion', '-Wtrampolines', )
            if not ( verless(4, 8) ) :
              flags += ('-Wuseless-cast', )
              if not ( verless(4, 9) ) :
                flags += ('-Wconditionally-supported', '-Wfloat-conversion', )
                if not ( verless(5, 1) ) :
                  flags += ('-Wformat-signedness', '-Warray-bounds=2', '-Wstrict-null-sentinel', '-Wsuggest-override', )
                  if not ( verless(6, 1) ) :
                    flags += ('-Wduplicated-cond', '-Wnull-dereference', )
                    if not ( verless(7, 0) ) :
                      flags += ('-Waligned-new', )
                      if not ( verless(7, 1) ) :
                        flags += ('-Walloc-zero', '-Walloca', '-Wformat-overflow=2', '-Wduplicated-branches', )
                        if not ( verless(8, 0) ) :
                          flags += ('-Wclass-memaccess', )
        else:
          flags += ('-Weverything', '-Wno-documentation', '-Wno-documentation-unknown-command', '-Wno-newline-eof', '-Wno-c++98-compat', '-Wno-c++98-compat-pedantic', '-Wno-padded', '-Wno-global-constructors', '-Wno-weak-vtables', '-Wno-exit-time-destructors', )
          if not ( x_switch_warnings == 'default') :
            if ( x_switch_warnings == 'on' or x_switch_warnings == 'mandatory_default' ) :
              flags += ('-Wno-switch-enum', )
            else:
              if ( x_switch_warnings == 'exhaustive_enum' or x_switch_warnings == 'exhaustive_enum_and_mandatory_default' ) :
                flags += ('-Wswitch-enum', )
              else:
                if x_switch_warnings == 'off' :
                  flags += ('-Wno-switch', '-Wno-switch-enum', )
          else:
            flags += ('-Wno-switch', '-Wno-switch-enum', )
          if not ( x_covered_switch_default_warnings == 'default') :
            if x_covered_switch_default_warnings == 'off' :
              flags += ('-Wno-covered-switch-default', )
            else:
              flags += ('-Wcovered-switch-default', )
          if not ( verless(3, 9) ) :
            flags += ('-Wno-undefined-var-template', )
            if not ( verless(5, 0) ) :
              flags += ('-Wno-inconsistent-missing-destructor-override', )
              if not ( verless(9, 0) ) :
                flags += ('-Wno-ctad-maybe-unsupported', )
                if not ( verless(10, 0) ) :
                  flags += ('-Wno-c++20-compat', )
                  if not ( verless(11, 0) ) :
                    flags += ('-Wno-suggest-destructor-override', )
        if ( x_warnings == 'strict' or x_warnings == 'very_strict' ) :
          if ( compiler == 'gcc' and not ( verless(8, 0) ) ) :
            flags += ('-Wcast-align=strict', )
    if not ( x_windows_abi_compatibility_warnings == 'default') :
      if ( ( compiler == 'gcc' and not ( verless(10, 0) ) ) or compiler == 'clang' or compiler == 'clang-cl' ) :
        if x_windows_abi_compatibility_warnings == 'on' :
          flags += ('-Wmismatched-tags', )
        else:
          flags += ('-Wno-mismatched-tags', )
    if not ( x_warnings_as_error == 'default') :
      if x_warnings_as_error == 'on' :
        flags += ('-Werror', )
      else:
        if x_warnings_as_error == 'basic' :
          flags += ('-Werror=return-type', '-Werror=init-self', )
          if compiler == 'gcc' :
            flags += ('-Werror=div-by-zero', )
            if not ( verless(5, 1) ) :
              flags += ('-Werror=array-bounds', '-Werror=logical-op', '-Werror=logical-not-parentheses', )
              if not ( verless(7, 0) ) :
                flags += ('-Werror=literal-suffix', )
          else:
            if ( compiler == 'clang' or compiler == 'clang-cl' ) :
              flags += ('-Werror=array-bounds', '-Werror=division-by-zero', )
              if not ( verless(3, 4) ) :
                flags += ('-Werror=logical-not-parentheses', )
                if not ( verless(3, 6) ) :
                  flags += ('-Werror=delete-incomplete', )
                  if not ( verless(6, 0) ) :
                    flags += ('-Werror=user-defined-literals', )
                    if not ( verless(7, 0) ) :
                      flags += ('-Werror=dynamic-class-memaccess', )
        else:
          flags += ('-Wno-error', )
    if not ( x_suggestions == 'default') :
      if not ( x_suggestions == 'off' ) :
        if compiler == 'gcc' :
          flags += ('-Wsuggest-attribute=pure', '-Wsuggest-attribute=const', )
          if not ( verless(5, 0) ) :
            flags += ('-Wsuggest-final-types', '-Wsuggest-final-methods', )
            if not ( verless(5, 1) ) :
              flags += ('-Wnoexcept', )
    if not ( x_sanitizers == 'default') :
      if x_sanitizers == 'off' :
        flags += ('-fno-sanitize=all', )
        linkflags += ('-fno-sanitize=all', )
      else:
        if compiler == 'clang-cl' :
          flags += ('-fsanitize=undefined', '-fsanitize=address', '-fsanitize-address-use-after-scope', )
        else:
          if compiler == 'clang' :
            if not ( verless(3, 1) ) :
              flags += ('-fsanitize=undefined', '-fsanitize=address', '-fsanitize-address-use-after-scope', '-fno-omit-frame-pointer', '-fno-optimize-sibling-calls', )
              linkflags += ('-fsanitize=undefined', '-fsanitize=address', )
              if not ( verless(3, 4) ) :
                flags += ('-fsanitize=leak', )
                linkflags += ('-fsanitize=leak', )
              if not ( verless(6, 0) ) :
                if not ( x_stack_protector == 'default') :
                  if not ( x_stack_protector == 'off' ) :
                    flags += ('-fsanitize-minimal-runtime', )
          else:
            if not ( verless(4, 8) ) :
              flags += ('-fsanitize=address', '-fno-omit-frame-pointer', '-fno-optimize-sibling-calls', )
              linkflags += ('-fsanitize=address', )
              if not ( verless(4, 9) ) :
                flags += ('-fsanitize=undefined', '-fsanitize=leak', )
                linkflags += ('-fsanitize=undefined', '-fsanitize=leak', )
    if not ( x_control_flow == 'default') :
      if x_control_flow == 'off' :
        if ( compiler == 'gcc' and not ( verless(8, 0) ) ) :
          flags += ('-fcf-protection=none', )
        else:
          flags += ('-fno-sanitize=cfi', '-fcf-protection=none', '-fno-sanitize-cfi-cross-dso', )
          linkflags += ('-fno-sanitize=cfi', )
      else:
        if ( ( compiler == 'gcc' and not ( verless(8, 0) ) ) or not ( compiler == 'gcc' ) ) :
          if x_control_flow == 'branch' :
            flags += ('-fcf-protection=branch', )
          else:
            if x_control_flow == 'return' :
              flags += ('-fcf-protection=return', )
            else:
              flags += ('-fcf-protection=full', )
          if ( x_control_flow == 'allow_bugs' and compiler == 'clang' ) :
            flags += ('-fsanitize=cfi', '-fvisibility=hidden', '-flto', )
            linkflags += ('-fsanitize=cfi', '-flto', )
    if not ( x_color == 'default') :
      if ( ( compiler == 'gcc' and not ( verless(4, 9) ) ) or compiler == 'clang' or compiler == 'clang-cl' ) :
        if x_color == 'auto' :
          flags += ('-fdiagnostics-color=auto', )
        else:
          if x_color == 'never' :
            flags += ('-fdiagnostics-color=never', )
          else:
            if x_color == 'always' :
              flags += ('-fdiagnostics-color=always', )
    if not ( x_reproducible_build_warnings == 'default') :
      if ( compiler == 'gcc' and not ( verless(4, 9) ) ) :
        if x_reproducible_build_warnings == 'on' :
          flags += ('-Wdate-time', )
        else:
          flags += ('-Wno-date-time', )
    if not ( x_diagnostics_format == 'default') :
      if x_diagnostics_format == 'fixits' :
        if ( ( compiler == 'gcc' and not ( verless(7, 0) ) ) or ( compiler == 'clang' and not ( verless(5, 0) ) ) or ( compiler == 'clang-cl' and not ( verless(5, 0) ) ) ) :
          flags += ('-fdiagnostics-parseable-fixits', )
      else:
        if x_diagnostics_format == 'patch' :
          if ( compiler == 'gcc' and not ( verless(7, 0) ) ) :
            flags += ('-fdiagnostics-generate-patch', )
        else:
          if x_diagnostics_format == 'print_source_range_info' :
            if compiler == 'clang' :
              flags += ('-fdiagnostics-print-source-range-info', )
    if not ( x_fix_compiler_error == 'default') :
      if x_fix_compiler_error == 'on' :
        if compiler == 'gcc' :
          if not ( verless(4, 7) ) :
            flags += ('-Werror=narrowing', )
            if not ( verless(7, 1) ) :
              flags += ('-Werror=literal-suffix', )
        flags += ('-Werror=write-strings', )
      else:
        if ( compiler == 'clang' or compiler == 'clang-cl' ) :
          flags += ('-Wno-error=c++11-narrowing', '-Wno-reserved-user-defined-literal', )
    if not ( x_linker == 'default') :
      if x_linker == 'native' :
        if compiler == 'gcc' :
          linkflags += ('-fuse-ld=gold', )
        else:
          linkflags += ('-fuse-ld=lld', )
      else:
        if x_linker == 'bfd' :
          linkflags += ('-fuse-ld=bfd', )
        else:
          if ( x_linker == 'gold' or ( compiler == 'gcc' and not ( not ( verless(9, 0) ) ) ) ) :
            linkflags += ('-fuse-ld=gold', )
          else:
            if not ( x_lto == 'default') :
              if ( not ( x_lto == 'off' ) and compiler == 'gcc' ) :
                linkflags += ('-fuse-ld=gold', )
              else:
                linkflags += ('-fuse-ld=lld', )
            else:
              linkflags += ('-fuse-ld=lld', )
    if not ( x_lto == 'default') :
      if x_lto == 'off' :
        flags += ('-fno-lto', )
        linkflags += ('-fno-lto', )
      else:
        if compiler == 'gcc' :
          flags += ('-flto', )
          linkflags += ('-flto', )
          if not ( verless(5, 0) ) :
            if not ( x_warnings == 'default') :
              if not ( x_warnings == 'off' ) :
                flags += ('-flto-odr-type-merging', )
                linkflags += ('-flto-odr-type-merging', )
            if x_lto == 'fat' :
              flags += ('-ffat-lto-objects', )
            else:
              if x_lto == 'thin' :
                linkflags += ('-fuse-linker-plugin', )
        else:
          if compiler == 'clang-cl' :
            linkflags += ('-fuse-ld=lld', )
          if ( x_lto == 'thin' and not ( verless(6, 0) ) ) :
            flags += ('-flto=thin', )
            linkflags += ('-flto=thin', )
          else:
            flags += ('-flto', )
            linkflags += ('-flto', )
    if not ( x_shadow_warnings == 'default') :
      if x_shadow_warnings == 'off' :
        flags += ('-Wno-shadow', )
        if ( compiler == 'clang-cl' or ( compiler == 'clang' and not ( verless(8, 0) ) ) ) :
          flags += ('-Wno-shadow-field', )
      else:
        if x_shadow_warnings == 'on' :
          flags += ('-Wshadow', )
        else:
          if x_shadow_warnings == 'all' :
            if compiler == 'gcc' :
              flags += ('-Wshadow', )
            else:
              flags += ('-Wshadow-all', )
          else:
            if ( compiler == 'gcc' and not ( verless(7, 1) ) ) :
              if x_shadow_warnings == 'local' :
                flags += ('-Wshadow=local', )
              else:
                if x_shadow_warnings == 'compatible_local' :
                  flags += ('-Wshadow=compatible-local', )
    if not ( x_float_sanitizers == 'default') :
      if ( ( compiler == 'gcc' and not ( verless(5, 0) ) ) or ( compiler == 'clang' and not ( verless(5, 0) ) ) or compiler == 'clang-cl' ) :
        if x_float_sanitizers == 'on' :
          flags += ('-fsanitize=float-divide-by-zero', '-fsanitize=float-cast-overflow', )
        else:
          flags += ('-fno-sanitize=float-divide-by-zero', '-fno-sanitize=float-cast-overflow', )
    if not ( x_integer_sanitizers == 'default') :
      if ( ( compiler == 'clang' and not ( verless(5, 0) ) ) or compiler == 'clang-cl' ) :
        if x_integer_sanitizers == 'on' :
          flags += ('-fsanitize=integer', )
        else:
          flags += ('-fno-sanitize=integer', )
      else:
        if ( compiler == 'gcc' and not ( verless(4, 9) ) ) :
          if x_integer_sanitizers == 'on' :
            flags += ('-ftrapv', '-fsanitize=undefined', )
  if ( compiler == 'gcc' or compiler == 'clang' or compiler == 'clang-cl' or compiler == 'icc' ) :
    if not ( x_conversion_warnings == 'default') :
      if x_conversion_warnings == 'on' :
        flags += ('-Wconversion', '-Wsign-compare', '-Wsign-conversion', )
      else:
        if x_conversion_warnings == 'conversion' :
          flags += ('-Wconversion', )
        else:
          if x_conversion_warnings == 'sign' :
            flags += ('-Wsign-compare', '-Wsign-conversion', )
          else:
            flags += ('-Wno-conversion', '-Wno-sign-compare', '-Wno-sign-conversion', )
  if ( compiler == 'gcc' or compiler == 'clang' ) :
    if not ( x_coverage == 'default') :
      if x_coverage == 'on' :
        flags += ('--coverage', )
        linkflags += ('--coverage', )
        if compiler == 'clang' :
          linkflags += ('-lprofile_rt', )
    if not ( x_debug == 'default') :
      if x_debug == 'off' :
        flags += ('-g0', )
      else:
        if x_debug == 'gdb' :
          flags += ('-ggdb', )
        else:
          if compiler == 'clang' :
            if x_debug == 'line_tables_only' :
              flags += ('-gline-tables-only', )
            else:
              if x_debug == 'lldb' :
                flags += ('-glldb', )
              else:
                if x_debug == 'sce' :
                  flags += ('-gsce', )
                else:
                  flags += ('-g', )
          else:
            flags += ('-g', )
    if not ( x_optimization == 'default') :
      if x_optimization == '0' :
        flags += ('-O0', )
        linkflags += ('-O0', )
      else:
        if x_optimization == 'g' :
          flags += ('-Og', )
          linkflags += ('-Og', )
        else:
          flags += ('-DNDEBUG', )
          linkflags += ('-Wl,-O1', )
          if x_optimization == 'size' :
            flags += ('-Os', )
            linkflags += ('-Os', )
          else:
            if x_optimization == 'z' :
              if ( compiler == 'clang' or compiler == 'clang-cl' ) :
                flags += ('-Oz', )
                linkflags += ('-Oz', )
              else:
                flags += ('-Os', )
                linkflags += ('-Os', )
            else:
              if x_optimization == 'fast' :
                flags += ('-Ofast', )
                linkflags += ('-Ofast', )
              else:
                if x_optimization == '1' :
                  flags += ('-O1', )
                  linkflags += ('-O1', )
                else:
                  if x_optimization == '2' :
                    flags += ('-O2', )
                    linkflags += ('-O2', )
                  else:
                    if x_optimization == '3' :
                      flags += ('-O3', )
                      linkflags += ('-O3', )
    if not ( x_cpu == 'default') :
      if x_cpu == 'generic' :
        flags += ('-mtune=generic', )
        linkflags += ('-mtune=generic', )
      else:
        flags += ('-march=native', '-mtune=native', )
        linkflags += ('-march=native', '-mtune=native', )
    if not ( x_whole_program == 'default') :
      if x_whole_program == 'off' :
        flags += ('-fno-whole-program', )
        if ( compiler == 'clang' and not ( verless(3, 9) ) ) :
          flags += ('-fno-whole-program-vtables', )
          linkflags += ('-fno-whole-program-vtables', )
      else:
        if linker == 'ld64' :
          linkflags += ('-Wl,-dead_strip', '-Wl,-S', )
        else:
          linkflags += ('-s', )
          if x_whole_program == 'strip_all' :
            linkflags += ('-Wl,--gc-sections', '-Wl,--strip-all', )
        if compiler == 'gcc' :
          flags += ('-fwhole-program', )
          linkflags += ('-fwhole-program', )
        else:
          if compiler == 'clang' :
            if not ( verless(3, 9) ) :
              if not ( x_lto == 'default') :
                if not ( x_lto == 'off' ) :
                  flags += ('-fwhole-program-vtables', )
                  linkflags += ('-fwhole-program-vtables', )
              if not ( verless(7, 0) ) :
                flags += ('-fforce-emit-vtables', )
                linkflags += ('-fforce-emit-vtables', )
    if not ( x_pedantic == 'default') :
      if not ( x_pedantic == 'off' ) :
        flags += ('-pedantic', )
        if x_pedantic == 'as_error' :
          flags += ('-pedantic-errors', )
    if not ( x_stack_protector == 'default') :
      if x_stack_protector == 'off' :
        flags += ('-Wno-stack-protector', '-U_FORTIFY_SOURCE', )
        linkflags += ('-Wno-stack-protector', )
      else:
        flags += ('-D_FORTIFY_SOURCE=2', '-Wstack-protector', )
        if x_stack_protector == 'strong' :
          if compiler == 'gcc' :
            if not ( verless(4, 9) ) :
              flags += ('-fstack-protector-strong', )
              linkflags += ('-fstack-protector-strong', )
              if not ( verless(8, 0) ) :
                flags += ('-fstack-clash-protection', )
                linkflags += ('-fstack-clash-protection', )
          else:
            if compiler == 'clang' :
              flags += ('-fstack-protector-strong', '-fsanitize=safe-stack', )
              linkflags += ('-fstack-protector-strong', '-fsanitize=safe-stack', )
              if not ( verless(11, 0) ) :
                flags += ('-fstack-clash-protection', )
                linkflags += ('-fstack-clash-protection', )
        else:
          if x_stack_protector == 'all' :
            flags += ('-fstack-protector-all', )
            linkflags += ('-fstack-protector-all', )
            if ( compiler == 'gcc' and not ( verless(8, 0) ) ) :
              flags += ('-fstack-clash-protection', )
              linkflags += ('-fstack-clash-protection', )
            else:
              if compiler == 'clang' :
                flags += ('-fsanitize=safe-stack', )
                linkflags += ('-fsanitize=safe-stack', )
                if not ( verless(11, 0) ) :
                  flags += ('-fstack-clash-protection', )
                  linkflags += ('-fstack-clash-protection', )
          else:
            flags += ('-fstack-protector', )
            linkflags += ('-fstack-protector', )
        if compiler == 'clang' :
          flags += ('-fsanitize=shadow-call-stack', )
          linkflags += ('-fsanitize=shadow-call-stack', )
    if not ( x_relro == 'default') :
      if x_relro == 'off' :
        linkflags += ('-Wl,-z,norelro', )
      else:
        if x_relro == 'on' :
          linkflags += ('-Wl,-z,relro', )
        else:
          if x_relro == 'full' :
            linkflags += ('-Wl,-z,relro,-z,now,-z,noexecstack', )
            if not ( x_linker == 'default') :
              if not ( ( x_linker == 'gold' or ( compiler == 'gcc' and not ( not ( verless(9, 0) ) ) ) or ( x_linker == 'native' and compiler == 'gcc' ) ) ) :
                linkflags += ('-Wl,-z,separate-code', )
    if not ( x_pie == 'default') :
      if x_pie == 'off' :
        linkflags += ('-no-pic', )
      else:
        if x_pie == 'on' :
          linkflags += ('-pie', )
        else:
          if x_pie == 'static' :
            linkflags += ('-static-pie', )
          else:
            if x_pie == 'fpie' :
              flags += ('-fpie', )
            else:
              if x_pie == 'fpic' :
                flags += ('-fpic', )
              else:
                if x_pie == 'fPIE' :
                  flags += ('-fPIE', )
                else:
                  if x_pie == 'fPIC' :
                    flags += ('-fPIC', )
    if not ( x_stl_debug == 'default') :
      if not ( x_stl_debug == 'off' ) :
        if x_stl_debug == 'assert_as_exception' :
          flags += ('-D_LIBCPP_DEBUG_USE_EXCEPTIONS', )
        if ( x_stl_debug == 'allow_broken_abi' or x_stl_debug == 'allow_broken_abi_and_bugs' ) :
          if compiler == 'clang' :
            if ( not ( verless(8, 0) ) or x_stl_debug == 'allow_broken_abi_and_bugs' ) :
              flags += ('-D_LIBCPP_DEBUG=1', )
          flags += ('-D_GLIBCXX_DEBUG', )
        else:
          flags += ('-D_GLIBCXX_ASSERTIONS', )
        if not ( x_pedantic == 'default') :
          if not ( x_pedantic == 'off' ) :
            flags += ('-D_GLIBCXX_DEBUG_PEDANTIC', )
    if not ( x_elide_type == 'default') :
      if x_elide_type == 'on' :
        if ( compiler == 'gcc' and not ( verless(8, 0) ) ) :
          flags += ('-felide-type', )
      else:
        if ( ( compiler == 'gcc' and not ( verless(8, 0) ) ) or ( compiler == 'clang' and not ( verless(3, 4) ) ) ) :
          flags += ('-fno-elide-type', )
    if not ( x_exceptions == 'default') :
      if x_exceptions == 'on' :
        flags += ('-fexceptions', )
      else:
        flags += ('-fno-exceptions', )
    if not ( x_rtti == 'default') :
      if x_rtti == 'on' :
        flags += ('-frtti', )
      else:
        flags += ('-fno-rtti', )
    if not ( x_diagnostics_show_template_tree == 'default') :
      if ( ( compiler == 'gcc' and not ( verless(8, 0) ) ) or compiler == 'clang' ) :
        if x_diagnostics_show_template_tree == 'on' :
          flags += ('-fdiagnostics-show-template-tree', )
        else:
          flags += ('-fno-diagnostics-show-template-tree', )
    if not ( x_other_sanitizers == 'default') :
      if x_other_sanitizers == 'thread' :
        flags += ('-fsanitize=thread', )
      else:
        if x_other_sanitizers == 'memory' :
          if ( compiler == 'clang' and not ( verless(5, 0) ) ) :
            flags += ('-fsanitize=memory', )
        else:
          if x_other_sanitizers == 'pointer' :
            if ( compiler == 'gcc' and not ( verless(8, 0) ) ) :
              flags += ('-fsanitize=pointer-compare', '-fsanitize=pointer-subtract', )
    if not ( x_noexcept_warnings == 'default') :
      if ( compiler == 'gcc' and not ( verless(4, 9) ) ) :
        if x_noexcept_warnings == 'on' :
          flags += ('-Wnoexcept', )
        else:
          flags += ('-Wno-noexcept', )
  if linker == 'lld-link' :
    if not ( x_lto == 'default') :
      if x_lto == 'off' :
        flags += ('-fno-lto', )
      else:
        if x_lto == 'thin' :
          flags += ('-flto=thin', )
        else:
          flags += ('-flto', )
          linkflags += ('-flto', )
    if not ( x_whole_program == 'default') :
      if x_whole_program == 'off' :
        flags += ('-fno-whole-program', )
      else:
        if not ( x_lto == 'default') :
          if not ( x_lto == 'off' ) :
            flags += ('-fwhole-program-vtables', )
            linkflags += ('-fwhole-program-vtables', )
  if ( compiler == 'msvc' or compiler == 'clang-cl' or compiler == 'icl' ) :
    if not ( x_exceptions == 'default') :
      if x_exceptions == 'on' :
        flags += ('/EHsc', '/D_HAS_EXCEPTIONS=1', )
      else:
        flags += ('/EHs-', '/D_HAS_EXCEPTIONS=0', )
    if not ( x_rtti == 'default') :
      if x_rtti == 'on' :
        flags += ('/GR', )
      else:
        flags += ('/GR-', )
    if not ( x_stl_debug == 'default') :
      if x_stl_debug == 'off' :
        flags += ('/D_HAS_ITERATOR_DEBUGGING=0', )
      else:
        flags += ('/D_DEBUG', '/D_HAS_ITERATOR_DEBUGGING=1', )
    if not ( compiler == 'icl' ) :
      if not ( x_stl_fix == 'default') :
        if x_stl_fix == 'on' :
          flags += ('/DNOMINMAX', )
      if not ( x_debug == 'default') :
        if x_debug == 'off' :
          flags += ('/DEBUG:NONE', )
        else:
          flags += ('/RTC1', '/Od', )
          if x_debug == 'on' :
            flags += ('/DEBUG', )
          else:
            if x_debug == 'line_tables_only' :
              if compiler == 'clang-cl' :
                flags += ('-gline-tables-only', )
              flags += ('/DEBUG:FASTLINK', )
          if not ( x_optimization == 'default') :
            if x_optimization == 'g' :
              flags += ('/Zi', )
            else:
              if not ( x_whole_program == 'default') :
                if x_whole_program == 'off' :
                  flags += ('/ZI', )
                else:
                  flags += ('/Zi', )
              else:
                flags += ('/ZI', )
          else:
            if not ( x_whole_program == 'default') :
              if x_whole_program == 'off' :
                flags += ('/ZI', )
              else:
                flags += ('/Zi', )
            else:
              flags += ('/ZI', )
      if not ( x_optimization == 'default') :
        if x_optimization == '0' :
          flags += ('/Ob0', '/Od', '/Oi-', '/Oy-', )
        else:
          if x_optimization == 'g' :
            flags += ('/Ob1', )
          else:
            flags += ('/DNDEBUG', )
            if x_optimization == '1' :
              flags += ('/O1', )
            else:
              if x_optimization == '2' :
                flags += ('/O2', )
              else:
                if x_optimization == '3' :
                  flags += ('/O2', )
                else:
                  if ( x_optimization == 'size' or x_optimization == 'z' ) :
                    flags += ('/O1', '/GL', '/Gw', )
                  else:
                    if x_optimization == 'fast' :
                      flags += ('/O2', '/fp:fast', )
      if not ( x_control_flow == 'default') :
        if x_control_flow == 'off' :
          flags += ('/guard:cf-', )
        else:
          flags += ('/guard:cf', )
      if not ( x_whole_program == 'default') :
        if x_whole_program == 'off' :
          flags += ('/GL-', )
        else:
          flags += ('/GL', '/Gw', )
          linkflags += ('/LTCG', )
          if x_whole_program == 'strip_all' :
            linkflags += ('/OPT:REF', )
      if not ( x_pedantic == 'default') :
        if not ( x_pedantic == 'off' ) :
          flags += ('/permissive-', '/Zc:__cplusplus', )
      if not ( x_stack_protector == 'default') :
        if x_stack_protector == 'off' :
          flags += ('/GS-', )
        else:
          flags += ('/GS', '/sdl', )
          if x_stack_protector == 'strong' :
            flags += ('/RTC1', )
            if ( compiler == 'msvc' and not ( verless(16, 7) ) ) :
              flags += ('/guard:ehcont', )
              linkflags += ('/CETCOMPAT', )
          else:
            if x_stack_protector == 'all' :
              flags += ('/RTC1', '/RTCc', )
  if compiler == 'msvc' :
    if not ( x_windows_bigobj == 'default') :
      flags += ('/bigobj', )
    if not ( x_msvc_conformance == 'default') :
      if ( x_msvc_conformance == 'all' or x_msvc_conformance == 'all_without_throwing_new' ) :
        flags += ('/Zc:inline', '/Zc:referenceBinding', )
        if x_msvc_conformance == 'all' :
          flags += ('/Zc:throwingNew', )
        if not ( verless(15, 6) ) :
          flags += ('/Zc:externConstexpr', )
          if not ( verless(16, 8) ) :
            flags += ('/Zc:lambda', )
            if not ( verless(16, 5) ) :
              flags += ('/Zc:preprocessor', )
    if not ( x_msvc_crt_secure_no_warnings == 'default') :
      if x_msvc_crt_secure_no_warnings == 'on' :
        flags += ('/D_CRT_SECURE_NO_WARNINGS=1', )
      else:
        if x_msvc_crt_secure_no_warnings == 'off' :
          flags += ('/U_CRT_SECURE_NO_WARNINGS', )
    if not ( x_msvc_isystem == 'default') :
      if x_msvc_isystem == 'external_as_include_system_flag' :
        # unimplementable
        pass
      else:
        flags += ('/experimental:external', '/external:W0', )
        if x_msvc_isystem == 'anglebrackets' :
          flags += ('/external:anglebrackets', )
        else:
          flags += ('/external:env:INCLUDE', '/external:env:CAExcludePath', )
      if not ( x_msvc_isystem_with_template_from_non_external == 'default') :
        if x_msvc_isystem_with_template_from_non_external == 'off' :
          flags += ('/external:template', )
        else:
          flags += ('/external:template-', )
      if not ( x_warnings == 'default') :
        if x_warnings == 'off' :
          flags += ('/W0', )
        else:
          flags += ('/wd4710', '/wd4711', )
          if not ( not ( verless(19, 21) ) ) :
            flags += ('/wd4774', )
          if x_warnings == 'on' :
            flags += ('/W4', '/wd4514', )
          else:
            flags += ('/Wall', '/wd4514', '/wd4571', '/wd4355', '/wd4548', '/wd4577', '/wd4820', '/wd5039', '/wd4464', '/wd4868', '/wd5045', )
            if x_warnings == 'strict' :
              flags += ('/wd4583', '/wd4619', )
      if not ( x_switch_warnings == 'default') :
        if ( x_switch_warnings == 'on' or x_switch_warnings == 'mandatory_default' ) :
          flags += ('/w14062', )
        else:
          if ( x_switch_warnings == 'exhaustive_enum' or x_switch_warnings == 'exhaustive_enum_and_mandatory_default' ) :
            flags += ('/w14061', '/w14062', )
          else:
            if x_switch_warnings == 'off' :
              flags += ('/wd4061', '/wd4062', )
    else:
      if not ( x_warnings == 'default') :
        if x_warnings == 'off' :
          flags += ('/W0', )
        else:
          if x_warnings == 'on' :
            flags += ('/W4', '/wd4514', '/wd4711', )
          else:
            flags += ('/Wall', '/wd4355', '/wd4514', '/wd4548', '/wd4571', '/wd4577', '/wd4625', '/wd4626', '/wd4668', '/wd4710', '/wd4711', )
            if not ( not ( verless(19, 21) ) ) :
              flags += ('/wd4774', )
            flags += ('/wd4820', '/wd5026', '/wd5027', '/wd5039', '/wd4464', '/wd4868', '/wd5045', )
            if x_warnings == 'strict' :
              flags += ('/wd4061', '/wd4266', '/wd4583', '/wd4619', '/wd4623', '/wd5204', )
    if not ( x_conversion_warnings == 'default') :
      if x_conversion_warnings == 'on' :
        flags += ('/w14244', '/w14245', '/w14388', '/w14365', )
      else:
        if x_conversion_warnings == 'conversion' :
          flags += ('/w14244', '/w14365', )
        else:
          if x_conversion_warnings == 'sign' :
            flags += ('/w14388', '/w14245', )
          else:
            flags += ('/wd4244', '/wd4365', '/wd4388', '/wd4245', )
    if not ( x_shadow_warnings == 'default') :
      if x_shadow_warnings == 'off' :
        flags += ('/wd4456', '/wd4459', )
      else:
        if ( x_shadow_warnings == 'on' or x_shadow_warnings == 'all' ) :
          flags += ('/w4456', '/w4459', )
        else:
          if x_shadow_warnings == 'local' :
            flags += ('/w4456', '/wd4459', )
    if not ( x_warnings_as_error == 'default') :
      if x_warnings_as_error == 'on' :
        flags += ('/WX', )
        linkflags += ('/WX', )
      else:
        if x_warnings_as_error == 'off' :
          flags += ('/WX-', )
        else:
          flags += ('/we4455', '/we4150', '/we4716', '/we2124', )
    if not ( x_lto == 'default') :
      if x_lto == 'off' :
        flags += ('/LTCG:OFF', )
      else:
        flags += ('/GL', )
        linkflags += ('/LTCG', )
    if not ( x_sanitizers == 'default') :
      if not ( verless(16, 9) ) :
        flags += ('/fsanitize=address', '/fsanitize-address-use-after-return', )
      else:
        if x_sanitizers == 'on' :
          flags += ('/sdl', )
        else:
          if not ( x_stack_protector == 'default') :
            if not ( x_stack_protector == 'off' ) :
              flags += ('/sdl-', )
  if compiler == 'icl' :
    if not ( x_warnings == 'default') :
      if x_warnings == 'off' :
        flags += ('/w', )
      else:
        flags += ('/W2', '/Qdiag-disable:1418,2259', )
    if not ( x_warnings_as_error == 'default') :
      if x_warnings_as_error == 'on' :
        flags += ('/WX', )
      else:
        if x_warnings_as_error == 'basic' :
          flags += ('/Qdiag-error:1079,39,109', )
    if not ( x_windows_bigobj == 'default') :
      flags += ('/bigobj', )
    if not ( x_msvc_conformance == 'default') :
      if ( x_msvc_conformance == 'all' or x_msvc_conformance == 'all_without_throwing_new' ) :
        flags += ('/Zc:inline', '/Zc:strictStrings', )
        if x_msvc_conformance == 'all' :
          flags += ('/Zc:throwingNew', )
    if not ( x_debug == 'default') :
      if x_debug == 'off' :
        flags += ('/debug:NONE', )
      else:
        flags += ('/RTC1', '/Od', )
        if x_debug == 'on' :
          flags += ('/debug:full', )
        else:
          if x_debug == 'line_tables_only' :
            flags += ('/debug:minimal', )
        if not ( x_optimization == 'default') :
          if x_optimization == 'g' :
            flags += ('/Zi', )
          else:
            if not ( x_whole_program == 'default') :
              if x_whole_program == 'off' :
                flags += ('/ZI', )
              else:
                flags += ('/Zi', )
            else:
              flags += ('/ZI', )
        else:
          if not ( x_whole_program == 'default') :
            if x_whole_program == 'off' :
              flags += ('/ZI', )
            else:
              flags += ('/Zi', )
          else:
            flags += ('/ZI', )
    if not ( x_optimization == 'default') :
      if x_optimization == '0' :
        flags += ('/Ob0', '/Od', '/Oi-', '/Oy-', )
      else:
        if x_optimization == 'g' :
          flags += ('/Ob1', )
        else:
          flags += ('/DNDEBUG', '/GF', )
          if x_optimization == '1' :
            flags += ('/O1', )
          else:
            if x_optimization == '2' :
              flags += ('/O2', )
            else:
              if x_optimization == '3' :
                flags += ('/O2', )
              else:
                if x_optimization == 'z' :
                  flags += ('/O3', )
                else:
                  if x_optimization == 'size' :
                    flags += ('/Os', )
                  else:
                    if x_optimization == 'fast' :
                      flags += ('/fast', )
    if not ( x_stack_protector == 'default') :
      if x_stack_protector == 'off' :
        flags += ('/GS-', )
      else:
        flags += ('/GS', )
        if x_stack_protector == 'strong' :
          flags += ('/RTC1', )
        else:
          if x_stack_protector == 'all' :
            flags += ('/RTC1', '/RTCc', )
    if not ( x_sanitizers == 'default') :
      if x_sanitizers == 'on' :
        flags += ('/Qtrapuv', )
    if not ( x_float_sanitizers == 'default') :
      if x_float_sanitizers == 'on' :
        flags += ('/Qfp-stack-check', '/Qfp-trap:common', )
    if not ( x_control_flow == 'default') :
      if x_control_flow == 'off' :
        flags += ('/guard:cf-', '/mconditional-branch=keep', )
      else:
        flags += ('/guard:cf', )
        if x_control_flow == 'branch' :
          flags += ('/mconditional-branch:all-fix', '/Qcf-protection:branch', )
        else:
          if x_control_flow == 'on' :
            flags += ('/mconditional-branch:all-fix', '/Qcf-protection:full', )
    if not ( x_cpu == 'default') :
      if x_cpu == 'generic' :
        flags += ('/Qtune:generic', )
        linkflags += ('/Qtune:generic', )
      else:
        flags += ('/QxHost', )
        linkflags += ('/QxHost', )
  else:
    if compiler == 'icc' :
      if not ( x_warnings == 'default') :
        if x_warnings == 'off' :
          flags += ('-w', )
        else:
          flags += ('-Wall', '-Warray-bounds', '-Wcast-qual', '-Wchar-subscripts', '-Wdisabled-optimization', '-Wenum-compare', '-Wextra', '-Wfloat-equal', '-Wformat-security', '-Wformat=2', '-Winit-self', '-Winvalid-pch', '-Wmaybe-uninitialized', '-Wmissing-include-dirs', '-Wnarrowing', '-Wnonnull', '-Wparentheses', '-Wpointer-sign', '-Wreorder', '-Wsequence-point', '-Wtrigraphs', '-Wundef', '-Wunused-function', '-Wunused-but-set-variable', '-Wunused-variable', '-Wpointer-arith', '-Wdeprecated', '-Wnon-virtual-dtor', '-Woverloaded-virtual', )
          if not ( x_switch_warnings == 'default') :
            if ( x_switch_warnings == 'on' or x_switch_warnings == 'exhaustive_enum' ) :
              flags += ('-Wswitch-enum', )
            else:
              if x_switch_warnings == 'mandatory_default' :
                flags += ('-Wswitch-default', )
              else:
                if x_switch_warnings == 'exhaustive_enum_and_mandatory_default' :
                  flags += ('-Wswitch', )
                else:
                  flags += ('-Wno-switch', )
      if not ( x_warnings_as_error == 'default') :
        if x_warnings_as_error == 'on' :
          flags += ('-Werror', )
        else:
          if x_warnings_as_error == 'basic' :
            flags += ('-diag-error=1079,39,109', )
      if not ( x_pedantic == 'default') :
        if x_pedantic == 'off' :
          flags += ('-fgnu-keywords', )
        else:
          flags += ('-fno-gnu-keywords', )
      if not ( x_shadow_warnings == 'default') :
        if x_shadow_warnings == 'off' :
          flags += ('-Wno-shadow', )
        else:
          if ( x_shadow_warnings == 'on' or x_shadow_warnings == 'all' ) :
            flags += ('-Wshadow', )
      if not ( x_stl_debug == 'default') :
        if not ( x_stl_debug == 'off' ) :
          if ( x_stl_debug == 'allow_broken_abi' or x_stl_debug == 'allow_broken_abi_and_bugs' ) :
            flags += ('-D_GLIBCXX_DEBUG', )
          else:
            flags += ('-D_GLIBCXX_ASSERTIONS', )
      if not ( x_debug == 'default') :
        if x_debug == 'off' :
          flags += ('-g0', )
        else:
          flags += ('-g', )
      if not ( x_optimization == 'default') :
        if x_optimization == '0' :
          flags += ('-O0', )
        else:
          if x_optimization == 'g' :
            flags += ('-O1', )
          else:
            flags += ('-DNDEBUG', )
            if x_optimization == '1' :
              flags += ('-O1', )
            else:
              if x_optimization == '2' :
                flags += ('-O2', )
              else:
                if x_optimization == '3' :
                  flags += ('-O3', )
                else:
                  if x_optimization == 'z' :
                    flags += ('-fast', )
                  else:
                    if x_optimization == 'size' :
                      flags += ('-Os', )
                    else:
                      if x_optimization == 'fast' :
                        flags += ('-Ofast', )
      if not ( x_stack_protector == 'default') :
        if x_stack_protector == 'off' :
          flags += ('-fno-protector-strong', '-U_FORTIFY_SOURCE', )
          linkflags += ('-fno-protector-strong', )
        else:
          flags += ('-D_FORTIFY_SOURCE=2', )
          if x_stack_protector == 'strong' :
            flags += ('-fstack-protector-strong', )
            linkflags += ('-fstack-protector-strong', )
          else:
            if x_stack_protector == 'all' :
              flags += ('-fstack-protector-all', )
              linkflags += ('-fstack-protector-all', )
            else:
              flags += ('-fstack-protector', )
              linkflags += ('-fstack-protector', )
      if not ( x_relro == 'default') :
        if x_relro == 'off' :
          linkflags += ('-Xlinker-znorelro', )
        else:
          if x_relro == 'on' :
            linkflags += ('-Xlinker-zrelro', )
          else:
            if x_relro == 'full' :
              linkflags += ('-Xlinker-zrelro', '-Xlinker-znow', '-Xlinker-znoexecstack', )
      if not ( x_pie == 'default') :
        if x_pie == 'off' :
          linkflags += ('-no-pic', )
        else:
          if x_pie == 'on' :
            linkflags += ('-pie', )
          else:
            if x_pie == 'fpie' :
              flags += ('-fpie', )
            else:
              if x_pie == 'fpic' :
                flags += ('-fpic', )
              else:
                if x_pie == 'fPIE' :
                  flags += ('-fPIE', )
                else:
                  if x_pie == 'fPIC' :
                    flags += ('-fPIC', )
      if not ( x_sanitizers == 'default') :
        if x_sanitizers == 'on' :
          flags += ('-ftrapuv', )
      if not ( x_integer_sanitizers == 'default') :
        if x_integer_sanitizers == 'on' :
          flags += ('-funsigned-bitfields', )
        else:
          flags += ('-fno-unsigned-bitfields', )
      if not ( x_float_sanitizers == 'default') :
        if x_float_sanitizers == 'on' :
          flags += ('-fp-stack-check', '-fp-trap=common', )
      if not ( x_linker == 'default') :
        if x_linker == 'bfd' :
          linkflags += ('-fuse-ld=bfd', )
        else:
          if x_linker == 'gold' :
            linkflags += ('-fuse-ld=gold', )
          else:
            linkflags += ('-fuse-ld=lld', )
      if not ( x_lto == 'default') :
        if x_lto == 'off' :
          flags += ('-no-ipo', )
          linkflags += ('-no-ipo', )
        else:
          flags += ('-ipo', )
          linkflags += ('-ipo', )
          if x_lto == 'fat' :
            if platform == 'linux' :
              flags += ('-ffat-lto-objects', )
              linkflags += ('-ffat-lto-objects', )
      if not ( x_control_flow == 'default') :
        if x_control_flow == 'off' :
          flags += ('-mconditional-branch=keep', '-fcf-protection=none', )
        else:
          if x_control_flow == 'branch' :
            flags += ('-mconditional-branch=all-fix', '-fcf-protection=branch', )
          else:
            if x_control_flow == 'on' :
              flags += ('-mconditional-branch=all-fix', '-fcf-protection=full', )
      if not ( x_exceptions == 'default') :
        if x_exceptions == 'on' :
          flags += ('-fexceptions', )
        else:
          flags += ('-fno-exceptions', )
      if not ( x_rtti == 'default') :
        if x_rtti == 'on' :
          flags += ('-frtti', )
        else:
          flags += ('-fno-rtti', )
      if not ( x_cpu == 'default') :
        if x_cpu == 'generic' :
          flags += ('-mtune=generic', )
          linkflags += ('-mtune=generic', )
        else:
          flags += ('-xHost', )
          linkflags += ('-xHost', )
  if platform == 'mingw' :
    if not ( x_windows_bigobj == 'default') :
      flags += ('-Wa,-mbig-obj', )
  return {"flags": flags, "linkflags": linkflags}
