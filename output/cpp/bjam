# File generated with https://github.com/jonathanpoelen/cpp-compiler-options

# jam reference: https://www.boost.org/build/doc/html/index.html

import feature : feature ;
import modules ;

JLN_BJAM_YEAR_VERSION = [ modules.peek : JAMVERSION ] ;

feature <jln-color> : _ default auto never always : propagated ;
# insert extra runtime security checks to detect attempts to compromise your code
feature <jln-control-flow> : _ default off on branch return allow-bugs : incidental ;
# warn for implicit conversions that may alter a value
feature <jln-conversion-warnings> : _ on default off sign conversion : propagated ;
feature <jln-coverage> : _ default off on : incidental ;
# warning for default label in switch which covers all enumeration values
feature <jln-covered-switch-default-warnings> : _ on default off : propagated ;
feature <jln-cpu> : _ default generic native : incidental ;
# produce debugging information in the operating system's
feature <jln-debug> : _ default off on line-tables-only gdb lldb sce : incidental ;
# emit fix-it hints in a machine-parseable format
feature <jln-diagnostics-format> : _ default fixits patch print-source-range-info : propagated ;
# enables printing a tree-like structure showing the common and differing parts of the types
feature <jln-diagnostics-show-template-tree> : _ default off on : propagated ;
# prints diagnostics showing common parts of template types as "[...]"
feature <jln-elide-type> : _ default off on : propagated ;
# enable C++ exception
feature <jln-exceptions> : _ default off on : incidental ;
# transforms some warnings into errors to comply with the standard
feature <jln-fix-compiler-error> : _ on default off : propagated ;
feature <jln-float-sanitizers> : _ default off on : incidental ;
feature <jln-integer-sanitizers> : _ default off on : incidental ;
# configure linker
feature <jln-linker> : _ default bfd gold lld native : propagated ;
# enable Link Time Optimization
feature <jln-lto> : _ default off on fat thin : incidental ;
# standard conformance options
feature <jln-msvc-conformance> : _ all default all-without-throwing-new : incidental ;
# disable CRT warnings
feature <jln-msvc-crt-secure-no-warnings> : _ on default off : propagated ;
# warnings concerning external header (https://devblogs.microsoft.com/cppblog/broken-warnings-theory)
feature <jln-msvc-isystem> : _ default anglebrackets include-and-caexcludepath : propagated ;
# warnings concerning template in an external header (requires msvc_isystem)
feature <jln-msvc-isystem-with-template-from-non-external> : _ default off on : propagated ;
# Warn when a noexcept-expression evaluates to false because of a call to a function that does not have a non-throwing exception specification (i.e. "throw()" or "noexcept") but is known by the compiler to never throw an exception.
feature <jln-noexcept-warnings> : _ default off on : propagated ;
# optimization level
#  - 0: not optimize
#  - g: enable debugging experience
#  - 1: optimize
#  - 2: optimize even more
#  - 3: optimize yet more
#  - fast: enables all optimization=3 and disregard strict standards compliance
#  - size: optimize for size
#  - z: optimize for size aggressively (/!\ possible slow compilation)
feature <jln-optimization> : _ default 0 g 1 2 3 fast size z : incidental ;
# enable other sanitizers
feature <jln-other-sanitizers> : _ default off thread pointer memory : incidental ;
# issue all the warnings demanded by strict ISO C and ISO C++
feature <jln-pedantic> : _ on default off as-error : incidental ;
# controls position-independent code generation
feature <jln-pie> : _ default off on static fpic fPIC fpie fPIE : incidental ;
# specifies a memory segment that should be made read-only after relocation, if supported.
feature <jln-relro> : _ default off on full : incidental ;
# warn when macros "__TIME__", "__DATE__" or "__TIMESTAMP__" are encountered as they might prevent bit-wise-identical reproducible compilations
feature <jln-reproducible-build-warnings> : _ default off on : propagated ;
# disable generation of information about every class with virtual functions for use by the C++ run-time type identification features ("dynamic_cast" and "typeid")
feature <jln-rtti> : _ default off on : incidental ;
# enable sanitizers (asan, ubsan, etc)
feature <jln-sanitizers> : _ default off on : incidental ;
feature <jln-shadow-warnings> : _ off default on local compatible-local all : propagated ;
# emit extra code to check for buffer overflows, such as stack smashing attacks
feature <jln-stack-protector> : _ default off on strong all : incidental ;
# controls the debug level of the STL
feature <jln-stl-debug> : _ default off on allow-broken-abi allow-broken-abi-and-bugs assert-as-exception : incidental ;
# enable /DNOMINMAX with msvc
feature <jln-stl-fix> : _ on default off : incidental ;
# warn for cases where adding an attribute may be beneficial
feature <jln-suggestions> : _ default off on : propagated ;
# warnings concerning the switch keyword
feature <jln-switch-warnings> : _ on default off exhaustive-enum mandatory-default exhaustive-enum-and-mandatory-default : propagated ;
# warning level
feature <jln-warnings> : _ on default off strict very-strict : propagated ;
# make all or some warnings into errors
feature <jln-warnings-as-error> : _ default off on basic : incidental ;
# Assume that the current compilation unit represents the whole program being compiled. This option should not be used in combination with lto.
feature <jln-whole-program> : _ default off on strip-all : incidental ;
# In code that is intended to be portable to Windows-based compilers the warning helps prevent unresolved references due to the difference in the mangling of symbols declared with different class-keys
feature <jln-windows-abi-compatibility-warnings> : _ off default on : propagated ;
# increases that addressable sections capacity
feature <jln-windows-bigobj> : _ on default : incidental ;

feature <jln-control-flow-incidental> : _ default off on branch return allow-bugs : incidental ;
feature <jln-coverage-incidental> : _ default off on : incidental ;
feature <jln-cpu-incidental> : _ default generic native : incidental ;
feature <jln-debug-incidental> : _ default off on line-tables-only gdb lldb sce : incidental ;
feature <jln-exceptions-incidental> : _ default off on : incidental ;
feature <jln-float-sanitizers-incidental> : _ default off on : incidental ;
feature <jln-integer-sanitizers-incidental> : _ default off on : incidental ;
feature <jln-lto-incidental> : _ default off on fat thin : incidental ;
feature <jln-msvc-conformance-incidental> : _ all default all-without-throwing-new : incidental ;
feature <jln-optimization-incidental> : _ default 0 g 1 2 3 fast size z : incidental ;
feature <jln-other-sanitizers-incidental> : _ default off thread pointer memory : incidental ;
feature <jln-pedantic-incidental> : _ on default off as-error : incidental ;
feature <jln-pie-incidental> : _ default off on static fpic fPIC fpie fPIE : incidental ;
feature <jln-relro-incidental> : _ default off on full : incidental ;
feature <jln-rtti-incidental> : _ default off on : incidental ;
feature <jln-sanitizers-incidental> : _ default off on : incidental ;
feature <jln-stack-protector-incidental> : _ default off on strong all : incidental ;
feature <jln-stl-debug-incidental> : _ default off on allow-broken-abi allow-broken-abi-and-bugs assert-as-exception : incidental ;
feature <jln-stl-fix-incidental> : _ on default off : incidental ;
feature <jln-warnings-as-error-incidental> : _ default off on basic : incidental ;
feature <jln-whole-program-incidental> : _ default off on strip-all : incidental ;
feature <jln-windows-bigobj-incidental> : _ on default : incidental ;

feature <jln-color-default> : default auto never always : incidental ;
feature <jln-control-flow-default> : default off on branch return allow-bugs : incidental ;
feature <jln-conversion-warnings-default> : on default off sign conversion : incidental ;
feature <jln-coverage-default> : default off on : incidental ;
feature <jln-covered-switch-default-warnings-default> : on default off : incidental ;
feature <jln-cpu-default> : default generic native : incidental ;
feature <jln-debug-default> : default off on line-tables-only gdb lldb sce : incidental ;
feature <jln-diagnostics-format-default> : default fixits patch print-source-range-info : incidental ;
feature <jln-diagnostics-show-template-tree-default> : default off on : incidental ;
feature <jln-elide-type-default> : default off on : incidental ;
feature <jln-exceptions-default> : default off on : incidental ;
feature <jln-fix-compiler-error-default> : on default off : incidental ;
feature <jln-float-sanitizers-default> : default off on : incidental ;
feature <jln-integer-sanitizers-default> : default off on : incidental ;
feature <jln-linker-default> : default bfd gold lld native : incidental ;
feature <jln-lto-default> : default off on fat thin : incidental ;
feature <jln-msvc-conformance-default> : all default all-without-throwing-new : incidental ;
feature <jln-msvc-crt-secure-no-warnings-default> : on default off : incidental ;
feature <jln-msvc-isystem-default> : default anglebrackets include-and-caexcludepath : incidental ;
feature <jln-msvc-isystem-with-template-from-non-external-default> : default off on : incidental ;
feature <jln-noexcept-warnings-default> : default off on : incidental ;
feature <jln-optimization-default> : default 0 g 1 2 3 fast size z : incidental ;
feature <jln-other-sanitizers-default> : default off thread pointer memory : incidental ;
feature <jln-pedantic-default> : on default off as-error : incidental ;
feature <jln-pie-default> : default off on static fpic fPIC fpie fPIE : incidental ;
feature <jln-relro-default> : default off on full : incidental ;
feature <jln-reproducible-build-warnings-default> : default off on : incidental ;
feature <jln-rtti-default> : default off on : incidental ;
feature <jln-sanitizers-default> : default off on : incidental ;
feature <jln-shadow-warnings-default> : off default on local compatible-local all : incidental ;
feature <jln-stack-protector-default> : default off on strong all : incidental ;
feature <jln-stl-debug-default> : default off on allow-broken-abi allow-broken-abi-and-bugs assert-as-exception : incidental ;
feature <jln-stl-fix-default> : on default off : incidental ;
feature <jln-suggestions-default> : default off on : incidental ;
feature <jln-switch-warnings-default> : on default off exhaustive-enum mandatory-default exhaustive-enum-and-mandatory-default : incidental ;
feature <jln-warnings-default> : on default off strict very-strict : incidental ;
feature <jln-warnings-as-error-default> : default off on basic : incidental ;
feature <jln-whole-program-default> : default off on strip-all : incidental ;
feature <jln-windows-abi-compatibility-warnings-default> : off default on : incidental ;
feature <jln-windows-bigobj-default> : on default : incidental ;


import os ;

rule jln-get-env ( env : values * )
{
  local x = [ os.environ $(env) ] ;
  if $(x)
  {
    if $(x) in $(values)
    {
      return $(x) ;
    }
    else
    {
      EXIT "Unknown '$(x)' for $(env)" : 7 ;
    }
  }
  else
  {
    return "" ;
  }
}

constant jln_env_color : [ jln-get-env jln_color : default auto never always ] ;
constant jln_env_control_flow : [ jln-get-env jln_control_flow : default off on branch return allow-bugs ] ;
constant jln_env_conversion_warnings : [ jln-get-env jln_conversion_warnings : on default off sign conversion ] ;
constant jln_env_coverage : [ jln-get-env jln_coverage : default off on ] ;
constant jln_env_covered_switch_default_warnings : [ jln-get-env jln_covered_switch_default_warnings : on default off ] ;
constant jln_env_cpu : [ jln-get-env jln_cpu : default generic native ] ;
constant jln_env_debug : [ jln-get-env jln_debug : default off on line-tables-only gdb lldb sce ] ;
constant jln_env_diagnostics_format : [ jln-get-env jln_diagnostics_format : default fixits patch print-source-range-info ] ;
constant jln_env_diagnostics_show_template_tree : [ jln-get-env jln_diagnostics_show_template_tree : default off on ] ;
constant jln_env_elide_type : [ jln-get-env jln_elide_type : default off on ] ;
constant jln_env_exceptions : [ jln-get-env jln_exceptions : default off on ] ;
constant jln_env_fix_compiler_error : [ jln-get-env jln_fix_compiler_error : on default off ] ;
constant jln_env_float_sanitizers : [ jln-get-env jln_float_sanitizers : default off on ] ;
constant jln_env_integer_sanitizers : [ jln-get-env jln_integer_sanitizers : default off on ] ;
constant jln_env_linker : [ jln-get-env jln_linker : default bfd gold lld native ] ;
constant jln_env_lto : [ jln-get-env jln_lto : default off on fat thin ] ;
constant jln_env_msvc_conformance : [ jln-get-env jln_msvc_conformance : all default all-without-throwing-new ] ;
constant jln_env_msvc_crt_secure_no_warnings : [ jln-get-env jln_msvc_crt_secure_no_warnings : on default off ] ;
constant jln_env_msvc_isystem : [ jln-get-env jln_msvc_isystem : default anglebrackets include-and-caexcludepath ] ;
constant jln_env_msvc_isystem_with_template_from_non_external : [ jln-get-env jln_msvc_isystem_with_template_from_non_external : default off on ] ;
constant jln_env_noexcept_warnings : [ jln-get-env jln_noexcept_warnings : default off on ] ;
constant jln_env_optimization : [ jln-get-env jln_optimization : default 0 g 1 2 3 fast size z ] ;
constant jln_env_other_sanitizers : [ jln-get-env jln_other_sanitizers : default off thread pointer memory ] ;
constant jln_env_pedantic : [ jln-get-env jln_pedantic : on default off as-error ] ;
constant jln_env_pie : [ jln-get-env jln_pie : default off on static fpic fPIC fpie fPIE ] ;
constant jln_env_relro : [ jln-get-env jln_relro : default off on full ] ;
constant jln_env_reproducible_build_warnings : [ jln-get-env jln_reproducible_build_warnings : default off on ] ;
constant jln_env_rtti : [ jln-get-env jln_rtti : default off on ] ;
constant jln_env_sanitizers : [ jln-get-env jln_sanitizers : default off on ] ;
constant jln_env_shadow_warnings : [ jln-get-env jln_shadow_warnings : off default on local compatible-local all ] ;
constant jln_env_stack_protector : [ jln-get-env jln_stack_protector : default off on strong all ] ;
constant jln_env_stl_debug : [ jln-get-env jln_stl_debug : default off on allow-broken-abi allow-broken-abi-and-bugs assert-as-exception ] ;
constant jln_env_stl_fix : [ jln-get-env jln_stl_fix : on default off ] ;
constant jln_env_suggestions : [ jln-get-env jln_suggestions : default off on ] ;
constant jln_env_switch_warnings : [ jln-get-env jln_switch_warnings : on default off exhaustive-enum mandatory-default exhaustive-enum-and-mandatory-default ] ;
constant jln_env_warnings : [ jln-get-env jln_warnings : on default off strict very-strict ] ;
constant jln_env_warnings_as_error : [ jln-get-env jln_warnings_as_error : default off on basic ] ;
constant jln_env_whole_program : [ jln-get-env jln_whole_program : default off on strip-all ] ;
constant jln_env_windows_abi_compatibility_warnings : [ jln-get-env jln_windows_abi_compatibility_warnings : off default on ] ;
constant jln_env_windows_bigobj : [ jln-get-env jln_windows_bigobj : on default ] ;

if $(JLN_BJAM_YEAR_VERSION) < 2016.00
{
  import toolset ;
  toolset.flags jln-control-flow JLN_CONTROL_FLOW : <jln-control-flow> ;
  toolset.flags jln-control-flow-incidental JLN_CONTROL_FLOW_INCIDENTAL : <jln-control-flow-incidental> ;
  toolset.flags jln-coverage JLN_COVERAGE : <jln-coverage> ;
  toolset.flags jln-coverage-incidental JLN_COVERAGE_INCIDENTAL : <jln-coverage-incidental> ;
  toolset.flags jln-cpu JLN_CPU : <jln-cpu> ;
  toolset.flags jln-cpu-incidental JLN_CPU_INCIDENTAL : <jln-cpu-incidental> ;
  toolset.flags jln-debug JLN_DEBUG : <jln-debug> ;
  toolset.flags jln-debug-incidental JLN_DEBUG_INCIDENTAL : <jln-debug-incidental> ;
  toolset.flags jln-exceptions JLN_EXCEPTIONS : <jln-exceptions> ;
  toolset.flags jln-exceptions-incidental JLN_EXCEPTIONS_INCIDENTAL : <jln-exceptions-incidental> ;
  toolset.flags jln-float-sanitizers JLN_FLOAT_SANITIZERS : <jln-float-sanitizers> ;
  toolset.flags jln-float-sanitizers-incidental JLN_FLOAT_SANITIZERS_INCIDENTAL : <jln-float-sanitizers-incidental> ;
  toolset.flags jln-integer-sanitizers JLN_INTEGER_SANITIZERS : <jln-integer-sanitizers> ;
  toolset.flags jln-integer-sanitizers-incidental JLN_INTEGER_SANITIZERS_INCIDENTAL : <jln-integer-sanitizers-incidental> ;
  toolset.flags jln-lto JLN_LTO : <jln-lto> ;
  toolset.flags jln-lto-incidental JLN_LTO_INCIDENTAL : <jln-lto-incidental> ;
  toolset.flags jln-msvc-conformance JLN_MSVC_CONFORMANCE : <jln-msvc-conformance> ;
  toolset.flags jln-msvc-conformance-incidental JLN_MSVC_CONFORMANCE_INCIDENTAL : <jln-msvc-conformance-incidental> ;
  toolset.flags jln-optimization JLN_OPTIMIZATION : <jln-optimization> ;
  toolset.flags jln-optimization-incidental JLN_OPTIMIZATION_INCIDENTAL : <jln-optimization-incidental> ;
  toolset.flags jln-other-sanitizers JLN_OTHER_SANITIZERS : <jln-other-sanitizers> ;
  toolset.flags jln-other-sanitizers-incidental JLN_OTHER_SANITIZERS_INCIDENTAL : <jln-other-sanitizers-incidental> ;
  toolset.flags jln-pedantic JLN_PEDANTIC : <jln-pedantic> ;
  toolset.flags jln-pedantic-incidental JLN_PEDANTIC_INCIDENTAL : <jln-pedantic-incidental> ;
  toolset.flags jln-pie JLN_PIE : <jln-pie> ;
  toolset.flags jln-pie-incidental JLN_PIE_INCIDENTAL : <jln-pie-incidental> ;
  toolset.flags jln-relro JLN_RELRO : <jln-relro> ;
  toolset.flags jln-relro-incidental JLN_RELRO_INCIDENTAL : <jln-relro-incidental> ;
  toolset.flags jln-rtti JLN_RTTI : <jln-rtti> ;
  toolset.flags jln-rtti-incidental JLN_RTTI_INCIDENTAL : <jln-rtti-incidental> ;
  toolset.flags jln-sanitizers JLN_SANITIZERS : <jln-sanitizers> ;
  toolset.flags jln-sanitizers-incidental JLN_SANITIZERS_INCIDENTAL : <jln-sanitizers-incidental> ;
  toolset.flags jln-stack-protector JLN_STACK_PROTECTOR : <jln-stack-protector> ;
  toolset.flags jln-stack-protector-incidental JLN_STACK_PROTECTOR_INCIDENTAL : <jln-stack-protector-incidental> ;
  toolset.flags jln-stl-debug JLN_STL_DEBUG : <jln-stl-debug> ;
  toolset.flags jln-stl-debug-incidental JLN_STL_DEBUG_INCIDENTAL : <jln-stl-debug-incidental> ;
  toolset.flags jln-stl-fix JLN_STL_FIX : <jln-stl-fix> ;
  toolset.flags jln-stl-fix-incidental JLN_STL_FIX_INCIDENTAL : <jln-stl-fix-incidental> ;
  toolset.flags jln-warnings-as-error JLN_WARNINGS_AS_ERROR : <jln-warnings-as-error> ;
  toolset.flags jln-warnings-as-error-incidental JLN_WARNINGS_AS_ERROR_INCIDENTAL : <jln-warnings-as-error-incidental> ;
  toolset.flags jln-whole-program JLN_WHOLE_PROGRAM : <jln-whole-program> ;
  toolset.flags jln-whole-program-incidental JLN_WHOLE_PROGRAM_INCIDENTAL : <jln-whole-program-incidental> ;
  toolset.flags jln-windows-bigobj JLN_WINDOWS_BIGOBJ : <jln-windows-bigobj> ;
  toolset.flags jln-windows-bigobj-incidental JLN_WINDOWS_BIGOBJ_INCIDENTAL : <jln-windows-bigobj-incidental> ;

}
import property-set ;
import string ;

local ORIGINAL_TOOLSET = 0 ;
local COMP_VERSION = 00.00 ;

rule jln-get-normalized-compiler-version ( toolset : version )
{
  # TODO `version` is not the real version. For toolset=gcc-5, version is 5 ; for clang-scan, version is ''
  # define PP_CAT_I(a,b) a##b
  # define PP_CAT(a,b) PP_CAT_I(a,b)
  # g++ -x c++ -E - <<<'PP_CAT(__GNUC__, PP_CAT(__GNUC_MINOR__, __GNUC_PATCHLEVEL__))'
  # clang++ -x c++ -E - <<<'PP_CAT(__clang_major__, PP_CAT(__clang_minor__, __clang_patchlevel__))'
  if $(ORIGINAL_TOOLSET) != $(toolset)
  {
    local version = [ MATCH "^[^0-9]*(.*)$" : $(version) ] ;
    if ! $(version) {
      if $(toolset) != intel {
        version = [ MATCH ".*(\\d+\\.\\d+\\.\\d+).*" : [ SHELL "$(toolset) --version" ] ] ;
      }
    }
    local match = [ MATCH "^([0-9]+)(\\.([0-9]+))?" : $(version) ] ;
    local major = [ MATCH "(..)$" : [ string.join 00 $(match[1]) ] ] ;
    local minor = [ MATCH "(..)$" : [ string.join 00 $(match[3]) ] ] ;
    COMP_VERSION = $(major).$(minor) ;
    ORIGINAL_TOOLSET = $(toolset) ;
  }
  return $(COMP_VERSION) ;
}

rule jln-get-value ( ps : opt : env )
{
  local x = [ $(ps).get <$(opt)> ] ;
  if $(x) = "_"
  {
    x = $(env) ;
    if $(x) = ""
    {
      x = [ $(ps).get <$(opt)-default> ] ;
    }
  }
  return $(x) ;
}

rule jln-get-value2 ( ps : opt : iopt : env )
{
  local x = [ $(ps).get <$(opt)> ] ;
  if $(x) = "_"
  {
    x = [ $(ps).get <$(iopt)> ] ;
    if $(x) = "_"
    {
      x = $(env) ;
      if $(x) = ""
      {
        x = [ $(ps).get <$(opt)-default> ] ;
      }
    }
  }
  return $(x) ;
}

rule jln_flags ( properties * )
{
  local ps = [ property-set.create $(properties) ] ;
  local toolset = [ $(ps).get <toolset> ] ;
  local original_version = [ $(ps).get <toolset-$(toolset):version> ] ;
  local version = [ jln-get-normalized-compiler-version $(toolset)
                  : $(original_version) ] ;
  local linker = [ $(ps).get <linker> ] ;

  local flags = ;
  if $(JLN_BJAM_YEAR_VERSION) >= 2016.00
  {
    flags += 
      <relevant>jln-control-flow
      <relevant>jln-coverage
      <relevant>jln-cpu
      <relevant>jln-debug
      <relevant>jln-exceptions
      <relevant>jln-float-sanitizers
      <relevant>jln-integer-sanitizers
      <relevant>jln-lto
      <relevant>jln-msvc-conformance
      <relevant>jln-optimization
      <relevant>jln-other-sanitizers
      <relevant>jln-pedantic
      <relevant>jln-pie
      <relevant>jln-relro
      <relevant>jln-rtti
      <relevant>jln-sanitizers
      <relevant>jln-stack-protector
      <relevant>jln-stl-debug
      <relevant>jln-stl-fix
      <relevant>jln-warnings-as-error
      <relevant>jln-whole-program
      <relevant>jln-windows-bigobj
    ;
  }

  local x_color = [ jln-get-value $(ps) : jln-color : $(jln_env_color) ] ;
  local x_control_flow = [ jln-get-value2 $(ps) : jln-control-flow : jln-control-flow-incidental : $(jln_env_control_flow) ] ;
  local x_conversion_warnings = [ jln-get-value $(ps) : jln-conversion-warnings : $(jln_env_conversion_warnings) ] ;
  local x_coverage = [ jln-get-value2 $(ps) : jln-coverage : jln-coverage-incidental : $(jln_env_coverage) ] ;
  local x_covered_switch_default_warnings = [ jln-get-value $(ps) : jln-covered-switch-default-warnings : $(jln_env_covered_switch_default_warnings) ] ;
  local x_cpu = [ jln-get-value2 $(ps) : jln-cpu : jln-cpu-incidental : $(jln_env_cpu) ] ;
  local x_debug = [ jln-get-value2 $(ps) : jln-debug : jln-debug-incidental : $(jln_env_debug) ] ;
  local x_diagnostics_format = [ jln-get-value $(ps) : jln-diagnostics-format : $(jln_env_diagnostics_format) ] ;
  local x_diagnostics_show_template_tree = [ jln-get-value $(ps) : jln-diagnostics-show-template-tree : $(jln_env_diagnostics_show_template_tree) ] ;
  local x_elide_type = [ jln-get-value $(ps) : jln-elide-type : $(jln_env_elide_type) ] ;
  local x_exceptions = [ jln-get-value2 $(ps) : jln-exceptions : jln-exceptions-incidental : $(jln_env_exceptions) ] ;
  local x_fix_compiler_error = [ jln-get-value $(ps) : jln-fix-compiler-error : $(jln_env_fix_compiler_error) ] ;
  local x_float_sanitizers = [ jln-get-value2 $(ps) : jln-float-sanitizers : jln-float-sanitizers-incidental : $(jln_env_float_sanitizers) ] ;
  local x_integer_sanitizers = [ jln-get-value2 $(ps) : jln-integer-sanitizers : jln-integer-sanitizers-incidental : $(jln_env_integer_sanitizers) ] ;
  local x_linker = [ jln-get-value $(ps) : jln-linker : $(jln_env_linker) ] ;
  local x_lto = [ jln-get-value2 $(ps) : jln-lto : jln-lto-incidental : $(jln_env_lto) ] ;
  local x_msvc_conformance = [ jln-get-value2 $(ps) : jln-msvc-conformance : jln-msvc-conformance-incidental : $(jln_env_msvc_conformance) ] ;
  local x_msvc_crt_secure_no_warnings = [ jln-get-value $(ps) : jln-msvc-crt-secure-no-warnings : $(jln_env_msvc_crt_secure_no_warnings) ] ;
  local x_msvc_isystem = [ jln-get-value $(ps) : jln-msvc-isystem : $(jln_env_msvc_isystem) ] ;
  local x_msvc_isystem_with_template_from_non_external = [ jln-get-value $(ps) : jln-msvc-isystem-with-template-from-non-external : $(jln_env_msvc_isystem_with_template_from_non_external) ] ;
  local x_noexcept_warnings = [ jln-get-value $(ps) : jln-noexcept-warnings : $(jln_env_noexcept_warnings) ] ;
  local x_optimization = [ jln-get-value2 $(ps) : jln-optimization : jln-optimization-incidental : $(jln_env_optimization) ] ;
  local x_other_sanitizers = [ jln-get-value2 $(ps) : jln-other-sanitizers : jln-other-sanitizers-incidental : $(jln_env_other_sanitizers) ] ;
  local x_pedantic = [ jln-get-value2 $(ps) : jln-pedantic : jln-pedantic-incidental : $(jln_env_pedantic) ] ;
  local x_pie = [ jln-get-value2 $(ps) : jln-pie : jln-pie-incidental : $(jln_env_pie) ] ;
  local x_relro = [ jln-get-value2 $(ps) : jln-relro : jln-relro-incidental : $(jln_env_relro) ] ;
  local x_reproducible_build_warnings = [ jln-get-value $(ps) : jln-reproducible-build-warnings : $(jln_env_reproducible_build_warnings) ] ;
  local x_rtti = [ jln-get-value2 $(ps) : jln-rtti : jln-rtti-incidental : $(jln_env_rtti) ] ;
  local x_sanitizers = [ jln-get-value2 $(ps) : jln-sanitizers : jln-sanitizers-incidental : $(jln_env_sanitizers) ] ;
  local x_shadow_warnings = [ jln-get-value $(ps) : jln-shadow-warnings : $(jln_env_shadow_warnings) ] ;
  local x_stack_protector = [ jln-get-value2 $(ps) : jln-stack-protector : jln-stack-protector-incidental : $(jln_env_stack_protector) ] ;
  local x_stl_debug = [ jln-get-value2 $(ps) : jln-stl-debug : jln-stl-debug-incidental : $(jln_env_stl_debug) ] ;
  local x_stl_fix = [ jln-get-value2 $(ps) : jln-stl-fix : jln-stl-fix-incidental : $(jln_env_stl_fix) ] ;
  local x_suggestions = [ jln-get-value $(ps) : jln-suggestions : $(jln_env_suggestions) ] ;
  local x_switch_warnings = [ jln-get-value $(ps) : jln-switch-warnings : $(jln_env_switch_warnings) ] ;
  local x_warnings = [ jln-get-value $(ps) : jln-warnings : $(jln_env_warnings) ] ;
  local x_warnings_as_error = [ jln-get-value2 $(ps) : jln-warnings-as-error : jln-warnings-as-error-incidental : $(jln_env_warnings_as_error) ] ;
  local x_whole_program = [ jln-get-value2 $(ps) : jln-whole-program : jln-whole-program-incidental : $(jln_env_whole_program) ] ;
  local x_windows_abi_compatibility_warnings = [ jln-get-value $(ps) : jln-windows-abi-compatibility-warnings : $(jln_env_windows_abi_compatibility_warnings) ] ;
  local x_windows_bigobj = [ jln-get-value2 $(ps) : jln-windows-bigobj : jln-windows-bigobj-incidental : $(jln_env_windows_bigobj) ] ;

  if (  $(toolset) = "gcc" || $(toolset) = "clang" || $(toolset) = "clang-cl"  )
  {
    if ( $(x_warnings) != "default" )
    {
      if ( $(x_warnings) = "off" )
      {
        flags +=
          <cxxflags>"-w"
        ;
      }
      else
      {
        if $(toolset) = "gcc"
        {
          flags +=
            <cxxflags>"-Wall"
            <cxxflags>"-Wextra"
            <cxxflags>"-Wcast-align"
            <cxxflags>"-Wcast-qual"
            <cxxflags>"-Wdisabled-optimization"
            <cxxflags>"-Wfloat-equal"
            <cxxflags>"-Wformat-security"
            <cxxflags>"-Wformat=2"
            <cxxflags>"-Winvalid-pch"
            <cxxflags>"-Wmissing-include-dirs"
            <cxxflags>"-Wpacked"
            <cxxflags>"-Wredundant-decls"
            <cxxflags>"-Wundef"
            <cxxflags>"-Wunused-macros"
            <cxxflags>"-Wpointer-arith"
            <cxxflags>"-Wmissing-declarations"
            <cxxflags>"-Wnon-virtual-dtor"
            <cxxflags>"-Wold-style-cast"
            <cxxflags>"-Woverloaded-virtual"
          ;
          if ( $(x_switch_warnings) != "default" )
          {
            if ( $(x_switch_warnings) = "on" )
            {
              flags +=
                <cxxflags>"-Wswitch"
              ;
            }
            else
            {
              if ( $(x_switch_warnings) = "exhaustive-enum" )
              {
                flags +=
                  <cxxflags>"-Wswitch-enum"
                ;
              }
              else
              {
                if ( $(x_switch_warnings) = "mandatory-default" )
                {
                  flags +=
                    <cxxflags>"-Wswitch-default"
                  ;
                }
                else
                {
                  if ( $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default" )
                  {
                    flags +=
                      <cxxflags>"-Wswitch-default"
                      <cxxflags>"-Wswitch-enum"
                    ;
                  }
                  else
                  {
                    flags +=
                      <cxxflags>"-Wno-switch"
                    ;
                  }
                }
              }
            }
          }
          if ! (  $(version) < "04.07"  )
          {
            flags +=
              <cxxflags>"-Wsuggest-attribute=noreturn"
              <cxxflags>"-Wzero-as-null-pointer-constant"
              <cxxflags>"-Wlogical-op"
              <cxxflags>"-Wvector-operation-performance"
              <cxxflags>"-Wdouble-promotion"
              <cxxflags>"-Wtrampolines"
            ;
            if ! (  $(version) < "04.08"  )
            {
              flags +=
                <cxxflags>"-Wuseless-cast"
              ;
              if ! (  $(version) < "04.09"  )
              {
                flags +=
                  <cxxflags>"-Wconditionally-supported"
                  <cxxflags>"-Wfloat-conversion"
                ;
                if ! (  $(version) < "05.01"  )
                {
                  flags +=
                    <cxxflags>"-Wformat-signedness"
                    <cxxflags>"-Warray-bounds=2"
                    <cxxflags>"-Wstrict-null-sentinel"
                    <cxxflags>"-Wsuggest-override"
                  ;
                  if ! (  $(version) < "06.01"  )
                  {
                    flags +=
                      <cxxflags>"-Wduplicated-cond"
                      <cxxflags>"-Wnull-dereference"
                    ;
                    if ! (  $(version) < "07.00"  )
                    {
                      flags +=
                        <cxxflags>"-Waligned-new"
                      ;
                      if ! (  $(version) < "07.01"  )
                      {
                        flags +=
                          <cxxflags>"-Walloc-zero"
                          <cxxflags>"-Walloca"
                          <cxxflags>"-Wformat-overflow=2"
                          <cxxflags>"-Wduplicated-branches"
                        ;
                        if ! (  $(version) < "08.00"  )
                        {
                          flags +=
                            <cxxflags>"-Wclass-memaccess"
                          ;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          flags +=
            <cxxflags>"-Weverything"
            <cxxflags>"-Wno-documentation"
            <cxxflags>"-Wno-documentation-unknown-command"
            <cxxflags>"-Wno-newline-eof"
            <cxxflags>"-Wno-c++98-compat"
            <cxxflags>"-Wno-c++98-compat-pedantic"
            <cxxflags>"-Wno-padded"
            <cxxflags>"-Wno-global-constructors"
            <cxxflags>"-Wno-weak-vtables"
            <cxxflags>"-Wno-exit-time-destructors"
          ;
          if ( $(x_switch_warnings) != "default" )
          {
            if (  ( $(x_switch_warnings) = "on" ) || ( $(x_switch_warnings) = "mandatory-default" )  )
            {
              flags +=
                <cxxflags>"-Wno-switch-enum"
              ;
            }
            else
            {
              if (  ( $(x_switch_warnings) = "exhaustive-enum" ) || ( $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default" )  )
              {
                flags +=
                  <cxxflags>"-Wswitch-enum"
                ;
              }
              else
              {
                if ( $(x_switch_warnings) = "off" )
                {
                  flags +=
                    <cxxflags>"-Wno-switch"
                    <cxxflags>"-Wno-switch-enum"
                  ;
                }
              }
            }
          }
          else
          {
            flags +=
              <cxxflags>"-Wno-switch"
              <cxxflags>"-Wno-switch-enum"
            ;
          }
          if ( $(x_covered_switch_default_warnings) != "default" )
          {
            if ( $(x_covered_switch_default_warnings) = "off" )
            {
              flags +=
                <cxxflags>"-Wno-covered-switch-default"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-Wcovered-switch-default"
              ;
            }
          }
          if ! (  $(version) < "03.09"  )
          {
            flags +=
              <cxxflags>"-Wno-undefined-var-template"
            ;
            if ! (  $(version) < "05.00"  )
            {
              flags +=
                <cxxflags>"-Wno-inconsistent-missing-destructor-override"
              ;
              if ! (  $(version) < "09.00"  )
              {
                flags +=
                  <cxxflags>"-Wno-ctad-maybe-unsupported"
                ;
                if ! (  $(version) < "10.00"  )
                {
                  flags +=
                    <cxxflags>"-Wno-c++20-compat"
                  ;
                  if ! (  $(version) < "11.00"  )
                  {
                    flags +=
                      <cxxflags>"-Wno-suggest-destructor-override"
                    ;
                  }
                }
              }
            }
          }
        }
        if (  ( $(x_warnings) = "strict" ) || ( $(x_warnings) = "very-strict" )  )
        {
          if (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  )
          {
            flags +=
              <cxxflags>"-Wcast-align=strict"
            ;
          }
        }
      }
    }
    if ( $(x_windows_abi_compatibility_warnings) != "default" )
    {
      if (  (  $(toolset) = "gcc" && ! (  $(version) < "10.00"  )  ) || $(toolset) = "clang" || $(toolset) = "clang-cl"  )
      {
        if ( $(x_windows_abi_compatibility_warnings) = "on" )
        {
          flags +=
            <cxxflags>"-Wmismatched-tags"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wno-mismatched-tags"
          ;
        }
      }
    }
    if ( $(x_warnings_as_error) != "default" )
    {
      if ( $(x_warnings_as_error) = "on" )
      {
        flags +=
          <cxxflags>"-Werror"
        ;
      }
      else
      {
        if ( $(x_warnings_as_error) = "basic" )
        {
          flags +=
            <cxxflags>"-Werror=return-type"
            <cxxflags>"-Werror=init-self"
          ;
          if $(toolset) = "gcc"
          {
            flags +=
              <cxxflags>"-Werror=div-by-zero"
            ;
            if ! (  $(version) < "05.01"  )
            {
              flags +=
                <cxxflags>"-Werror=array-bounds"
                <cxxflags>"-Werror=logical-op"
                <cxxflags>"-Werror=logical-not-parentheses"
              ;
              if ! (  $(version) < "07.00"  )
              {
                flags +=
                  <cxxflags>"-Werror=literal-suffix"
                ;
              }
            }
          }
          else
          {
            if (  $(toolset) = "clang" || $(toolset) = "clang-cl"  )
            {
              flags +=
                <cxxflags>"-Werror=array-bounds"
                <cxxflags>"-Werror=division-by-zero"
              ;
              if ! (  $(version) < "03.04"  )
              {
                flags +=
                  <cxxflags>"-Werror=logical-not-parentheses"
                ;
                if ! (  $(version) < "03.06"  )
                {
                  flags +=
                    <cxxflags>"-Werror=delete-incomplete"
                  ;
                  if ! (  $(version) < "06.00"  )
                  {
                    flags +=
                      <cxxflags>"-Werror=user-defined-literals"
                    ;
                    if ! (  $(version) < "07.00"  )
                    {
                      flags +=
                        <cxxflags>"-Werror=dynamic-class-memaccess"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          flags +=
            <cxxflags>"-Wno-error"
          ;
        }
      }
    }
    if ( $(x_suggestions) != "default" )
    {
      if ! (  ( $(x_suggestions) = "off" )  )
      {
        if $(toolset) = "gcc"
        {
          flags +=
            <cxxflags>"-Wsuggest-attribute=pure"
            <cxxflags>"-Wsuggest-attribute=const"
          ;
          if ! (  $(version) < "05.00"  )
          {
            flags +=
              <cxxflags>"-Wsuggest-final-types"
              <cxxflags>"-Wsuggest-final-methods"
            ;
            if ! (  $(version) < "05.01"  )
            {
              flags +=
                <cxxflags>"-Wnoexcept"
              ;
            }
          }
        }
      }
    }
    if ( $(x_sanitizers) != "default" )
    {
      if ( $(x_sanitizers) = "off" )
      {
        flags +=
          <cxxflags>"-fno-sanitize=all"
          <linkflags>"-fno-sanitize=all"
        ;
      }
      else
      {
        if $(toolset) = "clang-cl"
        {
          flags +=
            <cxxflags>"-fsanitize=undefined"
            <cxxflags>"-fsanitize=address"
            <cxxflags>"-fsanitize-address-use-after-scope"
          ;
        }
        else
        {
          if $(toolset) = "clang"
          {
            if ! (  $(version) < "03.01"  )
            {
              flags +=
                <cxxflags>"-fsanitize=undefined"
                <cxxflags>"-fsanitize=address"
                <cxxflags>"-fsanitize-address-use-after-scope"
                <cxxflags>"-fno-omit-frame-pointer"
                <cxxflags>"-fno-optimize-sibling-calls"
                <linkflags>"-fsanitize=undefined"
                <linkflags>"-fsanitize=address"
              ;
              if ! (  $(version) < "03.04"  )
              {
                flags +=
                  <cxxflags>"-fsanitize=leak"
                  <linkflags>"-fsanitize=leak"
                ;
              }
              if ! (  $(version) < "06.00"  )
              {
                if ( $(x_stack_protector) != "default" )
                {
                  if ! (  ( $(x_stack_protector) = "off" )  )
                  {
                    flags +=
                      <cxxflags>"-fsanitize-minimal-runtime"
                    ;
                  }
                }
              }
            }
          }
          else
          {
            if ! (  $(version) < "04.08"  )
            {
              flags +=
                <cxxflags>"-fsanitize=address"
                <cxxflags>"-fno-omit-frame-pointer"
                <cxxflags>"-fno-optimize-sibling-calls"
                <linkflags>"-fsanitize=address"
              ;
              if ! (  $(version) < "04.09"  )
              {
                flags +=
                  <cxxflags>"-fsanitize=undefined"
                  <cxxflags>"-fsanitize=leak"
                  <linkflags>"-fsanitize=undefined"
                  <linkflags>"-fsanitize=leak"
                ;
              }
            }
          }
        }
      }
    }
    if ( $(x_control_flow) != "default" )
    {
      if ( $(x_control_flow) = "off" )
      {
        if (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  )
        {
          flags +=
            <cxxflags>"-fcf-protection=none"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-sanitize=cfi"
            <cxxflags>"-fcf-protection=none"
            <cxxflags>"-fno-sanitize-cfi-cross-dso"
            <linkflags>"-fno-sanitize=cfi"
          ;
        }
      }
      else
      {
        if (  (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  ) || ! (  $(toolset) = "gcc"  )  )
        {
          if ( $(x_control_flow) = "branch" )
          {
            flags +=
              <cxxflags>"-fcf-protection=branch"
            ;
          }
          else
          {
            if ( $(x_control_flow) = "return" )
            {
              flags +=
                <cxxflags>"-fcf-protection=return"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-fcf-protection=full"
              ;
            }
          }
          if (  ( $(x_control_flow) = "allow-bugs" ) && $(toolset) = "clang"  )
          {
            flags +=
              <cxxflags>"-fsanitize=cfi"
              <cxxflags>"-fvisibility=hidden"
              <cxxflags>"-flto"
              <linkflags>"-fsanitize=cfi"
              <linkflags>"-flto"
            ;
          }
        }
      }
    }
    if ( $(x_color) != "default" )
    {
      if (  (  $(toolset) = "gcc" && ! (  $(version) < "04.09"  )  ) || $(toolset) = "clang" || $(toolset) = "clang-cl"  )
      {
        if ( $(x_color) = "auto" )
        {
          flags +=
            <cxxflags>"-fdiagnostics-color=auto"
          ;
        }
        else
        {
          if ( $(x_color) = "never" )
          {
            flags +=
              <cxxflags>"-fdiagnostics-color=never"
            ;
          }
          else
          {
            if ( $(x_color) = "always" )
            {
              flags +=
                <cxxflags>"-fdiagnostics-color=always"
              ;
            }
          }
        }
      }
    }
    if ( $(x_reproducible_build_warnings) != "default" )
    {
      if (  $(toolset) = "gcc" && ! (  $(version) < "04.09"  )  )
      {
        if ( $(x_reproducible_build_warnings) = "on" )
        {
          flags +=
            <cxxflags>"-Wdate-time"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wno-date-time"
          ;
        }
      }
    }
    if ( $(x_diagnostics_format) != "default" )
    {
      if ( $(x_diagnostics_format) = "fixits" )
      {
        if (  (  $(toolset) = "gcc" && ! (  $(version) < "07.00"  )  ) || (  $(toolset) = "clang" && ! (  $(version) < "05.00"  )  ) || (  $(toolset) = "clang-cl" && ! (  $(version) < "05.00"  )  )  )
        {
          flags +=
            <cxxflags>"-fdiagnostics-parseable-fixits"
          ;
        }
      }
      else
      {
        if ( $(x_diagnostics_format) = "patch" )
        {
          if (  $(toolset) = "gcc" && ! (  $(version) < "07.00"  )  )
          {
            flags +=
              <cxxflags>"-fdiagnostics-generate-patch"
            ;
          }
        }
        else
        {
          if ( $(x_diagnostics_format) = "print-source-range-info" )
          {
            if $(toolset) = "clang"
            {
              flags +=
                <cxxflags>"-fdiagnostics-print-source-range-info"
              ;
            }
          }
        }
      }
    }
    if ( $(x_fix_compiler_error) != "default" )
    {
      if ( $(x_fix_compiler_error) = "on" )
      {
        if $(toolset) = "gcc"
        {
          if ! (  $(version) < "04.07"  )
          {
            flags +=
              <cxxflags>"-Werror=narrowing"
            ;
            if ! (  $(version) < "07.01"  )
            {
              flags +=
                <cxxflags>"-Werror=literal-suffix"
              ;
            }
          }
        }
        flags +=
          <cxxflags>"-Werror=write-strings"
        ;
      }
      else
      {
        if (  $(toolset) = "clang" || $(toolset) = "clang-cl"  )
        {
          flags +=
            <cxxflags>"-Wno-error=c++11-narrowing"
            <cxxflags>"-Wno-reserved-user-defined-literal"
          ;
        }
      }
    }
    if ( $(x_linker) != "default" )
    {
      if ( $(x_linker) = "native" )
      {
        if $(toolset) = "gcc"
        {
          flags +=
            <linkflags>"-fuse-ld=gold"
          ;
        }
        else
        {
          flags +=
            <linkflags>"-fuse-ld=lld"
          ;
        }
      }
      else
      {
        if ( $(x_linker) = "bfd" )
        {
          flags +=
            <linkflags>"-fuse-ld=bfd"
          ;
        }
        else
        {
          if (  ( $(x_linker) = "gold" ) || (  $(toolset) = "gcc" && ! (  ! (  $(version) < "09.00"  )  )  )  )
          {
            flags +=
              <linkflags>"-fuse-ld=gold"
            ;
          }
          else
          {
            if ( $(x_lto) != "default" )
            {
              if (  ! (  ( $(x_lto) = "off" )  ) && $(toolset) = "gcc"  )
              {
                flags +=
                  <linkflags>"-fuse-ld=gold"
                ;
              }
              else
              {
                flags +=
                  <linkflags>"-fuse-ld=lld"
                ;
              }
            }
            else
            {
              flags +=
                <linkflags>"-fuse-ld=lld"
              ;
            }
          }
        }
      }
    }
    if ( $(x_lto) != "default" )
    {
      if ( $(x_lto) = "off" )
      {
        flags +=
          <cxxflags>"-fno-lto"
          <linkflags>"-fno-lto"
        ;
      }
      else
      {
        if $(toolset) = "gcc"
        {
          flags +=
            <cxxflags>"-flto"
            <linkflags>"-flto"
          ;
          if ! (  $(version) < "05.00"  )
          {
            if ( $(x_warnings) != "default" )
            {
              if ! (  ( $(x_warnings) = "off" )  )
              {
                flags +=
                  <cxxflags>"-flto-odr-type-merging"
                  <linkflags>"-flto-odr-type-merging"
                ;
              }
            }
            if ( $(x_lto) = "fat" )
            {
              flags +=
                <cxxflags>"-ffat-lto-objects"
              ;
            }
            else
            {
              if ( $(x_lto) = "thin" )
              {
                flags +=
                  <linkflags>"-fuse-linker-plugin"
                ;
              }
            }
          }
        }
        else
        {
          if $(toolset) = "clang-cl"
          {
            flags +=
              <linkflags>"-fuse-ld=lld"
            ;
          }
          if (  ( $(x_lto) = "thin" ) && ! (  $(version) < "06.00"  )  )
          {
            flags +=
              <cxxflags>"-flto=thin"
              <linkflags>"-flto=thin"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-flto"
              <linkflags>"-flto"
            ;
          }
        }
      }
    }
    if ( $(x_shadow_warnings) != "default" )
    {
      if ( $(x_shadow_warnings) = "off" )
      {
        flags +=
          <cxxflags>"-Wno-shadow"
        ;
        if (  $(toolset) = "clang-cl" || (  $(toolset) = "clang" && ! (  $(version) < "08.00"  )  )  )
        {
          flags +=
            <cxxflags>"-Wno-shadow-field"
          ;
        }
      }
      else
      {
        if ( $(x_shadow_warnings) = "on" )
        {
          flags +=
            <cxxflags>"-Wshadow"
          ;
        }
        else
        {
          if ( $(x_shadow_warnings) = "all" )
          {
            if $(toolset) = "gcc"
            {
              flags +=
                <cxxflags>"-Wshadow"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-Wshadow-all"
              ;
            }
          }
          else
          {
            if (  $(toolset) = "gcc" && ! (  $(version) < "07.01"  )  )
            {
              if ( $(x_shadow_warnings) = "local" )
              {
                flags +=
                  <cxxflags>"-Wshadow=local"
                ;
              }
              else
              {
                if ( $(x_shadow_warnings) = "compatible-local" )
                {
                  flags +=
                    <cxxflags>"-Wshadow=compatible-local"
                  ;
                }
              }
            }
          }
        }
      }
    }
    if ( $(x_float_sanitizers) != "default" )
    {
      if (  (  $(toolset) = "gcc" && ! (  $(version) < "05.00"  )  ) || (  $(toolset) = "clang" && ! (  $(version) < "05.00"  )  ) || $(toolset) = "clang-cl"  )
      {
        if ( $(x_float_sanitizers) = "on" )
        {
          flags +=
            <cxxflags>"-fsanitize=float-divide-by-zero"
            <cxxflags>"-fsanitize=float-cast-overflow"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-sanitize=float-divide-by-zero"
            <cxxflags>"-fno-sanitize=float-cast-overflow"
          ;
        }
      }
    }
    if ( $(x_integer_sanitizers) != "default" )
    {
      if (  (  $(toolset) = "clang" && ! (  $(version) < "05.00"  )  ) || $(toolset) = "clang-cl"  )
      {
        if ( $(x_integer_sanitizers) = "on" )
        {
          flags +=
            <cxxflags>"-fsanitize=integer"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-sanitize=integer"
          ;
        }
      }
      else
      {
        if (  $(toolset) = "gcc" && ! (  $(version) < "04.09"  )  )
        {
          if ( $(x_integer_sanitizers) = "on" )
          {
            flags +=
              <cxxflags>"-ftrapv"
              <cxxflags>"-fsanitize=undefined"
            ;
          }
        }
      }
    }
  }
  if (  $(toolset) = "gcc" || $(toolset) = "clang" || $(toolset) = "clang-cl" || $(toolset) = "intel' && $(original_version) = 'linux"  )
  {
    if ( $(x_conversion_warnings) != "default" )
    {
      if ( $(x_conversion_warnings) = "on" )
      {
        flags +=
          <cxxflags>"-Wconversion"
          <cxxflags>"-Wsign-compare"
          <cxxflags>"-Wsign-conversion"
        ;
      }
      else
      {
        if ( $(x_conversion_warnings) = "conversion" )
        {
          flags +=
            <cxxflags>"-Wconversion"
          ;
        }
        else
        {
          if ( $(x_conversion_warnings) = "sign" )
          {
            flags +=
              <cxxflags>"-Wsign-compare"
              <cxxflags>"-Wsign-conversion"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-Wno-conversion"
              <cxxflags>"-Wno-sign-compare"
              <cxxflags>"-Wno-sign-conversion"
            ;
          }
        }
      }
    }
  }
  if (  $(toolset) = "gcc" || $(toolset) = "clang"  )
  {
    if ( $(x_coverage) != "default" )
    {
      if ( $(x_coverage) = "on" )
      {
        flags +=
          <cxxflags>"--coverage"
          <linkflags>"--coverage"
        ;
        if $(toolset) = "clang"
        {
          flags +=
            <linkflags>"-lprofile_rt"
          ;
        }
      }
    }
    if ( $(x_debug) != "default" )
    {
      if ( $(x_debug) = "off" )
      {
        flags +=
          <cxxflags>"-g0"
        ;
      }
      else
      {
        if ( $(x_debug) = "gdb" )
        {
          flags +=
            <cxxflags>"-ggdb"
          ;
        }
        else
        {
          if $(toolset) = "clang"
          {
            if ( $(x_debug) = "line-tables-only" )
            {
              flags +=
                <cxxflags>"-gline-tables-only"
              ;
            }
            else
            {
              if ( $(x_debug) = "lldb" )
              {
                flags +=
                  <cxxflags>"-glldb"
                ;
              }
              else
              {
                if ( $(x_debug) = "sce" )
                {
                  flags +=
                    <cxxflags>"-gsce"
                  ;
                }
                else
                {
                  flags +=
                    <cxxflags>"-g"
                  ;
                }
              }
            }
          }
          else
          {
            flags +=
              <cxxflags>"-g"
            ;
          }
        }
      }
    }
    if ( $(x_optimization) != "default" )
    {
      if ( $(x_optimization) = "0" )
      {
        flags +=
          <cxxflags>"-O0"
          <linkflags>"-O0"
        ;
      }
      else
      {
        if ( $(x_optimization) = "g" )
        {
          flags +=
            <cxxflags>"-Og"
            <linkflags>"-Og"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-DNDEBUG"
            <linkflags>"-Wl,-O1"
          ;
          if ( $(x_optimization) = "size" )
          {
            flags +=
              <cxxflags>"-Os"
              <linkflags>"-Os"
            ;
          }
          else
          {
            if ( $(x_optimization) = "z" )
            {
              if (  $(toolset) = "clang" || $(toolset) = "clang-cl"  )
              {
                flags +=
                  <cxxflags>"-Oz"
                  <linkflags>"-Oz"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"-Os"
                  <linkflags>"-Os"
                ;
              }
            }
            else
            {
              if ( $(x_optimization) = "fast" )
              {
                flags +=
                  <cxxflags>"-Ofast"
                  <linkflags>"-Ofast"
                ;
              }
              else
              {
                if ( $(x_optimization) = "1" )
                {
                  flags +=
                    <cxxflags>"-O1"
                    <linkflags>"-O1"
                  ;
                }
                else
                {
                  if ( $(x_optimization) = "2" )
                  {
                    flags +=
                      <cxxflags>"-O2"
                      <linkflags>"-O2"
                    ;
                  }
                  else
                  {
                    if ( $(x_optimization) = "3" )
                    {
                      flags +=
                        <cxxflags>"-O3"
                        <linkflags>"-O3"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ( $(x_cpu) != "default" )
    {
      if ( $(x_cpu) = "generic" )
      {
        flags +=
          <cxxflags>"-mtune=generic"
          <linkflags>"-mtune=generic"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-march=native"
          <cxxflags>"-mtune=native"
          <linkflags>"-march=native"
          <linkflags>"-mtune=native"
        ;
      }
    }
    if ( $(x_whole_program) != "default" )
    {
      if ( $(x_whole_program) = "off" )
      {
        flags +=
          <cxxflags>"-fno-whole-program"
        ;
        if (  $(toolset) = "clang" && ! (  $(version) < "03.09"  )  )
        {
          flags +=
            <cxxflags>"-fno-whole-program-vtables"
            <linkflags>"-fno-whole-program-vtables"
          ;
        }
      }
      else
      {
        if $(linker) = "ld64"
        {
          flags +=
            <linkflags>"-Wl,-dead_strip"
            <linkflags>"-Wl,-S"
          ;
        }
        else
        {
          flags +=
            <linkflags>"-s"
          ;
          if ( $(x_whole_program) = "strip-all" )
          {
            flags +=
              <linkflags>"-Wl,--gc-sections"
              <linkflags>"-Wl,--strip-all"
            ;
          }
        }
        if $(toolset) = "gcc"
        {
          flags +=
            <cxxflags>"-fwhole-program"
            <linkflags>"-fwhole-program"
          ;
        }
        else
        {
          if $(toolset) = "clang"
          {
            if ! (  $(version) < "03.09"  )
            {
              if ( $(x_lto) != "default" )
              {
                if ! (  ( $(x_lto) = "off" )  )
                {
                  flags +=
                    <cxxflags>"-fwhole-program-vtables"
                    <linkflags>"-fwhole-program-vtables"
                  ;
                }
              }
              if ! (  $(version) < "07.00"  )
              {
                flags +=
                  <cxxflags>"-fforce-emit-vtables"
                  <linkflags>"-fforce-emit-vtables"
                ;
              }
            }
          }
        }
      }
    }
    if ( $(x_pedantic) != "default" )
    {
      if ! (  ( $(x_pedantic) = "off" )  )
      {
        flags +=
          <cxxflags>"-pedantic"
        ;
        if ( $(x_pedantic) = "as-error" )
        {
          flags +=
            <cxxflags>"-pedantic-errors"
          ;
        }
      }
    }
    if ( $(x_stack_protector) != "default" )
    {
      if ( $(x_stack_protector) = "off" )
      {
        flags +=
          <cxxflags>"-Wno-stack-protector"
          <cxxflags>"-U_FORTIFY_SOURCE"
          <linkflags>"-Wno-stack-protector"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-D_FORTIFY_SOURCE=2"
          <cxxflags>"-Wstack-protector"
        ;
        if ( $(x_stack_protector) = "strong" )
        {
          if $(toolset) = "gcc"
          {
            if ! (  $(version) < "04.09"  )
            {
              flags +=
                <cxxflags>"-fstack-protector-strong"
                <linkflags>"-fstack-protector-strong"
              ;
              if ! (  $(version) < "08.00"  )
              {
                flags +=
                  <cxxflags>"-fstack-clash-protection"
                  <linkflags>"-fstack-clash-protection"
                ;
              }
            }
          }
          else
          {
            if $(toolset) = "clang"
            {
              flags +=
                <cxxflags>"-fstack-protector-strong"
                <cxxflags>"-fsanitize=safe-stack"
                <linkflags>"-fstack-protector-strong"
                <linkflags>"-fsanitize=safe-stack"
              ;
              if ! (  $(version) < "11.00"  )
              {
                flags +=
                  <cxxflags>"-fstack-clash-protection"
                  <linkflags>"-fstack-clash-protection"
                ;
              }
            }
          }
        }
        else
        {
          if ( $(x_stack_protector) = "all" )
          {
            flags +=
              <cxxflags>"-fstack-protector-all"
              <linkflags>"-fstack-protector-all"
            ;
            if (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  )
            {
              flags +=
                <cxxflags>"-fstack-clash-protection"
                <linkflags>"-fstack-clash-protection"
              ;
            }
            else
            {
              if $(toolset) = "clang"
              {
                flags +=
                  <cxxflags>"-fsanitize=safe-stack"
                  <linkflags>"-fsanitize=safe-stack"
                ;
                if ! (  $(version) < "11.00"  )
                {
                  flags +=
                    <cxxflags>"-fstack-clash-protection"
                    <linkflags>"-fstack-clash-protection"
                  ;
                }
              }
            }
          }
          else
          {
            flags +=
              <cxxflags>"-fstack-protector"
              <linkflags>"-fstack-protector"
            ;
          }
        }
        if $(toolset) = "clang"
        {
          flags +=
            <cxxflags>"-fsanitize=shadow-call-stack"
            <linkflags>"-fsanitize=shadow-call-stack"
          ;
        }
      }
    }
    if ( $(x_relro) != "default" )
    {
      if ( $(x_relro) = "off" )
      {
        flags +=
          <linkflags>"-Wl,-z,norelro"
        ;
      }
      else
      {
        if ( $(x_relro) = "on" )
        {
          flags +=
            <linkflags>"-Wl,-z,relro"
          ;
        }
        else
        {
          if ( $(x_relro) = "full" )
          {
            flags +=
              <linkflags>"-Wl,-z,relro,-z,now,-z,noexecstack"
            ;
            if ( $(x_linker) != "default" )
            {
              if ! (  (  ( $(x_linker) = "gold" ) || (  $(toolset) = "gcc" && ! (  ! (  $(version) < "09.00"  )  )  ) || (  ( $(x_linker) = "native" ) && $(toolset) = "gcc"  )  )  )
              {
                flags +=
                  <linkflags>"-Wl,-z,separate-code"
                ;
              }
            }
          }
        }
      }
    }
    if ( $(x_pie) != "default" )
    {
      if ( $(x_pie) = "off" )
      {
        flags +=
          <linkflags>"-no-pic"
        ;
      }
      else
      {
        if ( $(x_pie) = "on" )
        {
          flags +=
            <linkflags>"-pie"
          ;
        }
        else
        {
          if ( $(x_pie) = "static" )
          {
            flags +=
              <linkflags>"-static-pie"
            ;
          }
          else
          {
            if ( $(x_pie) = "fpie" )
            {
              flags +=
                <cxxflags>"-fpie"
              ;
            }
            else
            {
              if ( $(x_pie) = "fpic" )
              {
                flags +=
                  <cxxflags>"-fpic"
                ;
              }
              else
              {
                if ( $(x_pie) = "fPIE" )
                {
                  flags +=
                    <cxxflags>"-fPIE"
                  ;
                }
                else
                {
                  if ( $(x_pie) = "fPIC" )
                  {
                    flags +=
                      <cxxflags>"-fPIC"
                    ;
                  }
                }
              }
            }
          }
        }
      }
    }
    if ( $(x_stl_debug) != "default" )
    {
      if ! (  ( $(x_stl_debug) = "off" )  )
      {
        if ( $(x_stl_debug) = "assert-as-exception" )
        {
          flags +=
            <cxxflags>"-D_LIBCPP_DEBUG_USE_EXCEPTIONS"
          ;
        }
        if (  ( $(x_stl_debug) = "allow-broken-abi" ) || ( $(x_stl_debug) = "allow-broken-abi-and-bugs" )  )
        {
          if $(toolset) = "clang"
          {
            if (  ! (  $(version) < "08.00"  ) || ( $(x_stl_debug) = "allow-broken-abi-and-bugs" )  )
            {
              flags +=
                <cxxflags>"-D_LIBCPP_DEBUG=1"
              ;
            }
          }
          flags +=
            <cxxflags>"-D_GLIBCXX_DEBUG"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-D_GLIBCXX_ASSERTIONS"
          ;
        }
        if ( $(x_pedantic) != "default" )
        {
          if ! (  ( $(x_pedantic) = "off" )  )
          {
            flags +=
              <cxxflags>"-D_GLIBCXX_DEBUG_PEDANTIC"
            ;
          }
        }
      }
    }
    if ( $(x_elide_type) != "default" )
    {
      if ( $(x_elide_type) = "on" )
      {
        if (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  )
        {
          flags +=
            <cxxflags>"-felide-type"
          ;
        }
      }
      else
      {
        if (  (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  ) || (  $(toolset) = "clang" && ! (  $(version) < "03.04"  )  )  )
        {
          flags +=
            <cxxflags>"-fno-elide-type"
          ;
        }
      }
    }
    if ( $(x_exceptions) != "default" )
    {
      if ( $(x_exceptions) = "on" )
      {
        flags +=
          <cxxflags>"-fexceptions"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-fno-exceptions"
        ;
      }
    }
    if ( $(x_rtti) != "default" )
    {
      if ( $(x_rtti) = "on" )
      {
        flags +=
          <cxxflags>"-frtti"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"-fno-rtti"
        ;
      }
    }
    if ( $(x_diagnostics_show_template_tree) != "default" )
    {
      if (  (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  ) || $(toolset) = "clang"  )
      {
        if ( $(x_diagnostics_show_template_tree) = "on" )
        {
          flags +=
            <cxxflags>"-fdiagnostics-show-template-tree"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-diagnostics-show-template-tree"
          ;
        }
      }
    }
    if ( $(x_other_sanitizers) != "default" )
    {
      if ( $(x_other_sanitizers) = "thread" )
      {
        flags +=
          <cxxflags>"-fsanitize=thread"
        ;
      }
      else
      {
        if ( $(x_other_sanitizers) = "memory" )
        {
          if (  $(toolset) = "clang" && ! (  $(version) < "05.00"  )  )
          {
            flags +=
              <cxxflags>"-fsanitize=memory"
            ;
          }
        }
        else
        {
          if ( $(x_other_sanitizers) = "pointer" )
          {
            if (  $(toolset) = "gcc" && ! (  $(version) < "08.00"  )  )
            {
              flags +=
                <cxxflags>"-fsanitize=pointer-compare"
                <cxxflags>"-fsanitize=pointer-subtract"
              ;
            }
          }
        }
      }
    }
    if ( $(x_noexcept_warnings) != "default" )
    {
      if (  $(toolset) = "gcc" && ! (  $(version) < "04.09"  )  )
      {
        if ( $(x_noexcept_warnings) = "on" )
        {
          flags +=
            <cxxflags>"-Wnoexcept"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wno-noexcept"
          ;
        }
      }
    }
  }
  if $(linker) = "lld-link"
  {
    if ( $(x_lto) != "default" )
    {
      if ( $(x_lto) = "off" )
      {
        flags +=
          <cxxflags>"-fno-lto"
        ;
      }
      else
      {
        if ( $(x_lto) = "thin" )
        {
          flags +=
            <cxxflags>"-flto=thin"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-flto"
            <linkflags>"-flto"
          ;
        }
      }
    }
    if ( $(x_whole_program) != "default" )
    {
      if ( $(x_whole_program) = "off" )
      {
        flags +=
          <cxxflags>"-fno-whole-program"
        ;
      }
      else
      {
        if ( $(x_lto) != "default" )
        {
          if ! (  ( $(x_lto) = "off" )  )
          {
            flags +=
              <cxxflags>"-fwhole-program-vtables"
              <linkflags>"-fwhole-program-vtables"
            ;
          }
        }
      }
    }
  }
  if (  $(toolset) = "msvc" || $(toolset) = "clang-cl" || $(toolset) = "intel' && $(original_version) = 'windows"  )
  {
    if ( $(x_exceptions) != "default" )
    {
      if ( $(x_exceptions) = "on" )
      {
        flags +=
          <cxxflags>"/EHsc"
          <cxxflags>"/D_HAS_EXCEPTIONS=1"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/EHs-"
          <cxxflags>"/D_HAS_EXCEPTIONS=0"
        ;
      }
    }
    if ( $(x_rtti) != "default" )
    {
      if ( $(x_rtti) = "on" )
      {
        flags +=
          <cxxflags>"/GR"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/GR-"
        ;
      }
    }
    if ( $(x_stl_debug) != "default" )
    {
      if ( $(x_stl_debug) = "off" )
      {
        flags +=
          <cxxflags>"/D_HAS_ITERATOR_DEBUGGING=0"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/D_DEBUG"
          <cxxflags>"/D_HAS_ITERATOR_DEBUGGING=1"
        ;
      }
    }
    if ! (  $(toolset) = "intel' && $(original_version) = 'windows"  )
    {
      if ( $(x_stl_fix) != "default" )
      {
        if ( $(x_stl_fix) = "on" )
        {
          flags +=
            <cxxflags>"/DNOMINMAX"
          ;
        }
      }
      if ( $(x_debug) != "default" )
      {
        if ( $(x_debug) = "off" )
        {
          flags +=
            <cxxflags>"/DEBUG:NONE"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/RTC1"
            <cxxflags>"/Od"
          ;
          if ( $(x_debug) = "on" )
          {
            flags +=
              <cxxflags>"/DEBUG"
            ;
          }
          else
          {
            if ( $(x_debug) = "line-tables-only" )
            {
              if $(toolset) = "clang-cl"
              {
                flags +=
                  <cxxflags>"-gline-tables-only"
                ;
              }
              flags +=
                <cxxflags>"/DEBUG:FASTLINK"
              ;
            }
          }
          if ( $(x_optimization) != "default" )
          {
            if ( $(x_optimization) = "g" )
            {
              flags +=
                <cxxflags>"/Zi"
              ;
            }
            else
            {
              if ( $(x_whole_program) != "default" )
              {
                if ( $(x_whole_program) = "off" )
                {
                  flags +=
                    <cxxflags>"/ZI"
                  ;
                }
                else
                {
                  flags +=
                    <cxxflags>"/Zi"
                  ;
                }
              }
              else
              {
                flags +=
                  <cxxflags>"/ZI"
                ;
              }
            }
          }
          else
          {
            if ( $(x_whole_program) != "default" )
            {
              if ( $(x_whole_program) = "off" )
              {
                flags +=
                  <cxxflags>"/ZI"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"/Zi"
                ;
              }
            }
            else
            {
              flags +=
                <cxxflags>"/ZI"
              ;
            }
          }
        }
      }
      if ( $(x_optimization) != "default" )
      {
        if ( $(x_optimization) = "0" )
        {
          flags +=
            <cxxflags>"/Ob0"
            <cxxflags>"/Od"
            <cxxflags>"/Oi-"
            <cxxflags>"/Oy-"
          ;
        }
        else
        {
          if ( $(x_optimization) = "g" )
          {
            flags +=
              <cxxflags>"/Ob1"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/DNDEBUG"
            ;
            if ( $(x_optimization) = "1" )
            {
              flags +=
                <cxxflags>"/O1"
              ;
            }
            else
            {
              if ( $(x_optimization) = "2" )
              {
                flags +=
                  <cxxflags>"/O2"
                ;
              }
              else
              {
                if ( $(x_optimization) = "3" )
                {
                  flags +=
                    <cxxflags>"/O2"
                  ;
                }
                else
                {
                  if (  ( $(x_optimization) = "size" ) || ( $(x_optimization) = "z" )  )
                  {
                    flags +=
                      <cxxflags>"/O1"
                      <cxxflags>"/GL"
                      <cxxflags>"/Gw"
                    ;
                  }
                  else
                  {
                    if ( $(x_optimization) = "fast" )
                    {
                      flags +=
                        <cxxflags>"/O2"
                        <cxxflags>"/fp:fast"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ( $(x_control_flow) != "default" )
      {
        if ( $(x_control_flow) = "off" )
        {
          flags +=
            <cxxflags>"/guard:cf-"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/guard:cf"
          ;
        }
      }
      if ( $(x_whole_program) != "default" )
      {
        if ( $(x_whole_program) = "off" )
        {
          flags +=
            <cxxflags>"/GL-"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/GL"
            <cxxflags>"/Gw"
            <linkflags>"/LTCG"
          ;
          if ( $(x_whole_program) = "strip-all" )
          {
            flags +=
              <linkflags>"/OPT:REF"
            ;
          }
        }
      }
      if ( $(x_pedantic) != "default" )
      {
        if ! (  ( $(x_pedantic) = "off" )  )
        {
          flags +=
            <cxxflags>"/permissive-"
            <cxxflags>"/Zc:__cplusplus"
          ;
        }
      }
      if ( $(x_stack_protector) != "default" )
      {
        if ( $(x_stack_protector) = "off" )
        {
          flags +=
            <cxxflags>"/GS-"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/GS"
            <cxxflags>"/sdl"
          ;
          if ( $(x_stack_protector) = "strong" )
          {
            flags +=
              <cxxflags>"/RTC1"
            ;
            if (  $(toolset) = "msvc" && ! (  $(version) < "16.07"  )  )
            {
              flags +=
                <cxxflags>"/guard:ehcont"
                <linkflags>"/CETCOMPAT"
              ;
            }
          }
          else
          {
            if ( $(x_stack_protector) = "all" )
            {
              flags +=
                <cxxflags>"/RTC1"
                <cxxflags>"/RTCc"
              ;
            }
          }
        }
      }
    }
  }
  if $(toolset) = "msvc"
  {
    if ( $(x_windows_bigobj) != "default" )
    {
      flags +=
        <cxxflags>"/bigobj"
      ;
    }
    if ( $(x_msvc_conformance) != "default" )
    {
      if (  ( $(x_msvc_conformance) = "all" ) || ( $(x_msvc_conformance) = "all-without-throwing-new" )  )
      {
        flags +=
          <cxxflags>"/Zc:inline"
          <cxxflags>"/Zc:referenceBinding"
        ;
        if ( $(x_msvc_conformance) = "all" )
        {
          flags +=
            <cxxflags>"/Zc:throwingNew"
          ;
        }
        if ! (  $(version) < "15.06"  )
        {
          flags +=
            <cxxflags>"/Zc:externConstexpr"
          ;
          if ! (  $(version) < "16.05"  )
          {
            flags +=
              <cxxflags>"/Zc:preprocessor"
            ;
            if ! (  $(version) < "16.08"  )
            {
              flags +=
                <cxxflags>"/Zc:lambda"
              ;
            }
          }
        }
      }
    }
    if ( $(x_msvc_crt_secure_no_warnings) != "default" )
    {
      if ( $(x_msvc_crt_secure_no_warnings) = "on" )
      {
        flags +=
          <cxxflags>"/D_CRT_SECURE_NO_WARNINGS=1"
        ;
      }
      else
      {
        if ( $(x_msvc_crt_secure_no_warnings) = "off" )
        {
          flags +=
            <cxxflags>"/U_CRT_SECURE_NO_WARNINGS"
          ;
        }
      }
    }
    if ( $(x_msvc_isystem) != "default" )
    {
      if ( $(x_msvc_isystem) = "external-as-include-system-flag" )
      {
        # unimplementable
      }
      else
      {
        flags +=
          <cxxflags>"/experimental:external"
          <cxxflags>"/external:W0"
        ;
        if ( $(x_msvc_isystem) = "anglebrackets" )
        {
          flags +=
            <cxxflags>"/external:anglebrackets"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/external:env:INCLUDE"
            <cxxflags>"/external:env:CAExcludePath"
          ;
        }
      }
      if ( $(x_msvc_isystem_with_template_from_non_external) != "default" )
      {
        if ( $(x_msvc_isystem_with_template_from_non_external) = "off" )
        {
          flags +=
            <cxxflags>"/external:template"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/external:template-"
          ;
        }
      }
      if ( $(x_warnings) != "default" )
      {
        if ( $(x_warnings) = "off" )
        {
          flags +=
            <cxxflags>"/W0"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/wd4710"
            <cxxflags>"/wd4711"
          ;
          if ! (  ! (  $(version) < "19.21"  )  )
          {
            flags +=
              <cxxflags>"/wd4774"
            ;
          }
          if ( $(x_warnings) = "on" )
          {
            flags +=
              <cxxflags>"/W4"
              <cxxflags>"/wd4514"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/Wall"
              <cxxflags>"/wd4514"
              <cxxflags>"/wd4571"
              <cxxflags>"/wd4355"
              <cxxflags>"/wd4548"
              <cxxflags>"/wd4577"
              <cxxflags>"/wd4820"
              <cxxflags>"/wd5039"
              <cxxflags>"/wd4464"
              <cxxflags>"/wd4868"
              <cxxflags>"/wd5045"
            ;
            if ( $(x_warnings) = "strict" )
            {
              flags +=
                <cxxflags>"/wd4583"
                <cxxflags>"/wd4619"
              ;
            }
          }
        }
      }
      if ( $(x_switch_warnings) != "default" )
      {
        if (  ( $(x_switch_warnings) = "on" ) || ( $(x_switch_warnings) = "mandatory-default" )  )
        {
          flags +=
            <cxxflags>"/w14062"
          ;
        }
        else
        {
          if (  ( $(x_switch_warnings) = "exhaustive-enum" ) || ( $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default" )  )
          {
            flags +=
              <cxxflags>"/w14061"
              <cxxflags>"/w14062"
            ;
          }
          else
          {
            if ( $(x_switch_warnings) = "off" )
            {
              flags +=
                <cxxflags>"/wd4061"
                <cxxflags>"/wd4062"
              ;
            }
          }
        }
      }
    }
    else
    {
      if ( $(x_warnings) != "default" )
      {
        if ( $(x_warnings) = "off" )
        {
          flags +=
            <cxxflags>"/W0"
          ;
        }
        else
        {
          if ( $(x_warnings) = "on" )
          {
            flags +=
              <cxxflags>"/W4"
              <cxxflags>"/wd4514"
              <cxxflags>"/wd4711"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/Wall"
              <cxxflags>"/wd4355"
              <cxxflags>"/wd4514"
              <cxxflags>"/wd4548"
              <cxxflags>"/wd4571"
              <cxxflags>"/wd4577"
              <cxxflags>"/wd4625"
              <cxxflags>"/wd4626"
              <cxxflags>"/wd4668"
              <cxxflags>"/wd4710"
              <cxxflags>"/wd4711"
            ;
            if ! (  ! (  $(version) < "19.21"  )  )
            {
              flags +=
                <cxxflags>"/wd4774"
              ;
            }
            flags +=
              <cxxflags>"/wd4820"
              <cxxflags>"/wd5026"
              <cxxflags>"/wd5027"
              <cxxflags>"/wd5039"
              <cxxflags>"/wd4464"
              <cxxflags>"/wd4868"
              <cxxflags>"/wd5045"
            ;
            if ( $(x_warnings) = "strict" )
            {
              flags +=
                <cxxflags>"/wd4061"
                <cxxflags>"/wd4266"
                <cxxflags>"/wd4583"
                <cxxflags>"/wd4619"
                <cxxflags>"/wd4623"
                <cxxflags>"/wd5204"
              ;
            }
          }
        }
      }
    }
    if ( $(x_conversion_warnings) != "default" )
    {
      if ( $(x_conversion_warnings) = "on" )
      {
        flags +=
          <cxxflags>"/w14244"
          <cxxflags>"/w14245"
          <cxxflags>"/w14388"
          <cxxflags>"/w14365"
        ;
      }
      else
      {
        if ( $(x_conversion_warnings) = "conversion" )
        {
          flags +=
            <cxxflags>"/w14244"
            <cxxflags>"/w14365"
          ;
        }
        else
        {
          if ( $(x_conversion_warnings) = "sign" )
          {
            flags +=
              <cxxflags>"/w14388"
              <cxxflags>"/w14245"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"/wd4244"
              <cxxflags>"/wd4365"
              <cxxflags>"/wd4388"
              <cxxflags>"/wd4245"
            ;
          }
        }
      }
    }
    if ( $(x_shadow_warnings) != "default" )
    {
      if ( $(x_shadow_warnings) = "off" )
      {
        flags +=
          <cxxflags>"/wd4456"
          <cxxflags>"/wd4459"
        ;
      }
      else
      {
        if (  ( $(x_shadow_warnings) = "on" ) || ( $(x_shadow_warnings) = "all" )  )
        {
          flags +=
            <cxxflags>"/w4456"
            <cxxflags>"/w4459"
          ;
        }
        else
        {
          if ( $(x_shadow_warnings) = "local" )
          {
            flags +=
              <cxxflags>"/w4456"
              <cxxflags>"/wd4459"
            ;
          }
        }
      }
    }
    if ( $(x_warnings_as_error) != "default" )
    {
      if ( $(x_warnings_as_error) = "on" )
      {
        flags +=
          <cxxflags>"/WX"
          <linkflags>"/WX"
        ;
      }
      else
      {
        if ( $(x_warnings_as_error) = "off" )
        {
          flags +=
            <cxxflags>"/WX-"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/we4455"
            <cxxflags>"/we4150"
            <cxxflags>"/we4716"
            <cxxflags>"/we2124"
          ;
        }
      }
    }
    if ( $(x_lto) != "default" )
    {
      if ( $(x_lto) = "off" )
      {
        flags +=
          <cxxflags>"/LTCG:OFF"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/GL"
          <linkflags>"/LTCG"
        ;
      }
    }
    if ( $(x_sanitizers) != "default" )
    {
      if ! (  $(version) < "16.09"  )
      {
        flags +=
          <cxxflags>"/fsanitize=address"
          <cxxflags>"/fsanitize-address-use-after-return"
        ;
      }
      else
      {
        if ( $(x_sanitizers) = "on" )
        {
          flags +=
            <cxxflags>"/sdl"
          ;
        }
        else
        {
          if ( $(x_stack_protector) != "default" )
          {
            if ! (  ( $(x_stack_protector) = "off" )  )
            {
              flags +=
                <cxxflags>"/sdl-"
              ;
            }
          }
        }
      }
    }
  }
  if $(toolset) = "intel' && $(original_version) = 'windows"
  {
    if ( $(x_warnings) != "default" )
    {
      if ( $(x_warnings) = "off" )
      {
        flags +=
          <cxxflags>"/w"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/W2"
          <cxxflags>"/Qdiag-disable:1418,2259"
        ;
      }
    }
    if ( $(x_warnings_as_error) != "default" )
    {
      if ( $(x_warnings_as_error) = "on" )
      {
        flags +=
          <cxxflags>"/WX"
        ;
      }
      else
      {
        if ( $(x_warnings_as_error) = "basic" )
        {
          flags +=
            <cxxflags>"/Qdiag-error:1079,39,109"
          ;
        }
      }
    }
    if ( $(x_windows_bigobj) != "default" )
    {
      flags +=
        <cxxflags>"/bigobj"
      ;
    }
    if ( $(x_msvc_conformance) != "default" )
    {
      if (  ( $(x_msvc_conformance) = "all" ) || ( $(x_msvc_conformance) = "all-without-throwing-new" )  )
      {
        flags +=
          <cxxflags>"/Zc:inline"
          <cxxflags>"/Zc:strictStrings"
        ;
        if ( $(x_msvc_conformance) = "all" )
        {
          flags +=
            <cxxflags>"/Zc:throwingNew"
          ;
        }
      }
    }
    if ( $(x_debug) != "default" )
    {
      if ( $(x_debug) = "off" )
      {
        flags +=
          <cxxflags>"/debug:NONE"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/RTC1"
          <cxxflags>"/Od"
        ;
        if ( $(x_debug) = "on" )
        {
          flags +=
            <cxxflags>"/debug:full"
          ;
        }
        else
        {
          if ( $(x_debug) = "line-tables-only" )
          {
            flags +=
              <cxxflags>"/debug:minimal"
            ;
          }
        }
        if ( $(x_optimization) != "default" )
        {
          if ( $(x_optimization) = "g" )
          {
            flags +=
              <cxxflags>"/Zi"
            ;
          }
          else
          {
            if ( $(x_whole_program) != "default" )
            {
              if ( $(x_whole_program) = "off" )
              {
                flags +=
                  <cxxflags>"/ZI"
                ;
              }
              else
              {
                flags +=
                  <cxxflags>"/Zi"
                ;
              }
            }
            else
            {
              flags +=
                <cxxflags>"/ZI"
              ;
            }
          }
        }
        else
        {
          if ( $(x_whole_program) != "default" )
          {
            if ( $(x_whole_program) = "off" )
            {
              flags +=
                <cxxflags>"/ZI"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"/Zi"
              ;
            }
          }
          else
          {
            flags +=
              <cxxflags>"/ZI"
            ;
          }
        }
      }
    }
    if ( $(x_optimization) != "default" )
    {
      if ( $(x_optimization) = "0" )
      {
        flags +=
          <cxxflags>"/Ob0"
          <cxxflags>"/Od"
          <cxxflags>"/Oi-"
          <cxxflags>"/Oy-"
        ;
      }
      else
      {
        if ( $(x_optimization) = "g" )
        {
          flags +=
            <cxxflags>"/Ob1"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"/DNDEBUG"
            <cxxflags>"/GF"
          ;
          if ( $(x_optimization) = "1" )
          {
            flags +=
              <cxxflags>"/O1"
            ;
          }
          else
          {
            if ( $(x_optimization) = "2" )
            {
              flags +=
                <cxxflags>"/O2"
              ;
            }
            else
            {
              if ( $(x_optimization) = "3" )
              {
                flags +=
                  <cxxflags>"/O2"
                ;
              }
              else
              {
                if ( $(x_optimization) = "z" )
                {
                  flags +=
                    <cxxflags>"/O3"
                  ;
                }
                else
                {
                  if ( $(x_optimization) = "size" )
                  {
                    flags +=
                      <cxxflags>"/Os"
                    ;
                  }
                  else
                  {
                    if ( $(x_optimization) = "fast" )
                    {
                      flags +=
                        <cxxflags>"/fast"
                      ;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if ( $(x_stack_protector) != "default" )
    {
      if ( $(x_stack_protector) = "off" )
      {
        flags +=
          <cxxflags>"/GS-"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/GS"
        ;
        if ( $(x_stack_protector) = "strong" )
        {
          flags +=
            <cxxflags>"/RTC1"
          ;
        }
        else
        {
          if ( $(x_stack_protector) = "all" )
          {
            flags +=
              <cxxflags>"/RTC1"
              <cxxflags>"/RTCc"
            ;
          }
        }
      }
    }
    if ( $(x_sanitizers) != "default" )
    {
      if ( $(x_sanitizers) = "on" )
      {
        flags +=
          <cxxflags>"/Qtrapuv"
        ;
      }
    }
    if ( $(x_float_sanitizers) != "default" )
    {
      if ( $(x_float_sanitizers) = "on" )
      {
        flags +=
          <cxxflags>"/Qfp-stack-check"
          <cxxflags>"/Qfp-trap:common"
        ;
      }
    }
    if ( $(x_control_flow) != "default" )
    {
      if ( $(x_control_flow) = "off" )
      {
        flags +=
          <cxxflags>"/guard:cf-"
          <cxxflags>"/mconditional-branch=keep"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/guard:cf"
        ;
        if ( $(x_control_flow) = "branch" )
        {
          flags +=
            <cxxflags>"/mconditional-branch:all-fix"
            <cxxflags>"/Qcf-protection:branch"
          ;
        }
        else
        {
          if ( $(x_control_flow) = "on" )
          {
            flags +=
              <cxxflags>"/mconditional-branch:all-fix"
              <cxxflags>"/Qcf-protection:full"
            ;
          }
        }
      }
    }
    if ( $(x_cpu) != "default" )
    {
      if ( $(x_cpu) = "generic" )
      {
        flags +=
          <cxxflags>"/Qtune:generic"
          <linkflags>"/Qtune:generic"
        ;
      }
      else
      {
        flags +=
          <cxxflags>"/QxHost"
          <linkflags>"/QxHost"
        ;
      }
    }
  }
  else
  {
    if $(toolset) = "intel' && $(original_version) = 'linux"
    {
      if ( $(x_warnings) != "default" )
      {
        if ( $(x_warnings) = "off" )
        {
          flags +=
            <cxxflags>"-w"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-Wall"
            <cxxflags>"-Warray-bounds"
            <cxxflags>"-Wcast-qual"
            <cxxflags>"-Wchar-subscripts"
            <cxxflags>"-Wdisabled-optimization"
            <cxxflags>"-Wenum-compare"
            <cxxflags>"-Wextra"
            <cxxflags>"-Wfloat-equal"
            <cxxflags>"-Wformat-security"
            <cxxflags>"-Wformat=2"
            <cxxflags>"-Winit-self"
            <cxxflags>"-Winvalid-pch"
            <cxxflags>"-Wmaybe-uninitialized"
            <cxxflags>"-Wmissing-include-dirs"
            <cxxflags>"-Wnarrowing"
            <cxxflags>"-Wnonnull"
            <cxxflags>"-Wparentheses"
            <cxxflags>"-Wpointer-sign"
            <cxxflags>"-Wreorder"
            <cxxflags>"-Wsequence-point"
            <cxxflags>"-Wtrigraphs"
            <cxxflags>"-Wundef"
            <cxxflags>"-Wunused-function"
            <cxxflags>"-Wunused-but-set-variable"
            <cxxflags>"-Wunused-variable"
            <cxxflags>"-Wpointer-arith"
            <cxxflags>"-Wdeprecated"
            <cxxflags>"-Wnon-virtual-dtor"
            <cxxflags>"-Woverloaded-virtual"
          ;
          if ( $(x_switch_warnings) != "default" )
          {
            if (  ( $(x_switch_warnings) = "on" ) || ( $(x_switch_warnings) = "exhaustive-enum" )  )
            {
              flags +=
                <cxxflags>"-Wswitch-enum"
              ;
            }
            else
            {
              if ( $(x_switch_warnings) = "mandatory-default" )
              {
                flags +=
                  <cxxflags>"-Wswitch-default"
                ;
              }
              else
              {
                if ( $(x_switch_warnings) = "exhaustive-enum-and-mandatory-default" )
                {
                  flags +=
                    <cxxflags>"-Wswitch"
                  ;
                }
                else
                {
                  flags +=
                    <cxxflags>"-Wno-switch"
                  ;
                }
              }
            }
          }
        }
      }
      if ( $(x_warnings_as_error) != "default" )
      {
        if ( $(x_warnings_as_error) = "on" )
        {
          flags +=
            <cxxflags>"-Werror"
          ;
        }
        else
        {
          if ( $(x_warnings_as_error) = "basic" )
          {
            flags +=
              <cxxflags>"-diag-error=1079,39,109"
            ;
          }
        }
      }
      if ( $(x_pedantic) != "default" )
      {
        if ( $(x_pedantic) = "off" )
        {
          flags +=
            <cxxflags>"-fgnu-keywords"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-gnu-keywords"
          ;
        }
      }
      if ( $(x_shadow_warnings) != "default" )
      {
        if ( $(x_shadow_warnings) = "off" )
        {
          flags +=
            <cxxflags>"-Wno-shadow"
          ;
        }
        else
        {
          if (  ( $(x_shadow_warnings) = "on" ) || ( $(x_shadow_warnings) = "all" )  )
          {
            flags +=
              <cxxflags>"-Wshadow"
            ;
          }
        }
      }
      if ( $(x_stl_debug) != "default" )
      {
        if ! (  ( $(x_stl_debug) = "off" )  )
        {
          if (  ( $(x_stl_debug) = "allow-broken-abi" ) || ( $(x_stl_debug) = "allow-broken-abi-and-bugs" )  )
          {
            flags +=
              <cxxflags>"-D_GLIBCXX_DEBUG"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-D_GLIBCXX_ASSERTIONS"
            ;
          }
        }
      }
      if ( $(x_debug) != "default" )
      {
        if ( $(x_debug) = "off" )
        {
          flags +=
            <cxxflags>"-g0"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-g"
          ;
        }
      }
      if ( $(x_optimization) != "default" )
      {
        if ( $(x_optimization) = "0" )
        {
          flags +=
            <cxxflags>"-O0"
          ;
        }
        else
        {
          if ( $(x_optimization) = "g" )
          {
            flags +=
              <cxxflags>"-O1"
            ;
          }
          else
          {
            flags +=
              <cxxflags>"-DNDEBUG"
            ;
            if ( $(x_optimization) = "1" )
            {
              flags +=
                <cxxflags>"-O1"
              ;
            }
            else
            {
              if ( $(x_optimization) = "2" )
              {
                flags +=
                  <cxxflags>"-O2"
                ;
              }
              else
              {
                if ( $(x_optimization) = "3" )
                {
                  flags +=
                    <cxxflags>"-O3"
                  ;
                }
                else
                {
                  if ( $(x_optimization) = "z" )
                  {
                    flags +=
                      <cxxflags>"-fast"
                    ;
                  }
                  else
                  {
                    if ( $(x_optimization) = "size" )
                    {
                      flags +=
                        <cxxflags>"-Os"
                      ;
                    }
                    else
                    {
                      if ( $(x_optimization) = "fast" )
                      {
                        flags +=
                          <cxxflags>"-Ofast"
                        ;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ( $(x_stack_protector) != "default" )
      {
        if ( $(x_stack_protector) = "off" )
        {
          flags +=
            <cxxflags>"-fno-protector-strong"
            <cxxflags>"-U_FORTIFY_SOURCE"
            <linkflags>"-fno-protector-strong"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-D_FORTIFY_SOURCE=2"
          ;
          if ( $(x_stack_protector) = "strong" )
          {
            flags +=
              <cxxflags>"-fstack-protector-strong"
              <linkflags>"-fstack-protector-strong"
            ;
          }
          else
          {
            if ( $(x_stack_protector) = "all" )
            {
              flags +=
                <cxxflags>"-fstack-protector-all"
                <linkflags>"-fstack-protector-all"
              ;
            }
            else
            {
              flags +=
                <cxxflags>"-fstack-protector"
                <linkflags>"-fstack-protector"
              ;
            }
          }
        }
      }
      if ( $(x_relro) != "default" )
      {
        if ( $(x_relro) = "off" )
        {
          flags +=
            <linkflags>"-Xlinker-znorelro"
          ;
        }
        else
        {
          if ( $(x_relro) = "on" )
          {
            flags +=
              <linkflags>"-Xlinker-zrelro"
            ;
          }
          else
          {
            if ( $(x_relro) = "full" )
            {
              flags +=
                <linkflags>"-Xlinker-zrelro"
                <linkflags>"-Xlinker-znow"
                <linkflags>"-Xlinker-znoexecstack"
              ;
            }
          }
        }
      }
      if ( $(x_pie) != "default" )
      {
        if ( $(x_pie) = "off" )
        {
          flags +=
            <linkflags>"-no-pic"
          ;
        }
        else
        {
          if ( $(x_pie) = "on" )
          {
            flags +=
              <linkflags>"-pie"
            ;
          }
          else
          {
            if ( $(x_pie) = "fpie" )
            {
              flags +=
                <cxxflags>"-fpie"
              ;
            }
            else
            {
              if ( $(x_pie) = "fpic" )
              {
                flags +=
                  <cxxflags>"-fpic"
                ;
              }
              else
              {
                if ( $(x_pie) = "fPIE" )
                {
                  flags +=
                    <cxxflags>"-fPIE"
                  ;
                }
                else
                {
                  if ( $(x_pie) = "fPIC" )
                  {
                    flags +=
                      <cxxflags>"-fPIC"
                    ;
                  }
                }
              }
            }
          }
        }
      }
      if ( $(x_sanitizers) != "default" )
      {
        if ( $(x_sanitizers) = "on" )
        {
          flags +=
            <cxxflags>"-ftrapuv"
          ;
        }
      }
      if ( $(x_integer_sanitizers) != "default" )
      {
        if ( $(x_integer_sanitizers) = "on" )
        {
          flags +=
            <cxxflags>"-funsigned-bitfields"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-unsigned-bitfields"
          ;
        }
      }
      if ( $(x_float_sanitizers) != "default" )
      {
        if ( $(x_float_sanitizers) = "on" )
        {
          flags +=
            <cxxflags>"-fp-stack-check"
            <cxxflags>"-fp-trap=common"
          ;
        }
      }
      if ( $(x_linker) != "default" )
      {
        if ( $(x_linker) = "bfd" )
        {
          flags +=
            <linkflags>"-fuse-ld=bfd"
          ;
        }
        else
        {
          if ( $(x_linker) = "gold" )
          {
            flags +=
              <linkflags>"-fuse-ld=gold"
            ;
          }
          else
          {
            flags +=
              <linkflags>"-fuse-ld=lld"
            ;
          }
        }
      }
      if ( $(x_lto) != "default" )
      {
        if ( $(x_lto) = "off" )
        {
          flags +=
            <cxxflags>"-no-ipo"
            <linkflags>"-no-ipo"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-ipo"
            <linkflags>"-ipo"
          ;
          if ( $(x_lto) = "fat" )
          {
            if [ os.name ] = LINUX
            {
              flags +=
                <cxxflags>"-ffat-lto-objects"
                <linkflags>"-ffat-lto-objects"
              ;
            }
          }
        }
      }
      if ( $(x_control_flow) != "default" )
      {
        if ( $(x_control_flow) = "off" )
        {
          flags +=
            <cxxflags>"-mconditional-branch=keep"
            <cxxflags>"-fcf-protection=none"
          ;
        }
        else
        {
          if ( $(x_control_flow) = "branch" )
          {
            flags +=
              <cxxflags>"-mconditional-branch=all-fix"
              <cxxflags>"-fcf-protection=branch"
            ;
          }
          else
          {
            if ( $(x_control_flow) = "on" )
            {
              flags +=
                <cxxflags>"-mconditional-branch=all-fix"
                <cxxflags>"-fcf-protection=full"
              ;
            }
          }
        }
      }
      if ( $(x_exceptions) != "default" )
      {
        if ( $(x_exceptions) = "on" )
        {
          flags +=
            <cxxflags>"-fexceptions"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-exceptions"
          ;
        }
      }
      if ( $(x_rtti) != "default" )
      {
        if ( $(x_rtti) = "on" )
        {
          flags +=
            <cxxflags>"-frtti"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-fno-rtti"
          ;
        }
      }
      if ( $(x_cpu) != "default" )
      {
        if ( $(x_cpu) = "generic" )
        {
          flags +=
            <cxxflags>"-mtune=generic"
            <linkflags>"-mtune=generic"
          ;
        }
        else
        {
          flags +=
            <cxxflags>"-xHost"
            <linkflags>"-xHost"
          ;
        }
      }
    }
  }
  if [ os.name ] = MINGW
  {
    if ( $(x_windows_bigobj) != "default" )
    {
      flags +=
        <cxxflags>"-Wa,-mbig-obj"
      ;
    }
  }
  return $(flags) ;
}
