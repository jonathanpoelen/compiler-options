option('jln_color', type : 'combo', choices : ['default', 'auto', 'never', 'always'], value : 'default', description : '')
option('jln_control_flow', type : 'combo', choices : ['default', 'off', 'on', 'branch', 'return', 'allow_bugs'], value : 'default', description : 'insert extra runtime security checks to detect attempts to compromise your code')
option('jln_conversion_warnings', type : 'combo', choices : ['default', 'off', 'on', 'sign', 'conversion'], value : 'on', description : 'warn for implicit conversions that may alter a value')
option('jln_coverage', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : '')
option('jln_covered_switch_default_warnings', type : 'combo', choices : ['default', 'on', 'off'], value : 'on', description : 'warning for default label in switch which covers all enumeration values')
option('jln_cpu', type : 'combo', choices : ['default', 'generic', 'native'], value : 'default', description : '')
option('jln_debug', type : 'combo', choices : ['default', 'off', 'on', 'line_tables_only', 'gdb', 'lldb', 'sce'], value : 'default', description : 'produce debugging information in the operating system\'s')
option('jln_diagnostics_format', type : 'combo', choices : ['default', 'fixits', 'patch', 'print_source_range_info'], value : 'default', description : 'emit fix-it hints in a machine-parseable format')
option('jln_diagnostics_show_template_tree', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'enables printing a tree-like structure showing the common and differing parts of the types')
option('jln_elide_type', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'prints diagnostics showing common parts of template types as \"[...]\"')
option('jln_exceptions', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'enable C++ exception')
option('jln_fix_compiler_error', type : 'combo', choices : ['default', 'off', 'on'], value : 'on', description : 'transforms some warnings into errors to comply with the standard')
option('jln_float_sanitizers', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : '')
option('jln_integer_sanitizers', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : '')
option('jln_linker', type : 'combo', choices : ['default', 'bfd', 'gold', 'lld', 'native'], value : 'default', description : 'configure linker')
option('jln_lto', type : 'combo', choices : ['default', 'off', 'on', 'fat', 'thin'], value : 'default', description : 'enable Link Time Optimization')
option('jln_msvc_conformance', type : 'combo', choices : ['default', 'all', 'all_without_throwing_new'], value : 'all', description : 'standard conformance options')
option('jln_msvc_crt_secure_no_warnings', type : 'combo', choices : ['default', 'off', 'on'], value : 'on', description : 'disable CRT warnings')
option('jln_msvc_isystem', type : 'combo', choices : ['default', 'anglebrackets', 'include_and_caexcludepath'], value : 'default', description : 'warnings concerning external header (https://devblogs.microsoft.com/cppblog/broken-warnings-theory)')
option('jln_msvc_isystem_with_template_from_non_external', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'warnings concerning template in an external header (requires msvc_isystem)')
option('jln_noexcept_warnings', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'Warn when a noexcept-expression evaluates to false because of a call to a function that does not have a non-throwing exception specification (i.e. \"throw()\" or \"noexcept\") but is known by the compiler to never throw an exception.')
option('jln_optimization', type : 'combo', choices : ['default', '0', 'g', '1', '2', '3', 'fast', 'size', 'z'], value : 'default', description : 'optimization level\\n - 0: not optimize\\n - g: enable debugging experience\\n - 1: optimize\\n - 2: optimize even more\\n - 3: optimize yet more\\n - fast: enables all optimization=3 and disregard strict standards compliance\\n - size: optimize for size\\n - z: optimize for size aggressively (/!\\ possible slow compilation)')
option('jln_other_sanitizers', type : 'combo', choices : ['default', 'off', 'thread', 'pointer', 'memory'], value : 'default', description : 'enable other sanitizers')
option('jln_pedantic', type : 'combo', choices : ['default', 'off', 'on', 'as_error'], value : 'on', description : 'issue all the warnings demanded by strict ISO C and ISO C++')
option('jln_pie', type : 'combo', choices : ['default', 'off', 'on', 'static', 'fpic', 'fPIC', 'fpie', 'fPIE'], value : 'default', description : 'controls position-independent code generation')
option('jln_relro', type : 'combo', choices : ['default', 'off', 'on', 'full'], value : 'default', description : 'specifies a memory segment that should be made read-only after relocation, if supported.')
option('jln_reproducible_build_warnings', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'warn when macros \"__TIME__\", \"__DATE__\" or \"__TIMESTAMP__\" are encountered as they might prevent bit-wise-identical reproducible compilations')
option('jln_rtti', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'disable generation of information about every class with virtual functions for use by the C++ run-time type identification features (\"dynamic_cast\" and \"typeid\")')
option('jln_sanitizers', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'enable sanitizers (asan, ubsan, etc)')
option('jln_shadow_warnings', type : 'combo', choices : ['default', 'off', 'on', 'local', 'compatible_local', 'all'], value : 'off', description : '')
option('jln_stack_protector', type : 'combo', choices : ['default', 'off', 'on', 'strong', 'all'], value : 'default', description : 'emit extra code to check for buffer overflows, such as stack smashing attacks')
option('jln_stl_debug', type : 'combo', choices : ['default', 'off', 'on', 'allow_broken_abi', 'allow_broken_abi_and_bugs', 'assert_as_exception'], value : 'default', description : 'controls the debug level of the STL')
option('jln_stl_fix', type : 'combo', choices : ['default', 'off', 'on'], value : 'on', description : 'enable /DNOMINMAX with msvc')
option('jln_suggestions', type : 'combo', choices : ['default', 'off', 'on'], value : 'default', description : 'warn for cases where adding an attribute may be beneficial')
option('jln_switch_warnings', type : 'combo', choices : ['default', 'on', 'off', 'exhaustive_enum', 'mandatory_default', 'exhaustive_enum_and_mandatory_default'], value : 'on', description : 'warnings concerning the switch keyword')
option('jln_warnings', type : 'combo', choices : ['default', 'off', 'on', 'strict', 'very_strict'], value : 'on', description : 'warning level')
option('jln_warnings_as_error', type : 'combo', choices : ['default', 'off', 'on', 'basic'], value : 'default', description : 'make all or some warnings into errors')
option('jln_whole_program', type : 'combo', choices : ['default', 'off', 'on', 'strip_all'], value : 'default', description : 'Assume that the current compilation unit represents the whole program being compiled. This option should not be used in combination with lto.')
option('jln_windows_abi_compatibility_warnings', type : 'combo', choices : ['default', 'off', 'on'], value : 'off', description : 'In code that is intended to be portable to Windows-based compilers the warning helps prevent unresolved references due to the difference in the mangling of symbols declared with different class-keys')
option('jln_windows_bigobj', type : 'combo', choices : ['default', 'on'], value : 'on', description : 'increases that addressable sections capacity')
