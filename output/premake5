function jln_newoptions(defaults)
  defaults = defaults or {}
  newoption{trigger="jln-coverage", allowed={{"off"}, {"on"}}, description="coverage"}
  if not _OPTIONS["jln-coverage"] then _OPTIONS["jln-coverage"] = (defaults["coverage"] or "off") end
  newoption{trigger="jln-debug", allowed={{"on"}, {"off"}}, description="debug"}
  if not _OPTIONS["jln-debug"] then _OPTIONS["jln-debug"] = (defaults["debug"] or "on") end
  newoption{trigger="jln-fast-math", allowed={{"off"}, {"on"}}, description="fast_math"}
  if not _OPTIONS["jln-fast-math"] then _OPTIONS["jln-fast-math"] = (defaults["fast_math"] or "off") end
  newoption{trigger="jln-glibcxx-debug", allowed={{"off"}, {"on"}, {"allow_broken_abi"}}, description="glibcxx_debug"}
  if not _OPTIONS["jln-glibcxx-debug"] then _OPTIONS["jln-glibcxx-debug"] = (defaults["glibcxx_debug"] or "off") end
  newoption{trigger="jln-lto", allowed={{"off"}, {"on"}, {"fat"}}, description="lto"}
  if not _OPTIONS["jln-lto"] then _OPTIONS["jln-lto"] = (defaults["lto"] or "off") end
  newoption{trigger="jln-optimize", allowed={{"default"}, {"off"}, {"on"}, {"size"}, {"speed"}, {"full"}}, description="optimize"}
  if not _OPTIONS["jln-optimize"] then _OPTIONS["jln-optimize"] = (defaults["optimize"] or "default") end
  newoption{trigger="jln-pedantic", allowed={{"on"}, {"off"}}, description="pedantic"}
  if not _OPTIONS["jln-pedantic"] then _OPTIONS["jln-pedantic"] = (defaults["pedantic"] or "on") end
  newoption{trigger="jln-relro", allowed={{"default"}, {"off"}, {"on"}, {"full"}}, description="relro"}
  if not _OPTIONS["jln-relro"] then _OPTIONS["jln-relro"] = (defaults["relro"] or "default") end
  newoption{trigger="jln-report-template", allowed={{"off"}, {"on"}}, description="report_template"}
  if not _OPTIONS["jln-report-template"] then _OPTIONS["jln-report-template"] = (defaults["report_template"] or "off") end
  newoption{trigger="jln-sanitizers", allowed={{"off"}, {"on"}}, description="sanitizers"}
  if not _OPTIONS["jln-sanitizers"] then _OPTIONS["jln-sanitizers"] = (defaults["sanitizers"] or "off") end
  newoption{trigger="jln-sanitizers-extra", allowed={{"off"}, {"thread"}, {"pointer"}}, description="sanitizers_extra"}
  if not _OPTIONS["jln-sanitizers-extra"] then _OPTIONS["jln-sanitizers-extra"] = (defaults["sanitizers_extra"] or "off") end
  newoption{trigger="jln-stack-protector", allowed={{"off"}, {"on"}, {"strong"}, {"all"}}, description="stack_protector"}
  if not _OPTIONS["jln-stack-protector"] then _OPTIONS["jln-stack-protector"] = (defaults["stack_protector"] or "off") end
  newoption{trigger="jln-suggest", allowed={{"off"}, {"on"}}, description="suggest"}
  if not _OPTIONS["jln-suggest"] then _OPTIONS["jln-suggest"] = (defaults["suggest"] or "off") end
  newoption{trigger="jln-warnings", allowed={{"on"}, {"off"}, {"strict"}}, description="warnings"}
  if not _OPTIONS["jln-warnings"] then _OPTIONS["jln-warnings"] = (defaults["warnings"] or "on") end
  newoption{trigger="jln-warnings-as-error", allowed={{"off"}, {"on"}}, description="warnings_as_error"}
  if not _OPTIONS["jln-warnings-as-error"] then _OPTIONS["jln-warnings-as-error"] = (defaults["warnings_as_error"] or "off") end
end
function jln_setoptions(compiler, version)
  local options = jln_getoptions()
  buildoptions(options.buildoptions)
  linkoptions(options.linkoptions)
  return options
end

function jln_getoptions(compiler, version)
  if not compiler then compiler = _OPTIONS['cc'] or 'gcc'
  elseif compiler == 'g++' then compiler = 'gcc'
  elseif compiler == 'clang++' then compiler = 'clang'
  end

  local compversion = {}
  local output = version
  if not output then
     output = os.outputof(compiler .. " --version")
     if not output then
       return {buildoptions='', linkoptions=''}
     end
     version = output:gsub("^[^ ]+ [^ ]+ ([^ ]+).*", "%1")
  end
  for i in version:gmatch("%d+") do
    compversion[#compversion+1] = tonumber(i)
  end
  if not compversion[1] then
    return
  end
  compversion = compversion[1] * 100 + (compversion[2] or 0)

  local jln_buildoptions, jln_linkoptions = '', ''

  if ( compiler == "gcc" or compiler == "clang" ) then
  
    if not ( _OPTIONS["jln-lto"] == "off") then
    
      jln_buildoptions = jln_buildoptions .. " -flto"
      jln_linkoptions = jln_linkoptions .. " -flto"
      if ( compiler == "gcc" and not ( compversion < 500 ) ) then
      
        jln_buildoptions = jln_buildoptions .. " -flto-odr-type-merging"
        jln_linkoptions = jln_linkoptions .. " -flto-odr-type-merging"
        if _OPTIONS["jln-lto"] == "fat" then
        
          jln_buildoptions = jln_buildoptions .. " -ffat-lto-objects"
        end
      end
    end
    if not ( _OPTIONS["jln-coverage"] == "off") then
    
      jln_buildoptions = jln_buildoptions .. " -coverage"
      jln_linkoptions = jln_linkoptions .. " -l-coverage"
      if compiler == "clang" then
      
        jln_linkoptions = jln_linkoptions .. " -l-lprofile_rt"
      end
    end
    if not ( _OPTIONS["jln-debug"] == "off") then
    
      jln_buildoptions = jln_buildoptions .. " -g"
    end
    if not ( _OPTIONS["jln-fast-math"] == "off") then
    
      jln_buildoptions = jln_buildoptions .. " -ffast-math"
    end
    if not ( _OPTIONS["jln-optimize"] == "default") then
    
      if _OPTIONS["jln-optimize"] == "off" then
      
        jln_buildoptions = jln_buildoptions .. " -O0"
      end
      if _OPTIONS["jln-optimize"] == "on" then
      
        jln_buildoptions = jln_buildoptions .. " -O2"
      end
      if _OPTIONS["jln-optimize"] == "size" then
      
        jln_buildoptions = jln_buildoptions .. " -Os"
      end
      if _OPTIONS["jln-optimize"] == "speed" then
      
        jln_buildoptions = jln_buildoptions .. " -O3"
      end
      if _OPTIONS["jln-optimize"] == "full" then
      
        jln_buildoptions = jln_buildoptions .. " -O3 -march=native"
      end
    end
    if not ( _OPTIONS["jln-pedantic"] == "off") then
    
      jln_buildoptions = jln_buildoptions .. " -pedantic -pedantic-errors"
    end
    if not ( _OPTIONS["jln-stack-protector"] == "off") then
    
      jln_buildoptions = jln_buildoptions .. " -Wstack-protector -fstack-protector -D_FORTIFY_SOURCE=2"
      jln_linkoptions = jln_linkoptions .. " -fstack-protector"
      if _OPTIONS["jln-stack-protector"] == "strong" then
      
        if not ( compiler == "gcc" and compversion < 409 ) then
        
          jln_buildoptions = jln_buildoptions .. " -fstack-protector-strong"
          jln_linkoptions = jln_linkoptions .. " -fstack-protector-strong"
        end
      
      elseif _OPTIONS["jln-stack-protector"] == "all" then
      
        jln_buildoptions = jln_buildoptions .. " -fstack-protector-all"
        jln_linkoptions = jln_linkoptions .. " -fstack-protector-all"
      end
    end
    if not ( _OPTIONS["jln-relro"] == "default") then
    
      if _OPTIONS["jln-relro"] == "off" then
      
        jln_linkoptions = jln_linkoptions .. " -l-Wl,-z,norelro"
      
      elseif _OPTIONS["jln-relro"] == "on" then
      
        jln_linkoptions = jln_linkoptions .. " -l-Wl,-z,relro"
      
      elseif _OPTIONS["jln-relro"] == "full" then
      
        jln_linkoptions = jln_linkoptions .. " -l-Wl,-z,relro,-z,now"
      end
    end
    if not ( _OPTIONS["jln-suggest"] == "off") then
    
      if compiler == "gcc" then
      
        jln_buildoptions = jln_buildoptions .. " -Wsuggest-attribute=pure -Wsuggest-attribute=const"
        if not ( compversion < 500 ) then
        
          jln_buildoptions = jln_buildoptions .. " -Wsuggest-final-types -Wsuggest-final-methods"
        end
      end
    end
    if not ( _OPTIONS["jln-glibcxx-debug"] == "off") then
    
      if _OPTIONS["jln-glibcxx-debug"] == "allow_broken_abi" then
      
        jln_buildoptions = jln_buildoptions .. " -D_GLIBCXX_DEBUG"
      
      else
      
        jln_buildoptions = jln_buildoptions .. " -D_GLIBCXX_ASSERTIONS"
      end
      if not ( _OPTIONS["jln-pedantic"] == "off") then
      
        jln_buildoptions = jln_buildoptions .. " -D_GLIBCXX_DEBUG_PEDANTIC"
      end
    end
    if not ( _OPTIONS["jln-warnings"] == "off") then
    
      if compiler == "gcc" then
      
        jln_buildoptions = jln_buildoptions .. " -Wall -Wextra -Wcast-align -Wcast-qual -Wdisabled-optimization -Wfloat-equal -Wformat-security -Wformat-signedness -Wformat=2 -Wmissing-declarations -Wmissing-include-dirs -Wnon-virtual-dtor -Wold-style-cast -Woverloaded-virtual -Wpacked -Wredundant-decls -Wundef -Wuninitialized -Wunused-macros -Wvla -Wconversion -Wswitch-default -Wswitch-enum"
        if not ( compversion < 407 ) then
        
          jln_buildoptions = jln_buildoptions .. " -Wsuggest-attribute=noreturn -Wzero-as-null-pointer-constant -Wlogical-op -Wvector-operation-performance -Wdouble-promotion -Wtrampolines"
          if not ( compversion < 408 ) then
          
            jln_buildoptions = jln_buildoptions .. " -Wuseless-cast"
            if not ( compversion < 409 ) then
            
              jln_buildoptions = jln_buildoptions .. " -Wconditionally-supported -Wfloat-conversion -Wopenmp-simd"
              if not ( compversion < 501 ) then
              
                jln_buildoptions = jln_buildoptions .. " -fsized-deallocation -Warray-bounds=2 -Wconditionally-supported -Wnoexcept -Wsized-deallocation -Wstrict-null-sentinel -Wsuggest-override"
                if not ( compversion < 601 ) then
                
                  jln_buildoptions = jln_buildoptions .. " -Wduplicated-cond -Wnull-dereference"
                  if not ( compversion < 700 ) then
                  
                    jln_buildoptions = jln_buildoptions .. " -Waligned-new"
                    if not ( compversion < 701 ) then
                    
                      jln_buildoptions = jln_buildoptions .. " -Walloc-zero -Walloca -Wformat-overflow -Wshadow=compatible-local"
                      if not ( compversion < 800 ) then
                      
                        jln_buildoptions = jln_buildoptions .. " -Wclass-memaccess"
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      if compiler == "clang" then
      
        jln_buildoptions = jln_buildoptions .. " -Weverything -Wno-c++98-compat -Wno-c++98-compat-pedantic -Wno-mismatched-tags -Wno-padded -Wno-shadow -Wno-global-constructors -Wno-weak-vtables -Wno-exit-time-destructors -Wno-covered-switch-default"
      end
      if _OPTIONS["jln-warnings"] == "strict" then
      
        jln_buildoptions = jln_buildoptions .. " -Wsign-conversion"
        if ( compiler == "gcc" and not ( compversion < 800 ) ) then
        
          jln_buildoptions = jln_buildoptions .. " -Wcast-align=strict"
        end
      end
    end
    if not ( _OPTIONS["jln-sanitizers"] == "off") then
    
      if compiler == "clang" then
      
        if not ( compversion < 301 ) then
        
          jln_buildoptions = jln_buildoptions .. " -fsanitize=undefined -fsanitize=address -fsanitize-address-use-after-scope -fno-omit-frame-pointer -fno-optimize-sibling-calls"
          jln_linkoptions = jln_linkoptions .. " -lubsan -lasan"
          if not ( compversion < 304 ) then
          
            jln_buildoptions = jln_buildoptions .. " -fsanitize=leak"
            jln_linkoptions = jln_linkoptions .. " -llsan"
            if not ( compversion < 600 ) then
            
              jln_buildoptions = jln_buildoptions .. " -fsanitize=bounds"
              jln_linkoptions = jln_linkoptions .. " -fsanitize=bounds"
            end
          end
        end
      
      else
      
        if not ( compversion < 408 ) then
        
          jln_buildoptions = jln_buildoptions .. " -fsanitize=address -fno-omit-frame-pointer -fno-optimize-sibling-calls"
          jln_linkoptions = jln_linkoptions .. " -lasan"
          if not ( compversion < 409 ) then
          
            jln_buildoptions = jln_buildoptions .. " -fsanitize=undefined -fsanitize=leak"
            jln_linkoptions = jln_linkoptions .. " -lubsan -llsan"
            if not ( compversion < 600 ) then
            
              jln_buildoptions = jln_buildoptions .. " -fsanitize=bounds -fsanitize=bounds-strict"
            end
          end
        end
      end
    end
    if not ( _OPTIONS["jln-sanitizers-extra"] == "off") then
    
      if _OPTIONS["jln-sanitizers-extra"] == "thread" then
      
        jln_buildoptions = jln_buildoptions .. " -fsanitize=thread"
      
      elseif _OPTIONS["jln-sanitizers-extra"] == "pointer" then
      
        if ( compiler == "gcc" and not ( compversion < 800 ) ) then
        
          jln_buildoptions = jln_buildoptions .. " -fsanitize=pointer-compare -fsanitize=pointer-subtract"
        end
      end
    end
    if not ( _OPTIONS["jln-report-template"] == "off") then
    
      if ( compiler == "gcc" and not ( compversion < 800 ) ) then
      
        jln_buildoptions = jln_buildoptions .. " -fno-elide-type -fdiagnostics-show-template-tree"
      end
      if ( compiler == "clang" and not ( compversion < 304 ) ) then
      
        jln_buildoptions = jln_buildoptions .. " -fno-elide-type"
      end
    end
    if not ( _OPTIONS["jln-warnings-as-error"] == "off") then
    
      jln_buildoptions = jln_buildoptions .. " -Werror"
    end
  end
  return {buildoptions=jln_buildoptions, linkoptions=jln_linkoptions}
end
return m