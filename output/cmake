# jln_init_flags([<jln-option> <value>]... [VERBOSE on|1])
function(jln_init_flags)
  cmake_parse_arguments(JLN_DEFAULT_FLAG "" "VERBOSE;COLOR;COVERAGE;DEBUG;FAST_MATH;LIBCXX_DEBUG;LTO;OPTIMIZE;PEDANTIC;RELRO;REPORT_TEMPLATE;SANITIZERS;SANITIZERS_EXTRA;STACK_PROTECTOR;SUGGESTS;WARNINGS;WARNINGS_AS_ERROR" "" ${ARGN})

  if(DEFINED JLN_DEFAULT_FLAG_VERBOSE)
    set(JLN_VERBOSE ${JLN_DEFAULT_FLAG_VERBOSE})
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_COLOR)
    set(JLN_COLOR ${JLN_DEFAULT_FLAG_COLOR} CACHE STING "")
  else()
    set(JLN_COLOR "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_COLOR) OR ("auto" STREQUAL JLN_COLOR) OR ("never" STREQUAL JLN_COLOR) OR ("always" STREQUAL JLN_COLOR)))
    message(FATAL_ERROR "Unknow value \"${JLN_COLOR}\" for JLN_COLOR, expected: default, auto, never, always")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_COVERAGE)
    set(JLN_COVERAGE ${JLN_DEFAULT_FLAG_COVERAGE} CACHE STING "")
  else()
    set(JLN_COVERAGE "off" CACHE STRING "")
  endif()

  if(NOT(("off" STREQUAL JLN_COVERAGE) OR ("on" STREQUAL JLN_COVERAGE)))
    message(FATAL_ERROR "Unknow value \"${JLN_COVERAGE}\" for JLN_COVERAGE, expected: off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_DEBUG)
    set(JLN_DEBUG ${JLN_DEFAULT_FLAG_DEBUG} CACHE STING "")
  else()
    set(JLN_DEBUG "off" CACHE STRING "")
  endif()

  if(NOT(("off" STREQUAL JLN_DEBUG) OR ("on" STREQUAL JLN_DEBUG)))
    message(FATAL_ERROR "Unknow value \"${JLN_DEBUG}\" for JLN_DEBUG, expected: off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_FAST_MATH)
    set(JLN_FAST_MATH ${JLN_DEFAULT_FLAG_FAST_MATH} CACHE STING "")
  else()
    set(JLN_FAST_MATH "off" CACHE STRING "")
  endif()

  if(NOT(("off" STREQUAL JLN_FAST_MATH) OR ("on" STREQUAL JLN_FAST_MATH)))
    message(FATAL_ERROR "Unknow value \"${JLN_FAST_MATH}\" for JLN_FAST_MATH, expected: off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_LIBCXX_DEBUG)
    set(JLN_LIBCXX_DEBUG ${JLN_DEFAULT_FLAG_LIBCXX_DEBUG} CACHE STING "")
  else()
    set(JLN_LIBCXX_DEBUG "off" CACHE STRING "")
  endif()

  if(NOT(("off" STREQUAL JLN_LIBCXX_DEBUG) OR ("on" STREQUAL JLN_LIBCXX_DEBUG) OR ("allow_broken_abi" STREQUAL JLN_LIBCXX_DEBUG) OR ("assert_as_exceptions" STREQUAL JLN_LIBCXX_DEBUG)))
    message(FATAL_ERROR "Unknow value \"${JLN_LIBCXX_DEBUG}\" for JLN_LIBCXX_DEBUG, expected: off, on, allow_broken_abi, assert_as_exceptions")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_LTO)
    set(JLN_LTO ${JLN_DEFAULT_FLAG_LTO} CACHE STING "")
  else()
    set(JLN_LTO "off" CACHE STRING "")
  endif()

  if(NOT(("off" STREQUAL JLN_LTO) OR ("on" STREQUAL JLN_LTO) OR ("fat" STREQUAL JLN_LTO)))
    message(FATAL_ERROR "Unknow value \"${JLN_LTO}\" for JLN_LTO, expected: off, on, fat")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_OPTIMIZE)
    set(JLN_OPTIMIZE ${JLN_DEFAULT_FLAG_OPTIMIZE} CACHE STING "")
  else()
    set(JLN_OPTIMIZE "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_OPTIMIZE) OR ("off" STREQUAL JLN_OPTIMIZE) OR ("on" STREQUAL JLN_OPTIMIZE) OR ("size" STREQUAL JLN_OPTIMIZE) OR ("speed" STREQUAL JLN_OPTIMIZE) OR ("full" STREQUAL JLN_OPTIMIZE)))
    message(FATAL_ERROR "Unknow value \"${JLN_OPTIMIZE}\" for JLN_OPTIMIZE, expected: default, off, on, size, speed, full")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_PEDANTIC)
    set(JLN_PEDANTIC ${JLN_DEFAULT_FLAG_PEDANTIC} CACHE STING "")
  else()
    set(JLN_PEDANTIC "on" CACHE STRING "")
  endif()

  if(NOT(("on" STREQUAL JLN_PEDANTIC) OR ("off" STREQUAL JLN_PEDANTIC) OR ("as_error" STREQUAL JLN_PEDANTIC)))
    message(FATAL_ERROR "Unknow value \"${JLN_PEDANTIC}\" for JLN_PEDANTIC, expected: on, off, as_error")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_RELRO)
    set(JLN_RELRO ${JLN_DEFAULT_FLAG_RELRO} CACHE STING "")
  else()
    set(JLN_RELRO "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_RELRO) OR ("off" STREQUAL JLN_RELRO) OR ("on" STREQUAL JLN_RELRO) OR ("full" STREQUAL JLN_RELRO)))
    message(FATAL_ERROR "Unknow value \"${JLN_RELRO}\" for JLN_RELRO, expected: default, off, on, full")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_REPORT_TEMPLATE)
    set(JLN_REPORT_TEMPLATE ${JLN_DEFAULT_FLAG_REPORT_TEMPLATE} CACHE STING "")
  else()
    set(JLN_REPORT_TEMPLATE "off" CACHE STRING "")
  endif()

  if(NOT(("off" STREQUAL JLN_REPORT_TEMPLATE) OR ("on" STREQUAL JLN_REPORT_TEMPLATE)))
    message(FATAL_ERROR "Unknow value \"${JLN_REPORT_TEMPLATE}\" for JLN_REPORT_TEMPLATE, expected: off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SANITIZERS)
    set(JLN_SANITIZERS ${JLN_DEFAULT_FLAG_SANITIZERS} CACHE STING "")
  else()
    set(JLN_SANITIZERS "off" CACHE STRING "")
  endif()

  if(NOT(("off" STREQUAL JLN_SANITIZERS) OR ("on" STREQUAL JLN_SANITIZERS)))
    message(FATAL_ERROR "Unknow value \"${JLN_SANITIZERS}\" for JLN_SANITIZERS, expected: off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SANITIZERS_EXTRA)
    set(JLN_SANITIZERS_EXTRA ${JLN_DEFAULT_FLAG_SANITIZERS_EXTRA} CACHE STING "")
  else()
    set(JLN_SANITIZERS_EXTRA "off" CACHE STRING "")
  endif()

  if(NOT(("off" STREQUAL JLN_SANITIZERS_EXTRA) OR ("thread" STREQUAL JLN_SANITIZERS_EXTRA) OR ("pointer" STREQUAL JLN_SANITIZERS_EXTRA)))
    message(FATAL_ERROR "Unknow value \"${JLN_SANITIZERS_EXTRA}\" for JLN_SANITIZERS_EXTRA, expected: off, thread, pointer")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_STACK_PROTECTOR)
    set(JLN_STACK_PROTECTOR ${JLN_DEFAULT_FLAG_STACK_PROTECTOR} CACHE STING "")
  else()
    set(JLN_STACK_PROTECTOR "off" CACHE STRING "")
  endif()

  if(NOT(("off" STREQUAL JLN_STACK_PROTECTOR) OR ("on" STREQUAL JLN_STACK_PROTECTOR) OR ("strong" STREQUAL JLN_STACK_PROTECTOR) OR ("all" STREQUAL JLN_STACK_PROTECTOR)))
    message(FATAL_ERROR "Unknow value \"${JLN_STACK_PROTECTOR}\" for JLN_STACK_PROTECTOR, expected: off, on, strong, all")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SUGGESTS)
    set(JLN_SUGGESTS ${JLN_DEFAULT_FLAG_SUGGESTS} CACHE STING "")
  else()
    set(JLN_SUGGESTS "off" CACHE STRING "")
  endif()

  if(NOT(("off" STREQUAL JLN_SUGGESTS) OR ("on" STREQUAL JLN_SUGGESTS)))
    message(FATAL_ERROR "Unknow value \"${JLN_SUGGESTS}\" for JLN_SUGGESTS, expected: off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_WARNINGS)
    set(JLN_WARNINGS ${JLN_DEFAULT_FLAG_WARNINGS} CACHE STING "")
  else()
    set(JLN_WARNINGS "on" CACHE STRING "")
  endif()

  if(NOT(("on" STREQUAL JLN_WARNINGS) OR ("off" STREQUAL JLN_WARNINGS) OR ("strict" STREQUAL JLN_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_WARNINGS}\" for JLN_WARNINGS, expected: on, off, strict")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_WARNINGS_AS_ERROR)
    set(JLN_WARNINGS_AS_ERROR ${JLN_DEFAULT_FLAG_WARNINGS_AS_ERROR} CACHE STING "")
  else()
    set(JLN_WARNINGS_AS_ERROR "off" CACHE STRING "")
  endif()

  if(NOT(("off" STREQUAL JLN_WARNINGS_AS_ERROR) OR ("on" STREQUAL JLN_WARNINGS_AS_ERROR)))
    message(FATAL_ERROR "Unknow value \"${JLN_WARNINGS_AS_ERROR}\" for JLN_WARNINGS_AS_ERROR, expected: off, on")
  endif()

  if("${JLN_VERBOSE}" STREQUAL "on" OR "${JLN_VERBOSE}" STREQUAL "1")
    message(STATUS "JLN_COLOR=${JLN_COLOR}	[default, auto, never, always]")
    message(STATUS "JLN_COVERAGE=${JLN_COVERAGE}	[off, on]")
    message(STATUS "JLN_DEBUG=${JLN_DEBUG}	[off, on]")
    message(STATUS "JLN_FAST_MATH=${JLN_FAST_MATH}	[off, on]")
    message(STATUS "JLN_LIBCXX_DEBUG=${JLN_LIBCXX_DEBUG}	[off, on, allow_broken_abi, assert_as_exceptions]")
    message(STATUS "JLN_LTO=${JLN_LTO}	[off, on, fat]")
    message(STATUS "JLN_OPTIMIZE=${JLN_OPTIMIZE}	[default, off, on, size, speed, full]")
    message(STATUS "JLN_PEDANTIC=${JLN_PEDANTIC}	[on, off, as_error]")
    message(STATUS "JLN_RELRO=${JLN_RELRO}	[default, off, on, full]")
    message(STATUS "JLN_REPORT_TEMPLATE=${JLN_REPORT_TEMPLATE}	[off, on]")
    message(STATUS "JLN_SANITIZERS=${JLN_SANITIZERS}	[off, on]")
    message(STATUS "JLN_SANITIZERS_EXTRA=${JLN_SANITIZERS_EXTRA}	[off, thread, pointer]")
    message(STATUS "JLN_STACK_PROTECTOR=${JLN_STACK_PROTECTOR}	[off, on, strong, all]")
    message(STATUS "JLN_SUGGESTS=${JLN_SUGGESTS}	[off, on]")
    message(STATUS "JLN_WARNINGS=${JLN_WARNINGS}	[on, off, strict]")
    message(STATUS "JLN_WARNINGS_AS_ERROR=${JLN_WARNINGS_AS_ERROR}	[off, on]")
  endif()

endfunction()

# jln_target_interface(<libname> [<jln-option> <value>]... [DISABLE_OTHERS on|off])
function(jln_target_interface name type)
  jln_flags(CXX_VAR cxx LINK_VAR link ${ARGV})
  target_link_libraries(${name} INTERFACE ${link})
  target_compile_options(${name} INTERFACE ${cxx})
endfunction()

# jln_flags(CXX_VAR <out-variable> LINK_VAR <out-variable> [<jln-option> <value>]... [DISABLE_OTHERS on|off])
function(jln_flags)
  set(CXX_FLAGS "")
  set(LINK_LINK "")
  cmake_parse_arguments(JLN_FLAGS "DISABLE_OTHERS" "CXX_VAR;LINK_VAR;COLOR;COVERAGE;DEBUG;FAST_MATH;LIBCXX_DEBUG;LTO;OPTIMIZE;PEDANTIC;RELRO;REPORT_TEMPLATE;SANITIZERS;SANITIZERS_EXTRA;STACK_PROTECTOR;SUGGESTS;WARNINGS;WARNINGS_AS_ERROR" "" ${ARGN})

  if(NOT DEFINED JLN_FLAGS_COLOR)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_COLOR "default")
    else()
      set(JLN_FLAGS_COLOR "${JLN_COLOR}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_COVERAGE)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_COVERAGE "off")
    else()
      set(JLN_FLAGS_COVERAGE "${JLN_COVERAGE}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_DEBUG)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_DEBUG "off")
    else()
      set(JLN_FLAGS_DEBUG "${JLN_DEBUG}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_FAST_MATH)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_FAST_MATH "off")
    else()
      set(JLN_FLAGS_FAST_MATH "${JLN_FAST_MATH}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_LIBCXX_DEBUG)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_LIBCXX_DEBUG "off")
    else()
      set(JLN_FLAGS_LIBCXX_DEBUG "${JLN_LIBCXX_DEBUG}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_LTO)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_LTO "off")
    else()
      set(JLN_FLAGS_LTO "${JLN_LTO}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_OPTIMIZE)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_OPTIMIZE "default")
    else()
      set(JLN_FLAGS_OPTIMIZE "${JLN_OPTIMIZE}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_PEDANTIC)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_PEDANTIC "off")
    else()
      set(JLN_FLAGS_PEDANTIC "${JLN_PEDANTIC}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_RELRO)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_RELRO "default")
    else()
      set(JLN_FLAGS_RELRO "${JLN_RELRO}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_REPORT_TEMPLATE)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_REPORT_TEMPLATE "off")
    else()
      set(JLN_FLAGS_REPORT_TEMPLATE "${JLN_REPORT_TEMPLATE}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_SANITIZERS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_SANITIZERS "off")
    else()
      set(JLN_FLAGS_SANITIZERS "${JLN_SANITIZERS}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_SANITIZERS_EXTRA)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_SANITIZERS_EXTRA "off")
    else()
      set(JLN_FLAGS_SANITIZERS_EXTRA "${JLN_SANITIZERS_EXTRA}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_STACK_PROTECTOR)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_STACK_PROTECTOR "off")
    else()
      set(JLN_FLAGS_STACK_PROTECTOR "${JLN_STACK_PROTECTOR}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_SUGGESTS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_SUGGESTS "off")
    else()
      set(JLN_FLAGS_SUGGESTS "${JLN_SUGGESTS}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_WARNINGS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_WARNINGS "off")
    else()
      set(JLN_FLAGS_WARNINGS "${JLN_WARNINGS}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_WARNINGS_AS_ERROR)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_WARNINGS_AS_ERROR "off")
    else()
      set(JLN_FLAGS_WARNINGS_AS_ERROR "${JLN_WARNINGS_AS_ERROR}")
    endif()
  endif()

  if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang" ) )
  
    if (  NOT ( JLN_FLAGS_LTO STREQUAL "off") )
    
      set(CXX_FLAGS ${CXX_FLAGS}  "-flto")
      set(LINK_FLAGS ${LINK_FLAGS}  "-flto")
      if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.0" ) ) )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-flto-odr-type-merging")
        set(LINK_FLAGS ${LINK_FLAGS}  "-flto-odr-type-merging")
        if (  JLN_FLAGS_LTO STREQUAL "fat" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-ffat-lto-objects")

        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_COVERAGE STREQUAL "off") )
    
      set(CXX_FLAGS ${CXX_FLAGS}  "--coverage")
      set(LINK_FLAGS ${LINK_FLAGS}  "--coverage")
      if (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
      
        set(LINK_FLAGS ${LINK_FLAGS}  "-lprofile_rt")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_DEBUG STREQUAL "off") )
    
      set(CXX_FLAGS ${CXX_FLAGS}  "-g")

    endif()
    if (  NOT ( JLN_FLAGS_FAST_MATH STREQUAL "off") )
    
      set(CXX_FLAGS ${CXX_FLAGS}  "-ffast-math")

    endif()
    if (  NOT ( JLN_FLAGS_OPTIMIZE STREQUAL "default") )
    
      if (  JLN_FLAGS_OPTIMIZE STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-O2")

      
      elseif (  JLN_FLAGS_OPTIMIZE STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-O0")

      
      elseif (  JLN_FLAGS_OPTIMIZE STREQUAL "size" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-Os")

      
      elseif (  JLN_FLAGS_OPTIMIZE STREQUAL "speed" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-O3")

      
      elseif (  JLN_FLAGS_OPTIMIZE STREQUAL "full" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-O3" "-march=native")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_PEDANTIC STREQUAL "off") )
    
      set(CXX_FLAGS ${CXX_FLAGS}  "-pedantic")

      if (  JLN_FLAGS_PEDANTIC STREQUAL "as_error" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-pedantic-errors")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_STACK_PROTECTOR STREQUAL "off") )
    
      set(CXX_FLAGS ${CXX_FLAGS}  "-Wstack-protector" "-fstack-protector" -D_FORTIFY_SOURCE=2)
      set(LINK_FLAGS ${LINK_FLAGS}  "-fstack-protector")
      if (  JLN_FLAGS_STACK_PROTECTOR STREQUAL "strong" )
      
        if (  NOT ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fstack-protector-strong")
          set(LINK_FLAGS ${LINK_FLAGS}  "-fstack-protector-strong")
        endif()
      
      elseif (  JLN_FLAGS_STACK_PROTECTOR STREQUAL "all" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-fstack-protector-all")
        set(LINK_FLAGS ${LINK_FLAGS}  "-fstack-protector-all")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_RELRO STREQUAL "default") )
    
      if (  JLN_FLAGS_RELRO STREQUAL "off" )
      
        set(LINK_FLAGS ${LINK_FLAGS}  "-Wl,-z,norelro")
      
      elseif (  JLN_FLAGS_RELRO STREQUAL "on" )
      
        set(LINK_FLAGS ${LINK_FLAGS}  "-Wl,-z,relro")
      
      elseif (  JLN_FLAGS_RELRO STREQUAL "full" )
      
        set(LINK_FLAGS ${LINK_FLAGS}  "-Wl,-z,relro,-z,now")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SUGGESTS STREQUAL "off") )
    
      if (  CMAKE_CXX_COMPILER_ID MATCHES "GNU" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-Wsuggest-attribute=pure" "-Wsuggest-attribute=const")

        if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.0" ) )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-Wsuggest-final-types" "-Wsuggest-final-methods")

        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_LIBCXX_DEBUG STREQUAL "off") )
    
      set(CXX_FLAGS ${CXX_FLAGS}  -D_LIBCPP_DEBUG=1)

      if (  JLN_FLAGS_LIBCXX_DEBUG STREQUAL "assert_as_exceptions" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  -D_LIBCPP_DEBUG_USE_EXCEPTIONS)

      endif()
      if (  JLN_FLAGS_LIBCXX_DEBUG STREQUAL "allow_broken_abi" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  -D_GLIBCXX_DEBUG)

      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  -D_GLIBCXX_ASSERTIONS)

      endif()
      if (  NOT ( JLN_FLAGS_PEDANTIC STREQUAL "off") )
      
        set(CXX_FLAGS ${CXX_FLAGS}  -D_GLIBCXX_DEBUG_PEDANTIC)

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_WARNINGS STREQUAL "off") )
    
      if (  CMAKE_CXX_COMPILER_ID MATCHES "GNU" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-Wall" "-Wextra" "-Wcast-align" "-Wcast-qual" "-Wdisabled-optimization" "-Wfloat-equal" "-Wformat-security" "-Wformat-signedness" "-Wformat=2" "-Wmissing-declarations" "-Wmissing-include-dirs" "-Wnon-virtual-dtor" "-Wold-style-cast" "-Woverloaded-virtual" "-Wpacked" "-Wredundant-decls" "-Wundef" "-Wuninitialized" "-Wunused-macros" "-Wvla" "-Wconversion")

        if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.7" ) )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-Wsuggest-attribute=noreturn" "-Wzero-as-null-pointer-constant" "-Wlogical-op" "-Wvector-operation-performance" "-Wdouble-promotion" "-Wtrampolines")

          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.8" ) )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "-Wuseless-cast")

            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) )
            
              set(CXX_FLAGS ${CXX_FLAGS}  "-Wconditionally-supported" "-Wfloat-conversion" "-Wopenmp-simd")

              if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.1" ) )
              
                set(CXX_FLAGS ${CXX_FLAGS}  "-fsized-deallocation" "-Warray-bounds=2" "-Wconditionally-supported" "-Wnoexcept" "-Wsized-deallocation" "-Wstrict-null-sentinel" "-Wsuggest-override")

                if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "6.1" ) )
                
                  set(CXX_FLAGS ${CXX_FLAGS}  "-Wduplicated-cond" "-Wnull-dereference")

                  if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0" ) )
                  
                    set(CXX_FLAGS ${CXX_FLAGS}  "-Waligned-new")

                    if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.1" ) )
                    
                      set(CXX_FLAGS ${CXX_FLAGS}  "-Walloc-zero" "-Walloca" "-Wformat-overflow" "-Wshadow=compatible-local")

                      if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) )
                      
                        set(CXX_FLAGS ${CXX_FLAGS}  "-Wclass-memaccess")

                      endif()
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
        endif()
      endif()
      if (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-Weverything" "-Wno-c++98-compat" "-Wno-c++98-compat-pedantic" "-Wno-mismatched-tags" "-Wno-padded" "-Wno-shadow" "-Wno-global-constructors" "-Wno-weak-vtables" "-Wno-exit-time-destructors" "-Wno-covered-switch-default" "-Wno-switch-default" "-Wno-switch-enum" "-Wno-inconsistent-missing-destructor-override")

      endif()
      if (  JLN_FLAGS_WARNINGS STREQUAL "strict" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-Wsign-conversion")

        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-Wcast-align=strict")

        endif()
      
      elseif (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-Wno-conversion" "-Wno-sign-conversion")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SANITIZERS STREQUAL "off") )
    
      if (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
      
        if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.1" ) )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=undefined" "-fsanitize=address" "-fsanitize-address-use-after-scope" "-fno-omit-frame-pointer" "-fno-optimize-sibling-calls")
          set(LINK_FLAGS ${LINK_FLAGS}  "-lubsan" "-lasan")
          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.4" ) )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=leak")
            set(LINK_FLAGS ${LINK_FLAGS}  "-llsan")
            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "6.0" ) )
            
              set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=bounds")
              set(LINK_FLAGS ${LINK_FLAGS}  "-fsanitize=bounds")
            endif()
          endif()
        endif()
      
      else()
      
        if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.8" ) )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=address" "-fno-omit-frame-pointer" "-fno-optimize-sibling-calls")
          set(LINK_FLAGS ${LINK_FLAGS}  "-lasan")
          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=undefined" "-fsanitize=leak")
            set(LINK_FLAGS ${LINK_FLAGS}  "-lubsan" "-llsan")
            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "6.0" ) )
            
              set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=bounds" "-fsanitize=bounds-strict")

            endif()
          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SANITIZERS_EXTRA STREQUAL "off") )
    
      if (  JLN_FLAGS_SANITIZERS_EXTRA STREQUAL "thread" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=thread")

      
      elseif (  JLN_FLAGS_SANITIZERS_EXTRA STREQUAL "pointer" )
      
        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=pointer-compare" "-fsanitize=pointer-subtract")

        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_REPORT_TEMPLATE STREQUAL "off") )
    
      if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-fno-elide-type" "-fdiagnostics-show-template-tree")

      endif()
      if (  ( CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.4" ) ) )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-fno-elide-type")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_COLOR STREQUAL "default") )
    
      if (  ( ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) ) OR CMAKE_CXX_COMPILER_ID MATCHES "Clang" ) )
      
        if (  JLN_FLAGS_COLOR STREQUAL "auto" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fdiagnostics-color=auto")

        
        elseif (  JLN_FLAGS_COLOR STREQUAL "never" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fdiagnostics-color=never")

        
        elseif (  JLN_FLAGS_COLOR STREQUAL "always" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fdiagnostics-color=always")

        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "off") )
    
      set(CXX_FLAGS ${CXX_FLAGS}  "-Werror")

    endif()
  endif()
set(${JLN_FLAGS_CXX_VAR} ${CXX_FLAGS} PARENT_SCOPE)
set(${JLN_FLAGS_LINK_VAR} ${LINK_FLAGS} PARENT_SCOPE)
endfunction()
