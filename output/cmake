# init default values
# jln_init_flags([<jln-option> <default_value>]... [AUTO_PROFILE on] [VERBOSE on])
# AUTO_PROFILE: enables options based on CMAKE_BUILD_TYPE (assumes "Debug" if CMAKE_BUILD_TYPE is empty)
# When jln_init_flags() is called without option, AUTO_PROFILE=on.
#  Otherwise, AUTO_PROFILE=off and `on` value must be explicitly added.
function(jln_init_flags)
  cmake_parse_arguments(JLN_DEFAULT_FLAG "" "VERBOSE;COLOR;CONTROL_FLOW;COVERAGE;CPU;DEBUG;DIAGNOSTICS_FORMAT;DIAGNOSTICS_SHOW_TEMPLATE_TREE;ELIDE_TYPE;EXCEPTIONS;FIX_COMPILER_ERROR;LINKER;LTO;OPTIMIZATION;PEDANTIC;PIE;RELRO;REPRODUCIBLE_BUILD_WARNINGS;RTTI;SANITIZERS;SANITIZERS_EXTRA;SHADOW_WARNINGS;STACK_PROTECTOR;STL_DEBUG;STL_FIX;SUGGESTIONS;WARNINGS;WARNINGS_AS_ERROR;WHOLE_PROGRAM;AUTO_PROFILE" "" ${ARGN})

  if(DEFINED JLN_DEFAULT_FLAG_VERBOSE)
    set(JLN_VERBOSE ${JLN_DEFAULT_FLAG_VERBOSE})
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_AUTO_PROFILE)
    set(JLN_AUTO_PROFILE ${JLN_DEFAULT_FLAG_AUTO_PROFILE})
  elseif(NOT (DEFINED JLN_DEFAULT_FLAG_COLOR) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_CONTROL_FLOW) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_COVERAGE) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_CPU) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_DEBUG) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_DIAGNOSTICS_FORMAT) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_DIAGNOSTICS_SHOW_TEMPLATE_TREE) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_ELIDE_TYPE) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_EXCEPTIONS) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_FIX_COMPILER_ERROR) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_LINKER) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_LTO) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_OPTIMIZATION) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_PEDANTIC) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_PIE) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_RELRO) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_REPRODUCIBLE_BUILD_WARNINGS) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_RTTI) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_SANITIZERS) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_SANITIZERS_EXTRA) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_SHADOW_WARNINGS) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_STACK_PROTECTOR) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_STL_DEBUG) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_STL_FIX) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_SUGGESTIONS) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_WARNINGS) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_WARNINGS_AS_ERROR) AND
         NOT (DEFINED JLN_DEFAULT_FLAG_WHOLE_PROGRAM))
    set(JLN_AUTO_PROFILE "on")
  endif()

  if("${JLN_AUTO_PROFILE}" STREQUAL "on")
    if("${CMAKE_BUILD_TYPE}" STREQUAL "")
      set(JLN_BUILD_TYPE "Debug")
    else()
      set(JLN_BUILD_TYPE ${CMAKE_BUILD_TYPE})
    endif()

    if("Debug" STREQUAL "${JLN_BUILD_TYPE}")
      if(NOT(DEFINED JLN_DEFAULT_FLAG_CONTROL_FLOW))
        set(JLN_DEFAULT_FLAG_CONTROL_FLOW "on")
      endif()
      if(NOT(DEFINED JLN_DEFAULT_FLAG_DEBUG))
        set(JLN_DEFAULT_FLAG_DEBUG "on")
      endif()
      if(NOT(DEFINED JLN_DEFAULT_FLAG_SANITIZERS))
        set(JLN_DEFAULT_FLAG_SANITIZERS "on")
      endif()
      if(NOT(DEFINED JLN_DEFAULT_FLAG_STL_DEBUG))
        set(JLN_DEFAULT_FLAG_STL_DEBUG "on")
      endif()
    endif()

    if("RelWithDebInfo" STREQUAL "${JLN_BUILD_TYPE}")
      if(NOT(DEFINED JLN_DEFAULT_FLAG_DEBUG))
        set(JLN_DEFAULT_FLAG_DEBUG "on")
      endif()
      if(NOT(DEFINED JLN_DEFAULT_FLAG_LINKER))
        set(JLN_DEFAULT_FLAG_LINKER "gold")
      endif()
      if(NOT(DEFINED JLN_DEFAULT_FLAG_LTO))
        set(JLN_DEFAULT_FLAG_LTO "on")
      endif()
      if(NOT(DEFINED JLN_DEFAULT_FLAG_OPTIMIZATION))
        set(JLN_DEFAULT_FLAG_OPTIMIZATION "g")
      endif()
    endif()

    if("MinSizeRel" STREQUAL "${JLN_BUILD_TYPE}")
      if(NOT(DEFINED JLN_DEFAULT_FLAG_CPU))
        set(JLN_DEFAULT_FLAG_CPU "native")
      endif()
      if(NOT(DEFINED JLN_DEFAULT_FLAG_LINKER))
        set(JLN_DEFAULT_FLAG_LINKER "gold")
      endif()
      if(NOT(DEFINED JLN_DEFAULT_FLAG_LTO))
        set(JLN_DEFAULT_FLAG_LTO "on")
      endif()
      if(NOT(DEFINED JLN_DEFAULT_FLAG_OPTIMIZATION))
        set(JLN_DEFAULT_FLAG_OPTIMIZATION "size")
      endif()
    endif()

    if("Release" STREQUAL "${JLN_BUILD_TYPE}")
      if(NOT(DEFINED JLN_DEFAULT_FLAG_CPU))
        set(JLN_DEFAULT_FLAG_CPU "native")
      endif()
      if(NOT(DEFINED JLN_DEFAULT_FLAG_LINKER))
        set(JLN_DEFAULT_FLAG_LINKER "gold")
      endif()
      if(NOT(DEFINED JLN_DEFAULT_FLAG_LTO))
        set(JLN_DEFAULT_FLAG_LTO "on")
      endif()
      if(NOT(DEFINED JLN_DEFAULT_FLAG_OPTIMIZATION))
        set(JLN_DEFAULT_FLAG_OPTIMIZATION "2")
      endif()
    endif()
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_COLOR)
    set(JLN_COLOR ${JLN_DEFAULT_FLAG_COLOR} CACHE STRING "")
  else()
    set(JLN_COLOR "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_COLOR) OR ("auto" STREQUAL JLN_COLOR) OR ("never" STREQUAL JLN_COLOR) OR ("always" STREQUAL JLN_COLOR)))
    message(FATAL_ERROR "Unknow value \"${JLN_COLOR}\" for JLN_COLOR, expected: default, auto, never, always")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_CONTROL_FLOW)
    set(JLN_CONTROL_FLOW ${JLN_DEFAULT_FLAG_CONTROL_FLOW} CACHE STRING "")
  else()
    set(JLN_CONTROL_FLOW "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_CONTROL_FLOW) OR ("off" STREQUAL JLN_CONTROL_FLOW) OR ("on" STREQUAL JLN_CONTROL_FLOW)))
    message(FATAL_ERROR "Unknow value \"${JLN_CONTROL_FLOW}\" for JLN_CONTROL_FLOW, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_COVERAGE)
    set(JLN_COVERAGE ${JLN_DEFAULT_FLAG_COVERAGE} CACHE STRING "")
  else()
    set(JLN_COVERAGE "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_COVERAGE) OR ("off" STREQUAL JLN_COVERAGE) OR ("on" STREQUAL JLN_COVERAGE)))
    message(FATAL_ERROR "Unknow value \"${JLN_COVERAGE}\" for JLN_COVERAGE, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_CPU)
    set(JLN_CPU ${JLN_DEFAULT_FLAG_CPU} CACHE STRING "")
  else()
    set(JLN_CPU "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_CPU) OR ("generic" STREQUAL JLN_CPU) OR ("native" STREQUAL JLN_CPU)))
    message(FATAL_ERROR "Unknow value \"${JLN_CPU}\" for JLN_CPU, expected: default, generic, native")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_DEBUG)
    set(JLN_DEBUG ${JLN_DEFAULT_FLAG_DEBUG} CACHE STRING "")
  else()
    set(JLN_DEBUG "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_DEBUG) OR ("off" STREQUAL JLN_DEBUG) OR ("on" STREQUAL JLN_DEBUG) OR ("line_tables_only" STREQUAL JLN_DEBUG) OR ("gdb" STREQUAL JLN_DEBUG) OR ("lldb" STREQUAL JLN_DEBUG) OR ("sce" STREQUAL JLN_DEBUG)))
    message(FATAL_ERROR "Unknow value \"${JLN_DEBUG}\" for JLN_DEBUG, expected: default, off, on, line_tables_only, gdb, lldb, sce")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_DIAGNOSTICS_FORMAT)
    set(JLN_DIAGNOSTICS_FORMAT ${JLN_DEFAULT_FLAG_DIAGNOSTICS_FORMAT} CACHE STRING "")
  else()
    set(JLN_DIAGNOSTICS_FORMAT "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_DIAGNOSTICS_FORMAT) OR ("fixits" STREQUAL JLN_DIAGNOSTICS_FORMAT) OR ("patch" STREQUAL JLN_DIAGNOSTICS_FORMAT) OR ("print_source_range_info" STREQUAL JLN_DIAGNOSTICS_FORMAT)))
    message(FATAL_ERROR "Unknow value \"${JLN_DIAGNOSTICS_FORMAT}\" for JLN_DIAGNOSTICS_FORMAT, expected: default, fixits, patch, print_source_range_info")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_DIAGNOSTICS_SHOW_TEMPLATE_TREE)
    set(JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE ${JLN_DEFAULT_FLAG_DIAGNOSTICS_SHOW_TEMPLATE_TREE} CACHE STRING "")
  else()
    set(JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE) OR ("off" STREQUAL JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE) OR ("on" STREQUAL JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE)))
    message(FATAL_ERROR "Unknow value \"${JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE}\" for JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_ELIDE_TYPE)
    set(JLN_ELIDE_TYPE ${JLN_DEFAULT_FLAG_ELIDE_TYPE} CACHE STRING "")
  else()
    set(JLN_ELIDE_TYPE "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_ELIDE_TYPE) OR ("off" STREQUAL JLN_ELIDE_TYPE) OR ("on" STREQUAL JLN_ELIDE_TYPE)))
    message(FATAL_ERROR "Unknow value \"${JLN_ELIDE_TYPE}\" for JLN_ELIDE_TYPE, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_EXCEPTIONS)
    set(JLN_EXCEPTIONS ${JLN_DEFAULT_FLAG_EXCEPTIONS} CACHE STRING "")
  else()
    set(JLN_EXCEPTIONS "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_EXCEPTIONS) OR ("off" STREQUAL JLN_EXCEPTIONS) OR ("on" STREQUAL JLN_EXCEPTIONS)))
    message(FATAL_ERROR "Unknow value \"${JLN_EXCEPTIONS}\" for JLN_EXCEPTIONS, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_FIX_COMPILER_ERROR)
    set(JLN_FIX_COMPILER_ERROR ${JLN_DEFAULT_FLAG_FIX_COMPILER_ERROR} CACHE STRING "")
  else()
    set(JLN_FIX_COMPILER_ERROR "on" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_FIX_COMPILER_ERROR) OR ("off" STREQUAL JLN_FIX_COMPILER_ERROR) OR ("on" STREQUAL JLN_FIX_COMPILER_ERROR)))
    message(FATAL_ERROR "Unknow value \"${JLN_FIX_COMPILER_ERROR}\" for JLN_FIX_COMPILER_ERROR, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_LINKER)
    set(JLN_LINKER ${JLN_DEFAULT_FLAG_LINKER} CACHE STRING "")
  else()
    set(JLN_LINKER "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_LINKER) OR ("bfd" STREQUAL JLN_LINKER) OR ("gold" STREQUAL JLN_LINKER) OR ("lld" STREQUAL JLN_LINKER)))
    message(FATAL_ERROR "Unknow value \"${JLN_LINKER}\" for JLN_LINKER, expected: default, bfd, gold, lld")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_LTO)
    set(JLN_LTO ${JLN_DEFAULT_FLAG_LTO} CACHE STRING "")
  else()
    set(JLN_LTO "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_LTO) OR ("off" STREQUAL JLN_LTO) OR ("on" STREQUAL JLN_LTO) OR ("fat" STREQUAL JLN_LTO) OR ("linker_plugin" STREQUAL JLN_LTO)))
    message(FATAL_ERROR "Unknow value \"${JLN_LTO}\" for JLN_LTO, expected: default, off, on, fat, linker_plugin")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_OPTIMIZATION)
    set(JLN_OPTIMIZATION ${JLN_DEFAULT_FLAG_OPTIMIZATION} CACHE STRING "")
  else()
    set(JLN_OPTIMIZATION "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_OPTIMIZATION) OR ("0" STREQUAL JLN_OPTIMIZATION) OR ("g" STREQUAL JLN_OPTIMIZATION) OR ("1" STREQUAL JLN_OPTIMIZATION) OR ("2" STREQUAL JLN_OPTIMIZATION) OR ("3" STREQUAL JLN_OPTIMIZATION) OR ("fast" STREQUAL JLN_OPTIMIZATION) OR ("size" STREQUAL JLN_OPTIMIZATION)))
    message(FATAL_ERROR "Unknow value \"${JLN_OPTIMIZATION}\" for JLN_OPTIMIZATION, expected: default, 0, g, 1, 2, 3, fast, size")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_PEDANTIC)
    set(JLN_PEDANTIC ${JLN_DEFAULT_FLAG_PEDANTIC} CACHE STRING "")
  else()
    set(JLN_PEDANTIC "on" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_PEDANTIC) OR ("off" STREQUAL JLN_PEDANTIC) OR ("on" STREQUAL JLN_PEDANTIC) OR ("as_error" STREQUAL JLN_PEDANTIC)))
    message(FATAL_ERROR "Unknow value \"${JLN_PEDANTIC}\" for JLN_PEDANTIC, expected: default, off, on, as_error")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_PIE)
    set(JLN_PIE ${JLN_DEFAULT_FLAG_PIE} CACHE STRING "")
  else()
    set(JLN_PIE "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_PIE) OR ("off" STREQUAL JLN_PIE) OR ("on" STREQUAL JLN_PIE) OR ("pic" STREQUAL JLN_PIE)))
    message(FATAL_ERROR "Unknow value \"${JLN_PIE}\" for JLN_PIE, expected: default, off, on, pic")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_RELRO)
    set(JLN_RELRO ${JLN_DEFAULT_FLAG_RELRO} CACHE STRING "")
  else()
    set(JLN_RELRO "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_RELRO) OR ("off" STREQUAL JLN_RELRO) OR ("on" STREQUAL JLN_RELRO) OR ("full" STREQUAL JLN_RELRO)))
    message(FATAL_ERROR "Unknow value \"${JLN_RELRO}\" for JLN_RELRO, expected: default, off, on, full")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_REPRODUCIBLE_BUILD_WARNINGS)
    set(JLN_REPRODUCIBLE_BUILD_WARNINGS ${JLN_DEFAULT_FLAG_REPRODUCIBLE_BUILD_WARNINGS} CACHE STRING "")
  else()
    set(JLN_REPRODUCIBLE_BUILD_WARNINGS "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_REPRODUCIBLE_BUILD_WARNINGS) OR ("off" STREQUAL JLN_REPRODUCIBLE_BUILD_WARNINGS) OR ("on" STREQUAL JLN_REPRODUCIBLE_BUILD_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_REPRODUCIBLE_BUILD_WARNINGS}\" for JLN_REPRODUCIBLE_BUILD_WARNINGS, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_RTTI)
    set(JLN_RTTI ${JLN_DEFAULT_FLAG_RTTI} CACHE STRING "")
  else()
    set(JLN_RTTI "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_RTTI) OR ("off" STREQUAL JLN_RTTI) OR ("on" STREQUAL JLN_RTTI)))
    message(FATAL_ERROR "Unknow value \"${JLN_RTTI}\" for JLN_RTTI, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SANITIZERS)
    set(JLN_SANITIZERS ${JLN_DEFAULT_FLAG_SANITIZERS} CACHE STRING "")
  else()
    set(JLN_SANITIZERS "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_SANITIZERS) OR ("off" STREQUAL JLN_SANITIZERS) OR ("on" STREQUAL JLN_SANITIZERS)))
    message(FATAL_ERROR "Unknow value \"${JLN_SANITIZERS}\" for JLN_SANITIZERS, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SANITIZERS_EXTRA)
    set(JLN_SANITIZERS_EXTRA ${JLN_DEFAULT_FLAG_SANITIZERS_EXTRA} CACHE STRING "")
  else()
    set(JLN_SANITIZERS_EXTRA "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_SANITIZERS_EXTRA) OR ("off" STREQUAL JLN_SANITIZERS_EXTRA) OR ("thread" STREQUAL JLN_SANITIZERS_EXTRA) OR ("pointer" STREQUAL JLN_SANITIZERS_EXTRA)))
    message(FATAL_ERROR "Unknow value \"${JLN_SANITIZERS_EXTRA}\" for JLN_SANITIZERS_EXTRA, expected: default, off, thread, pointer")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SHADOW_WARNINGS)
    set(JLN_SHADOW_WARNINGS ${JLN_DEFAULT_FLAG_SHADOW_WARNINGS} CACHE STRING "")
  else()
    set(JLN_SHADOW_WARNINGS "off" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_SHADOW_WARNINGS) OR ("off" STREQUAL JLN_SHADOW_WARNINGS) OR ("on" STREQUAL JLN_SHADOW_WARNINGS) OR ("local" STREQUAL JLN_SHADOW_WARNINGS) OR ("compatible_local" STREQUAL JLN_SHADOW_WARNINGS) OR ("all" STREQUAL JLN_SHADOW_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_SHADOW_WARNINGS}\" for JLN_SHADOW_WARNINGS, expected: default, off, on, local, compatible_local, all")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_STACK_PROTECTOR)
    set(JLN_STACK_PROTECTOR ${JLN_DEFAULT_FLAG_STACK_PROTECTOR} CACHE STRING "")
  else()
    set(JLN_STACK_PROTECTOR "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_STACK_PROTECTOR) OR ("off" STREQUAL JLN_STACK_PROTECTOR) OR ("on" STREQUAL JLN_STACK_PROTECTOR) OR ("strong" STREQUAL JLN_STACK_PROTECTOR) OR ("all" STREQUAL JLN_STACK_PROTECTOR)))
    message(FATAL_ERROR "Unknow value \"${JLN_STACK_PROTECTOR}\" for JLN_STACK_PROTECTOR, expected: default, off, on, strong, all")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_STL_DEBUG)
    set(JLN_STL_DEBUG ${JLN_DEFAULT_FLAG_STL_DEBUG} CACHE STRING "")
  else()
    set(JLN_STL_DEBUG "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_STL_DEBUG) OR ("off" STREQUAL JLN_STL_DEBUG) OR ("on" STREQUAL JLN_STL_DEBUG) OR ("allow_broken_abi" STREQUAL JLN_STL_DEBUG) OR ("allow_broken_abi_and_bugged" STREQUAL JLN_STL_DEBUG) OR ("assert_as_exception" STREQUAL JLN_STL_DEBUG)))
    message(FATAL_ERROR "Unknow value \"${JLN_STL_DEBUG}\" for JLN_STL_DEBUG, expected: default, off, on, allow_broken_abi, allow_broken_abi_and_bugged, assert_as_exception")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_STL_FIX)
    set(JLN_STL_FIX ${JLN_DEFAULT_FLAG_STL_FIX} CACHE STRING "")
  else()
    set(JLN_STL_FIX "on" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_STL_FIX) OR ("off" STREQUAL JLN_STL_FIX) OR ("on" STREQUAL JLN_STL_FIX)))
    message(FATAL_ERROR "Unknow value \"${JLN_STL_FIX}\" for JLN_STL_FIX, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SUGGESTIONS)
    set(JLN_SUGGESTIONS ${JLN_DEFAULT_FLAG_SUGGESTIONS} CACHE STRING "")
  else()
    set(JLN_SUGGESTIONS "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_SUGGESTIONS) OR ("off" STREQUAL JLN_SUGGESTIONS) OR ("on" STREQUAL JLN_SUGGESTIONS)))
    message(FATAL_ERROR "Unknow value \"${JLN_SUGGESTIONS}\" for JLN_SUGGESTIONS, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_WARNINGS)
    set(JLN_WARNINGS ${JLN_DEFAULT_FLAG_WARNINGS} CACHE STRING "")
  else()
    set(JLN_WARNINGS "on" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_WARNINGS) OR ("off" STREQUAL JLN_WARNINGS) OR ("on" STREQUAL JLN_WARNINGS) OR ("strict" STREQUAL JLN_WARNINGS) OR ("very_strict" STREQUAL JLN_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_WARNINGS}\" for JLN_WARNINGS, expected: default, off, on, strict, very_strict")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_WARNINGS_AS_ERROR)
    set(JLN_WARNINGS_AS_ERROR ${JLN_DEFAULT_FLAG_WARNINGS_AS_ERROR} CACHE STRING "")
  else()
    set(JLN_WARNINGS_AS_ERROR "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_WARNINGS_AS_ERROR) OR ("off" STREQUAL JLN_WARNINGS_AS_ERROR) OR ("on" STREQUAL JLN_WARNINGS_AS_ERROR) OR ("basic" STREQUAL JLN_WARNINGS_AS_ERROR)))
    message(FATAL_ERROR "Unknow value \"${JLN_WARNINGS_AS_ERROR}\" for JLN_WARNINGS_AS_ERROR, expected: default, off, on, basic")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_WHOLE_PROGRAM)
    set(JLN_WHOLE_PROGRAM ${JLN_DEFAULT_FLAG_WHOLE_PROGRAM} CACHE STRING "")
  else()
    set(JLN_WHOLE_PROGRAM "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_WHOLE_PROGRAM) OR ("off" STREQUAL JLN_WHOLE_PROGRAM) OR ("on" STREQUAL JLN_WHOLE_PROGRAM) OR ("strip_all" STREQUAL JLN_WHOLE_PROGRAM)))
    message(FATAL_ERROR "Unknow value \"${JLN_WHOLE_PROGRAM}\" for JLN_WHOLE_PROGRAM, expected: default, off, on, strip_all")
  endif()

  if("${JLN_VERBOSE}" STREQUAL "on" OR "${JLN_VERBOSE}" STREQUAL "1")
    message(STATUS "JLN_AUTO_PROFILE = ${JLN_AUTO_PROFILE}	[off, on]")
    message(STATUS "JLN_COLOR = ${JLN_COLOR}	[default, auto, never, always]")
    message(STATUS "JLN_CONTROL_FLOW = ${JLN_CONTROL_FLOW}	[default, off, on]")
    message(STATUS "JLN_COVERAGE = ${JLN_COVERAGE}	[default, off, on]")
    message(STATUS "JLN_CPU = ${JLN_CPU}	[default, generic, native]")
    message(STATUS "JLN_DEBUG = ${JLN_DEBUG}	[default, off, on, line_tables_only, gdb, lldb, sce]")
    message(STATUS "JLN_DIAGNOSTICS_FORMAT = ${JLN_DIAGNOSTICS_FORMAT}	[default, fixits, patch, print_source_range_info]")
    message(STATUS "JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE = ${JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE}	[default, off, on]")
    message(STATUS "JLN_ELIDE_TYPE = ${JLN_ELIDE_TYPE}	[default, off, on]")
    message(STATUS "JLN_EXCEPTIONS = ${JLN_EXCEPTIONS}	[default, off, on]")
    message(STATUS "JLN_FIX_COMPILER_ERROR = ${JLN_FIX_COMPILER_ERROR}	[default, off, on]")
    message(STATUS "JLN_LINKER = ${JLN_LINKER}	[default, bfd, gold, lld]")
    message(STATUS "JLN_LTO = ${JLN_LTO}	[default, off, on, fat, linker_plugin]")
    message(STATUS "JLN_OPTIMIZATION = ${JLN_OPTIMIZATION}	[default, 0, g, 1, 2, 3, fast, size]")
    message(STATUS "JLN_PEDANTIC = ${JLN_PEDANTIC}	[default, off, on, as_error]")
    message(STATUS "JLN_PIE = ${JLN_PIE}	[default, off, on, pic]")
    message(STATUS "JLN_RELRO = ${JLN_RELRO}	[default, off, on, full]")
    message(STATUS "JLN_REPRODUCIBLE_BUILD_WARNINGS = ${JLN_REPRODUCIBLE_BUILD_WARNINGS}	[default, off, on]")
    message(STATUS "JLN_RTTI = ${JLN_RTTI}	[default, off, on]")
    message(STATUS "JLN_SANITIZERS = ${JLN_SANITIZERS}	[default, off, on]")
    message(STATUS "JLN_SANITIZERS_EXTRA = ${JLN_SANITIZERS_EXTRA}	[default, off, thread, pointer]")
    message(STATUS "JLN_SHADOW_WARNINGS = ${JLN_SHADOW_WARNINGS}	[default, off, on, local, compatible_local, all]")
    message(STATUS "JLN_STACK_PROTECTOR = ${JLN_STACK_PROTECTOR}	[default, off, on, strong, all]")
    message(STATUS "JLN_STL_DEBUG = ${JLN_STL_DEBUG}	[default, off, on, allow_broken_abi, allow_broken_abi_and_bugged, assert_as_exception]")
    message(STATUS "JLN_STL_FIX = ${JLN_STL_FIX}	[default, off, on]")
    message(STATUS "JLN_SUGGESTIONS = ${JLN_SUGGESTIONS}	[default, off, on]")
    message(STATUS "JLN_WARNINGS = ${JLN_WARNINGS}	[default, off, on, strict, very_strict]")
    message(STATUS "JLN_WARNINGS_AS_ERROR = ${JLN_WARNINGS_AS_ERROR}	[default, off, on, basic]")
    message(STATUS "JLN_WHOLE_PROGRAM = ${JLN_WHOLE_PROGRAM}	[default, off, on, strip_all]")
  endif()

endfunction()

# jln_target_interface(<libname> {INTERFACE|PUBLIC|PRIVATE} [<jln-option> <value>]... [DISABLE_OTHERS on|off])
function(jln_target_interface name type)
  jln_flags(CXX_VAR cxx LINK_VAR link ${ARGV})
  target_link_libraries(${name} ${type} ${link})
  target_compile_options(${name} ${type} ${cxx})
endfunction()

# jln_flags(CXX_VAR <out-variable> LINK_VAR <out-variable> [<jln-option> <value>]... [DISABLE_OTHERS on|off])
function(jln_flags)
  set(CXX_FLAGS "")
  set(LINK_LINK "")
  cmake_parse_arguments(JLN_FLAGS "DISABLE_OTHERS" "CXX_VAR;LINK_VAR;COLOR;CONTROL_FLOW;COVERAGE;CPU;DEBUG;DIAGNOSTICS_FORMAT;DIAGNOSTICS_SHOW_TEMPLATE_TREE;ELIDE_TYPE;EXCEPTIONS;FIX_COMPILER_ERROR;LINKER;LTO;OPTIMIZATION;PEDANTIC;PIE;RELRO;REPRODUCIBLE_BUILD_WARNINGS;RTTI;SANITIZERS;SANITIZERS_EXTRA;SHADOW_WARNINGS;STACK_PROTECTOR;STL_DEBUG;STL_FIX;SUGGESTIONS;WARNINGS;WARNINGS_AS_ERROR;WHOLE_PROGRAM" "" ${ARGN})

  if(NOT DEFINED JLN_FLAGS_COLOR)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_COLOR "default")
    else()
      set(JLN_FLAGS_COLOR "${JLN_COLOR}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_COLOR) OR ("auto" STREQUAL JLN_FLAGS_COLOR) OR ("never" STREQUAL JLN_FLAGS_COLOR) OR ("always" STREQUAL JLN_FLAGS_COLOR)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_COLOR}\" for JLN_FLAGS_COLOR, expected: default, auto, never, always")
  endif()

  if(NOT DEFINED JLN_FLAGS_CONTROL_FLOW)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_CONTROL_FLOW "default")
    else()
      set(JLN_FLAGS_CONTROL_FLOW "${JLN_CONTROL_FLOW}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_CONTROL_FLOW) OR ("off" STREQUAL JLN_FLAGS_CONTROL_FLOW) OR ("on" STREQUAL JLN_FLAGS_CONTROL_FLOW)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_CONTROL_FLOW}\" for JLN_FLAGS_CONTROL_FLOW, expected: default, off, on")
  endif()

  if(NOT DEFINED JLN_FLAGS_COVERAGE)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_COVERAGE "default")
    else()
      set(JLN_FLAGS_COVERAGE "${JLN_COVERAGE}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_COVERAGE) OR ("off" STREQUAL JLN_FLAGS_COVERAGE) OR ("on" STREQUAL JLN_FLAGS_COVERAGE)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_COVERAGE}\" for JLN_FLAGS_COVERAGE, expected: default, off, on")
  endif()

  if(NOT DEFINED JLN_FLAGS_CPU)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_CPU "default")
    else()
      set(JLN_FLAGS_CPU "${JLN_CPU}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_CPU) OR ("generic" STREQUAL JLN_FLAGS_CPU) OR ("native" STREQUAL JLN_FLAGS_CPU)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_CPU}\" for JLN_FLAGS_CPU, expected: default, generic, native")
  endif()

  if(NOT DEFINED JLN_FLAGS_DEBUG)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_DEBUG "default")
    else()
      set(JLN_FLAGS_DEBUG "${JLN_DEBUG}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_DEBUG) OR ("off" STREQUAL JLN_FLAGS_DEBUG) OR ("on" STREQUAL JLN_FLAGS_DEBUG) OR ("line_tables_only" STREQUAL JLN_FLAGS_DEBUG) OR ("gdb" STREQUAL JLN_FLAGS_DEBUG) OR ("lldb" STREQUAL JLN_FLAGS_DEBUG) OR ("sce" STREQUAL JLN_FLAGS_DEBUG)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_DEBUG}\" for JLN_FLAGS_DEBUG, expected: default, off, on, line_tables_only, gdb, lldb, sce")
  endif()

  if(NOT DEFINED JLN_FLAGS_DIAGNOSTICS_FORMAT)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_DIAGNOSTICS_FORMAT "default")
    else()
      set(JLN_FLAGS_DIAGNOSTICS_FORMAT "${JLN_DIAGNOSTICS_FORMAT}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_DIAGNOSTICS_FORMAT) OR ("fixits" STREQUAL JLN_FLAGS_DIAGNOSTICS_FORMAT) OR ("patch" STREQUAL JLN_FLAGS_DIAGNOSTICS_FORMAT) OR ("print_source_range_info" STREQUAL JLN_FLAGS_DIAGNOSTICS_FORMAT)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_DIAGNOSTICS_FORMAT}\" for JLN_FLAGS_DIAGNOSTICS_FORMAT, expected: default, fixits, patch, print_source_range_info")
  endif()

  if(NOT DEFINED JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE "default")
    else()
      set(JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE "${JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE) OR ("off" STREQUAL JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE) OR ("on" STREQUAL JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE}\" for JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE, expected: default, off, on")
  endif()

  if(NOT DEFINED JLN_FLAGS_ELIDE_TYPE)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_ELIDE_TYPE "default")
    else()
      set(JLN_FLAGS_ELIDE_TYPE "${JLN_ELIDE_TYPE}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_ELIDE_TYPE) OR ("off" STREQUAL JLN_FLAGS_ELIDE_TYPE) OR ("on" STREQUAL JLN_FLAGS_ELIDE_TYPE)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_ELIDE_TYPE}\" for JLN_FLAGS_ELIDE_TYPE, expected: default, off, on")
  endif()

  if(NOT DEFINED JLN_FLAGS_EXCEPTIONS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_EXCEPTIONS "default")
    else()
      set(JLN_FLAGS_EXCEPTIONS "${JLN_EXCEPTIONS}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_EXCEPTIONS) OR ("off" STREQUAL JLN_FLAGS_EXCEPTIONS) OR ("on" STREQUAL JLN_FLAGS_EXCEPTIONS)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_EXCEPTIONS}\" for JLN_FLAGS_EXCEPTIONS, expected: default, off, on")
  endif()

  if(NOT DEFINED JLN_FLAGS_FIX_COMPILER_ERROR)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_FIX_COMPILER_ERROR "on")
    else()
      set(JLN_FLAGS_FIX_COMPILER_ERROR "${JLN_FIX_COMPILER_ERROR}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_FIX_COMPILER_ERROR) OR ("off" STREQUAL JLN_FLAGS_FIX_COMPILER_ERROR) OR ("on" STREQUAL JLN_FLAGS_FIX_COMPILER_ERROR)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_FIX_COMPILER_ERROR}\" for JLN_FLAGS_FIX_COMPILER_ERROR, expected: default, off, on")
  endif()

  if(NOT DEFINED JLN_FLAGS_LINKER)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_LINKER "default")
    else()
      set(JLN_FLAGS_LINKER "${JLN_LINKER}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_LINKER) OR ("bfd" STREQUAL JLN_FLAGS_LINKER) OR ("gold" STREQUAL JLN_FLAGS_LINKER) OR ("lld" STREQUAL JLN_FLAGS_LINKER)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_LINKER}\" for JLN_FLAGS_LINKER, expected: default, bfd, gold, lld")
  endif()

  if(NOT DEFINED JLN_FLAGS_LTO)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_LTO "default")
    else()
      set(JLN_FLAGS_LTO "${JLN_LTO}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_LTO) OR ("off" STREQUAL JLN_FLAGS_LTO) OR ("on" STREQUAL JLN_FLAGS_LTO) OR ("fat" STREQUAL JLN_FLAGS_LTO) OR ("linker_plugin" STREQUAL JLN_FLAGS_LTO)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_LTO}\" for JLN_FLAGS_LTO, expected: default, off, on, fat, linker_plugin")
  endif()

  if(NOT DEFINED JLN_FLAGS_OPTIMIZATION)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_OPTIMIZATION "default")
    else()
      set(JLN_FLAGS_OPTIMIZATION "${JLN_OPTIMIZATION}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_OPTIMIZATION) OR ("0" STREQUAL JLN_FLAGS_OPTIMIZATION) OR ("g" STREQUAL JLN_FLAGS_OPTIMIZATION) OR ("1" STREQUAL JLN_FLAGS_OPTIMIZATION) OR ("2" STREQUAL JLN_FLAGS_OPTIMIZATION) OR ("3" STREQUAL JLN_FLAGS_OPTIMIZATION) OR ("fast" STREQUAL JLN_FLAGS_OPTIMIZATION) OR ("size" STREQUAL JLN_FLAGS_OPTIMIZATION)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_OPTIMIZATION}\" for JLN_FLAGS_OPTIMIZATION, expected: default, 0, g, 1, 2, 3, fast, size")
  endif()

  if(NOT DEFINED JLN_FLAGS_PEDANTIC)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_PEDANTIC "on")
    else()
      set(JLN_FLAGS_PEDANTIC "${JLN_PEDANTIC}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_PEDANTIC) OR ("off" STREQUAL JLN_FLAGS_PEDANTIC) OR ("on" STREQUAL JLN_FLAGS_PEDANTIC) OR ("as_error" STREQUAL JLN_FLAGS_PEDANTIC)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_PEDANTIC}\" for JLN_FLAGS_PEDANTIC, expected: default, off, on, as_error")
  endif()

  if(NOT DEFINED JLN_FLAGS_PIE)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_PIE "default")
    else()
      set(JLN_FLAGS_PIE "${JLN_PIE}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_PIE) OR ("off" STREQUAL JLN_FLAGS_PIE) OR ("on" STREQUAL JLN_FLAGS_PIE) OR ("pic" STREQUAL JLN_FLAGS_PIE)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_PIE}\" for JLN_FLAGS_PIE, expected: default, off, on, pic")
  endif()

  if(NOT DEFINED JLN_FLAGS_RELRO)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_RELRO "default")
    else()
      set(JLN_FLAGS_RELRO "${JLN_RELRO}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_RELRO) OR ("off" STREQUAL JLN_FLAGS_RELRO) OR ("on" STREQUAL JLN_FLAGS_RELRO) OR ("full" STREQUAL JLN_FLAGS_RELRO)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_RELRO}\" for JLN_FLAGS_RELRO, expected: default, off, on, full")
  endif()

  if(NOT DEFINED JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS "default")
    else()
      set(JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS "${JLN_REPRODUCIBLE_BUILD_WARNINGS}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS) OR ("off" STREQUAL JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS) OR ("on" STREQUAL JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS}\" for JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS, expected: default, off, on")
  endif()

  if(NOT DEFINED JLN_FLAGS_RTTI)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_RTTI "default")
    else()
      set(JLN_FLAGS_RTTI "${JLN_RTTI}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_RTTI) OR ("off" STREQUAL JLN_FLAGS_RTTI) OR ("on" STREQUAL JLN_FLAGS_RTTI)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_RTTI}\" for JLN_FLAGS_RTTI, expected: default, off, on")
  endif()

  if(NOT DEFINED JLN_FLAGS_SANITIZERS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_SANITIZERS "default")
    else()
      set(JLN_FLAGS_SANITIZERS "${JLN_SANITIZERS}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_SANITIZERS) OR ("off" STREQUAL JLN_FLAGS_SANITIZERS) OR ("on" STREQUAL JLN_FLAGS_SANITIZERS)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_SANITIZERS}\" for JLN_FLAGS_SANITIZERS, expected: default, off, on")
  endif()

  if(NOT DEFINED JLN_FLAGS_SANITIZERS_EXTRA)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_SANITIZERS_EXTRA "default")
    else()
      set(JLN_FLAGS_SANITIZERS_EXTRA "${JLN_SANITIZERS_EXTRA}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_SANITIZERS_EXTRA) OR ("off" STREQUAL JLN_FLAGS_SANITIZERS_EXTRA) OR ("thread" STREQUAL JLN_FLAGS_SANITIZERS_EXTRA) OR ("pointer" STREQUAL JLN_FLAGS_SANITIZERS_EXTRA)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_SANITIZERS_EXTRA}\" for JLN_FLAGS_SANITIZERS_EXTRA, expected: default, off, thread, pointer")
  endif()

  if(NOT DEFINED JLN_FLAGS_SHADOW_WARNINGS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_SHADOW_WARNINGS "off")
    else()
      set(JLN_FLAGS_SHADOW_WARNINGS "${JLN_SHADOW_WARNINGS}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_SHADOW_WARNINGS) OR ("off" STREQUAL JLN_FLAGS_SHADOW_WARNINGS) OR ("on" STREQUAL JLN_FLAGS_SHADOW_WARNINGS) OR ("local" STREQUAL JLN_FLAGS_SHADOW_WARNINGS) OR ("compatible_local" STREQUAL JLN_FLAGS_SHADOW_WARNINGS) OR ("all" STREQUAL JLN_FLAGS_SHADOW_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_SHADOW_WARNINGS}\" for JLN_FLAGS_SHADOW_WARNINGS, expected: default, off, on, local, compatible_local, all")
  endif()

  if(NOT DEFINED JLN_FLAGS_STACK_PROTECTOR)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_STACK_PROTECTOR "default")
    else()
      set(JLN_FLAGS_STACK_PROTECTOR "${JLN_STACK_PROTECTOR}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_STACK_PROTECTOR) OR ("off" STREQUAL JLN_FLAGS_STACK_PROTECTOR) OR ("on" STREQUAL JLN_FLAGS_STACK_PROTECTOR) OR ("strong" STREQUAL JLN_FLAGS_STACK_PROTECTOR) OR ("all" STREQUAL JLN_FLAGS_STACK_PROTECTOR)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_STACK_PROTECTOR}\" for JLN_FLAGS_STACK_PROTECTOR, expected: default, off, on, strong, all")
  endif()

  if(NOT DEFINED JLN_FLAGS_STL_DEBUG)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_STL_DEBUG "default")
    else()
      set(JLN_FLAGS_STL_DEBUG "${JLN_STL_DEBUG}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_STL_DEBUG) OR ("off" STREQUAL JLN_FLAGS_STL_DEBUG) OR ("on" STREQUAL JLN_FLAGS_STL_DEBUG) OR ("allow_broken_abi" STREQUAL JLN_FLAGS_STL_DEBUG) OR ("allow_broken_abi_and_bugged" STREQUAL JLN_FLAGS_STL_DEBUG) OR ("assert_as_exception" STREQUAL JLN_FLAGS_STL_DEBUG)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_STL_DEBUG}\" for JLN_FLAGS_STL_DEBUG, expected: default, off, on, allow_broken_abi, allow_broken_abi_and_bugged, assert_as_exception")
  endif()

  if(NOT DEFINED JLN_FLAGS_STL_FIX)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_STL_FIX "on")
    else()
      set(JLN_FLAGS_STL_FIX "${JLN_STL_FIX}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_STL_FIX) OR ("off" STREQUAL JLN_FLAGS_STL_FIX) OR ("on" STREQUAL JLN_FLAGS_STL_FIX)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_STL_FIX}\" for JLN_FLAGS_STL_FIX, expected: default, off, on")
  endif()

  if(NOT DEFINED JLN_FLAGS_SUGGESTIONS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_SUGGESTIONS "default")
    else()
      set(JLN_FLAGS_SUGGESTIONS "${JLN_SUGGESTIONS}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_SUGGESTIONS) OR ("off" STREQUAL JLN_FLAGS_SUGGESTIONS) OR ("on" STREQUAL JLN_FLAGS_SUGGESTIONS)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_SUGGESTIONS}\" for JLN_FLAGS_SUGGESTIONS, expected: default, off, on")
  endif()

  if(NOT DEFINED JLN_FLAGS_WARNINGS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_WARNINGS "on")
    else()
      set(JLN_FLAGS_WARNINGS "${JLN_WARNINGS}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_WARNINGS) OR ("off" STREQUAL JLN_FLAGS_WARNINGS) OR ("on" STREQUAL JLN_FLAGS_WARNINGS) OR ("strict" STREQUAL JLN_FLAGS_WARNINGS) OR ("very_strict" STREQUAL JLN_FLAGS_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_WARNINGS}\" for JLN_FLAGS_WARNINGS, expected: default, off, on, strict, very_strict")
  endif()

  if(NOT DEFINED JLN_FLAGS_WARNINGS_AS_ERROR)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_WARNINGS_AS_ERROR "default")
    else()
      set(JLN_FLAGS_WARNINGS_AS_ERROR "${JLN_WARNINGS_AS_ERROR}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_WARNINGS_AS_ERROR) OR ("off" STREQUAL JLN_FLAGS_WARNINGS_AS_ERROR) OR ("on" STREQUAL JLN_FLAGS_WARNINGS_AS_ERROR) OR ("basic" STREQUAL JLN_FLAGS_WARNINGS_AS_ERROR)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_WARNINGS_AS_ERROR}\" for JLN_FLAGS_WARNINGS_AS_ERROR, expected: default, off, on, basic")
  endif()

  if(NOT DEFINED JLN_FLAGS_WHOLE_PROGRAM)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_WHOLE_PROGRAM "default")
    else()
      set(JLN_FLAGS_WHOLE_PROGRAM "${JLN_WHOLE_PROGRAM}")
    endif()
  elseif(NOT(("default" STREQUAL JLN_FLAGS_WHOLE_PROGRAM) OR ("off" STREQUAL JLN_FLAGS_WHOLE_PROGRAM) OR ("on" STREQUAL JLN_FLAGS_WHOLE_PROGRAM) OR ("strip_all" STREQUAL JLN_FLAGS_WHOLE_PROGRAM)))
    message(FATAL_ERROR "Unknow value \"${JLN_FLAGS_WHOLE_PROGRAM}\" for JLN_FLAGS_WHOLE_PROGRAM, expected: default, off, on, strip_all")
  endif()

  if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang" ) )
    if (  NOT ( JLN_FLAGS_FIX_COMPILER_ERROR STREQUAL "default") )
      if (  JLN_FLAGS_FIX_COMPILER_ERROR STREQUAL "on" )
        if (  CMAKE_CXX_COMPILER_ID MATCHES "GNU" )
          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.7" ) )
            list(APPEND CXX_FLAGS  "-Werror=narrowing")
            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.1" ) )
              list(APPEND CXX_FLAGS  "-Werror=literal-suffix")
            endif()
          endif()
        endif()
      elseif (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
        list(APPEND CXX_FLAGS  "-Wno-error=c++11-narrowing" "-Wno-reserved-user-defined-literal")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_COVERAGE STREQUAL "default") )
      if (  JLN_FLAGS_COVERAGE STREQUAL "on" )
        list(APPEND CXX_FLAGS  "--coverage")
        list(APPEND LINK_FLAGS  "--coverage")
        if (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
          list(APPEND LINK_FLAGS  "-lprofile_rt")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_DEBUG STREQUAL "default") )
      if (  JLN_FLAGS_DEBUG STREQUAL "off" )
        list(APPEND CXX_FLAGS  "-g0")
      elseif (  JLN_FLAGS_DEBUG STREQUAL "gdb" )
        list(APPEND CXX_FLAGS  "-ggdb")
      elseif (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
        if (  JLN_FLAGS_DEBUG STREQUAL "line_tables_only" )
          list(APPEND CXX_FLAGS  "-gline-tables-only")
        endif()
        if (  JLN_FLAGS_DEBUG STREQUAL "lldb" )
          list(APPEND CXX_FLAGS  "-glldb")
        elseif (  JLN_FLAGS_DEBUG STREQUAL "sce" )
          list(APPEND CXX_FLAGS  "-gsce")
        else()
          list(APPEND CXX_FLAGS  "-g")
        endif()
      else()
        list(APPEND CXX_FLAGS  "-g")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_LINKER STREQUAL "default") )
      if (  JLN_FLAGS_LINKER STREQUAL "bfd" )
        list(APPEND LINK_FLAGS  "-fuse-ld=bfd")
      elseif (  ( JLN_FLAGS_LINKER STREQUAL "gold" OR CMAKE_CXX_COMPILER_ID MATCHES "GNU" ) )
        list(APPEND LINK_FLAGS  "-fuse-ld=gold")
      else()
        list(APPEND LINK_FLAGS  "-fuse-ld=lld")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_LTO STREQUAL "default") )
      if (  JLN_FLAGS_LTO STREQUAL "off" )
        list(APPEND CXX_FLAGS  "-fno-lto")
        list(APPEND LINK_FLAGS  "-fno-lto")
      else()
        list(APPEND CXX_FLAGS  "-flto")
        list(APPEND LINK_FLAGS  "-flto")
        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.0" ) ) )
          if (  NOT ( JLN_FLAGS_WARNINGS STREQUAL "default") )
            if (  NOT JLN_FLAGS_WARNINGS STREQUAL "off" )
              list(APPEND CXX_FLAGS  "-flto-odr-type-merging")
              list(APPEND LINK_FLAGS  "-flto-odr-type-merging")
            endif()
          endif()
          if (  JLN_FLAGS_LTO STREQUAL "fat" )
            list(APPEND CXX_FLAGS  "-ffat-lto-objects")
          endif()
          if (  JLN_FLAGS_LTO STREQUAL "linker_plugin" )
            list(APPEND LINK_FLAGS  "-fuse-linker-plugin")
          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_OPTIMIZATION STREQUAL "default") )
      if (  JLN_FLAGS_OPTIMIZATION STREQUAL "0" )
        list(APPEND CXX_FLAGS  "-O0")
        list(APPEND LINK_FLAGS  "-O0")
      elseif (  JLN_FLAGS_OPTIMIZATION STREQUAL "g" )
        list(APPEND CXX_FLAGS  "-Og")
        list(APPEND LINK_FLAGS  "-Og")
      else()
        list(APPEND CXX_FLAGS  "-DNDEBUG")
        if (  JLN_FLAGS_OPTIMIZATION STREQUAL "size" )
          list(APPEND CXX_FLAGS  "-Os")
          list(APPEND LINK_FLAGS  "-Os")
        elseif (  JLN_FLAGS_OPTIMIZATION STREQUAL "fast" )
          list(APPEND CXX_FLAGS  "-Ofast")
          list(APPEND LINK_FLAGS  "-Ofast")
        elseif (  JLN_FLAGS_OPTIMIZATION STREQUAL "1" )
          list(APPEND CXX_FLAGS  "-O1")
          list(APPEND LINK_FLAGS  "-O1")
        elseif (  JLN_FLAGS_OPTIMIZATION STREQUAL "2" )
          list(APPEND CXX_FLAGS  "-O2")
          list(APPEND LINK_FLAGS  "-O2")
        elseif (  JLN_FLAGS_OPTIMIZATION STREQUAL "3" )
          list(APPEND CXX_FLAGS  "-O3")
          list(APPEND LINK_FLAGS  "-O3")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_CPU STREQUAL "default") )
      if (  JLN_FLAGS_CPU STREQUAL "generic" )
        list(APPEND CXX_FLAGS  "-mtune=generic")
        list(APPEND LINK_FLAGS  "-mtune=generic")
      else()
        list(APPEND CXX_FLAGS  "-march=native" "-mtune=native")
        list(APPEND LINK_FLAGS  "-march=native" "-mtune=native")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_WHOLE_PROGRAM STREQUAL "default") )
      if (  JLN_FLAGS_WHOLE_PROGRAM STREQUAL "off" )
        list(APPEND CXX_FLAGS  "-fno-whole-program")
        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.9" ) ) )
          list(APPEND CXX_FLAGS  "-fno-whole-program-vtables")
          list(APPEND LINK_FLAGS  "-fno-whole-program-vtables")
        endif()
      else()
        list(APPEND LINK_FLAGS  "-s")
        if (  JLN_FLAGS_WHOLE_PROGRAM STREQUAL "strip_all" )
          list(APPEND LINK_FLAGS  "-Wl,--gc-sections" "-Wl,--strip-all")
        endif()
        if (  CMAKE_CXX_COMPILER_ID MATCHES "GNU" )
          list(APPEND CXX_FLAGS  "-fwhole-program")
          list(APPEND LINK_FLAGS  "-fwhole-program")
        else()
          if (  ( CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.9" ) ) )
            if (  NOT ( JLN_FLAGS_LTO STREQUAL "default") )
              if (  NOT JLN_FLAGS_LTO STREQUAL "off" )
                list(APPEND CXX_FLAGS  "-fwhole-program-vtables")
                list(APPEND LINK_FLAGS  "-fwhole-program-vtables")
              endif()
            endif()
            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0" ) )
              list(APPEND CXX_FLAGS  "-fforce-emit-vtables")
              list(APPEND LINK_FLAGS  "-fforce-emit-vtables")
            endif()
          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_PEDANTIC STREQUAL "default") )
      if (  NOT JLN_FLAGS_PEDANTIC STREQUAL "off" )
        list(APPEND CXX_FLAGS  "-pedantic")
        if (  JLN_FLAGS_PEDANTIC STREQUAL "as_error" )
          list(APPEND CXX_FLAGS  "-pedantic-errors")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_STACK_PROTECTOR STREQUAL "default") )
      if (  JLN_FLAGS_STACK_PROTECTOR STREQUAL "off" )
        list(APPEND CXX_FLAGS  "-Wno-stack-protector" "-U_FORTIFY_SOURCE")
        list(APPEND LINK_FLAGS  "-Wno-stack-protector")
      else()
        list(APPEND CXX_FLAGS  "-D_FORTIFY_SOURCE=2" "-Wstack-protector")
        if (  JLN_FLAGS_STACK_PROTECTOR STREQUAL "strong" )
          if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) ) )
            list(APPEND CXX_FLAGS  "-fstack-protector-strong")
            list(APPEND LINK_FLAGS  "-fstack-protector-strong")
          elseif (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
            list(APPEND CXX_FLAGS  "-fstack-protector-strong" "-fsanitize=safe-stack")
            list(APPEND LINK_FLAGS  "-fstack-protector-strong" "-fsanitize=safe-stack")
          endif()
        elseif (  JLN_FLAGS_STACK_PROTECTOR STREQUAL "all" )
          list(APPEND CXX_FLAGS  "-fstack-protector-all")
          list(APPEND LINK_FLAGS  "-fstack-protector-all")
          if (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
            list(APPEND CXX_FLAGS  "-fsanitize=safe-stack")
            list(APPEND LINK_FLAGS  "-fsanitize=safe-stack")
          endif()
        else()
          list(APPEND CXX_FLAGS  "-fstack-protector")
          list(APPEND LINK_FLAGS  "-fstack-protector")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_RELRO STREQUAL "default") )
      if (  JLN_FLAGS_RELRO STREQUAL "off" )
        list(APPEND LINK_FLAGS  "-Wl,-z,norelro")
      elseif (  JLN_FLAGS_RELRO STREQUAL "on" )
        list(APPEND LINK_FLAGS  "-Wl,-z,relro")
      elseif (  JLN_FLAGS_RELRO STREQUAL "full" )
        list(APPEND LINK_FLAGS  "-Wl,-z,relro,-z,now")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_PIE STREQUAL "default") )
      if (  JLN_FLAGS_PIE STREQUAL "off" )
        list(APPEND LINK_FLAGS  "-no-pic")
      elseif (  JLN_FLAGS_PIE STREQUAL "on" )
        list(APPEND LINK_FLAGS  "-pie")
      elseif (  JLN_FLAGS_PIE STREQUAL "pic" )
        list(APPEND CXX_FLAGS  "-fPIC")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SUGGESTIONS STREQUAL "default") )
      if (  NOT JLN_FLAGS_SUGGESTIONS STREQUAL "off" )
        if (  CMAKE_CXX_COMPILER_ID MATCHES "GNU" )
          list(APPEND CXX_FLAGS  "-Wsuggest-attribute=pure" "-Wsuggest-attribute=const")
          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.0" ) )
            list(APPEND CXX_FLAGS  "-Wsuggest-final-types" "-Wsuggest-final-methods")
            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.1" ) )
              list(APPEND CXX_FLAGS  "-Wnoexcept")
            endif()
          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_STL_DEBUG STREQUAL "default") )
      if (  NOT JLN_FLAGS_STL_DEBUG STREQUAL "off" )
        if (  JLN_FLAGS_STL_DEBUG STREQUAL "assert_as_exception" )
          list(APPEND CXX_FLAGS  "-D_LIBCPP_DEBUG_USE_EXCEPTIONS")
        endif()
        if (  ( JLN_FLAGS_STL_DEBUG STREQUAL "allow_broken_abi" OR JLN_FLAGS_STL_DEBUG STREQUAL "allow_broken_abi_and_bugged" ) )
          if (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
            if (  ( NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) OR JLN_FLAGS_STL_DEBUG STREQUAL "allow_broken_abi_and_bugged" ) )
              list(APPEND CXX_FLAGS  "-D_LIBCPP_DEBUG=1")
            endif()
          endif()
          list(APPEND CXX_FLAGS  "-D_GLIBCXX_DEBUG")
        else()
          list(APPEND CXX_FLAGS  "-D_GLIBCXX_ASSERTIONS")
        endif()
        if (  NOT ( JLN_FLAGS_PEDANTIC STREQUAL "default") )
          if (  NOT JLN_FLAGS_PEDANTIC STREQUAL "off" )
            list(APPEND CXX_FLAGS  "-D_GLIBCXX_DEBUG_PEDANTIC")
          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SHADOW_WARNINGS STREQUAL "default") )
      if (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "off" )
        list(APPEND CXX_FLAGS  "-Wno-shadow")
      elseif (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "on" )
        list(APPEND CXX_FLAGS  "-Wshadow")
      elseif (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "all" )
        if (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
          list(APPEND CXX_FLAGS  "-Wshadow-all")
        else()
          list(APPEND CXX_FLAGS  "-Wshadow")
        endif()
      elseif (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.1" ) ) )
        if (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "local" )
          list(APPEND CXX_FLAGS  "-Wshadow=local")
        elseif (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "compatible_local" )
          list(APPEND CXX_FLAGS  "-Wshadow=compatible-local")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_WARNINGS STREQUAL "default") )
      if (  JLN_FLAGS_WARNINGS STREQUAL "off" )
        list(APPEND CXX_FLAGS  "-w")
      else()
        if (  CMAKE_CXX_COMPILER_ID MATCHES "GNU" )
          list(APPEND CXX_FLAGS  "-Wall" "-Wextra" "-Wcast-align" "-Wcast-qual" "-Wdisabled-optimization" "-Wfloat-equal" "-Wformat-security" "-Wformat=2" "-Wmissing-declarations" "-Wmissing-include-dirs" "-Wnon-virtual-dtor" "-Wold-style-cast" "-Woverloaded-virtual" "-Wpacked" "-Wredundant-decls" "-Wundef" "-Wunused-macros")
          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.7" ) )
            list(APPEND CXX_FLAGS  "-Wsuggest-attribute=noreturn" "-Wzero-as-null-pointer-constant" "-Wlogical-op" "-Wvector-operation-performance" "-Wdouble-promotion" "-Wtrampolines")
            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.8" ) )
              list(APPEND CXX_FLAGS  "-Wuseless-cast")
              if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) )
                list(APPEND CXX_FLAGS  "-Wconditionally-supported" "-Wfloat-conversion")
                if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.1" ) )
                  list(APPEND CXX_FLAGS  "-Wformat-signedness" "-Warray-bounds=2" "-Wconditionally-supported" "-Wstrict-null-sentinel" "-Wsuggest-override")
                  if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "6.1" ) )
                    list(APPEND CXX_FLAGS  "-Wduplicated-cond" "-Wnull-dereference")
                    if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0" ) )
                      list(APPEND CXX_FLAGS  "-Waligned-new")
                      if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.1" ) )
                        list(APPEND CXX_FLAGS  "-Walloc-zero" "-Walloca" "-Wformat-overflow=2" "-Wduplicated-branches")
                        if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) )
                          list(APPEND CXX_FLAGS  "-Wclass-memaccess")
                        endif()
                      endif()
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
        elseif (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
          list(APPEND CXX_FLAGS  "-Weverything" "-Wno-c++98-compat" "-Wno-c++98-compat-pedantic" "-Wno-mismatched-tags" "-Wno-padded" "-Wno-global-constructors" "-Wno-weak-vtables" "-Wno-exit-time-destructors" "-Wno-covered-switch-default" "-Wno-switch-default" "-Wno-switch-enum")
          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.9" ) )
            list(APPEND CXX_FLAGS  "-Wno-undefined-var-template")
          endif()
          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.0" ) )
            list(APPEND CXX_FLAGS  "-Wno-inconsistent-missing-destructor-override")
          endif()
        endif()
        if (  ( JLN_FLAGS_WARNINGS STREQUAL "strict" OR JLN_FLAGS_WARNINGS STREQUAL "very_strict" ) )
          list(APPEND CXX_FLAGS  "-Wconversion")
          if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) )
            list(APPEND CXX_FLAGS  "-Wcast-align=strict")
          endif()
        elseif (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
          list(APPEND CXX_FLAGS  "-Wno-conversion" "-Wno-sign-conversion")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SANITIZERS STREQUAL "default") )
      if (  JLN_FLAGS_SANITIZERS STREQUAL "off" )
        list(APPEND CXX_FLAGS  "-fno-sanitize=all")
        list(APPEND LINK_FLAGS  "-fno-sanitize=all")
      else()
        if (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.1" ) )
            list(APPEND CXX_FLAGS  "-fsanitize=undefined" "-fsanitize=address" "-fsanitize-address-use-after-scope" "-fno-omit-frame-pointer" "-fno-optimize-sibling-calls")
            list(APPEND LINK_FLAGS  "-fsanitize=undefined" "-fsanitize=address")
            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.4" ) )
              list(APPEND CXX_FLAGS  "-fsanitize=leak")
              list(APPEND LINK_FLAGS  "-fsanitize=leak")
              if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "6.0" ) )
                list(APPEND CXX_FLAGS  "-fsanitize=bounds")
                list(APPEND LINK_FLAGS  "-fsanitize=bounds")
              endif()
            endif()
          endif()
        else()
          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.8" ) )
            list(APPEND CXX_FLAGS  "-fsanitize=address" "-fno-omit-frame-pointer" "-fno-optimize-sibling-calls")
            list(APPEND LINK_FLAGS  "-fsanitize=address")
            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) )
              list(APPEND CXX_FLAGS  "-fsanitize=undefined" "-fsanitize=leak")
              list(APPEND LINK_FLAGS  "-fsanitize=undefined" "-fsanitize=leak")
              if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "6.0" ) )
                list(APPEND CXX_FLAGS  "-fsanitize=bounds" "-fsanitize=bounds-strict")
              endif()
            endif()
          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_CONTROL_FLOW STREQUAL "default") )
      if (  JLN_FLAGS_CONTROL_FLOW STREQUAL "off" )
        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) )
          list(APPEND CXX_FLAGS  "-fcf-protection=none")
        elseif (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
          list(APPEND CXX_FLAGS  "-fno-sanitize=cfi")
          list(APPEND LINK_FLAGS  "-fno-sanitize=cfi")
        endif()
      else()
        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) )
          list(APPEND CXX_FLAGS  "-fcf-protection=full")
        elseif (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
          list(APPEND CXX_FLAGS  "-fsanitize=cfi" "-fvisibility=hidden" "-flto")
          list(APPEND LINK_FLAGS  "-fsanitize=cfi" "-flto")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SANITIZERS_EXTRA STREQUAL "default") )
      if (  JLN_FLAGS_SANITIZERS_EXTRA STREQUAL "thread" )
        list(APPEND CXX_FLAGS  "-fsanitize=thread")
      elseif (  JLN_FLAGS_SANITIZERS_EXTRA STREQUAL "pointer" )
        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) )
          list(APPEND CXX_FLAGS  "-fsanitize=pointer-compare" "-fsanitize=pointer-subtract")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS STREQUAL "default") )
      if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) ) )
        if (  JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS STREQUAL "on" )
          list(APPEND CXX_FLAGS  "-Wdate-time")
        else()
          list(APPEND CXX_FLAGS  "-Wno-date-time")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_COLOR STREQUAL "default") )
      if (  ( ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) ) OR CMAKE_CXX_COMPILER_ID MATCHES "Clang" ) )
        if (  JLN_FLAGS_COLOR STREQUAL "auto" )
          list(APPEND CXX_FLAGS  "-fdiagnostics-color=auto")
        elseif (  JLN_FLAGS_COLOR STREQUAL "never" )
          list(APPEND CXX_FLAGS  "-fdiagnostics-color=never")
        elseif (  JLN_FLAGS_COLOR STREQUAL "always" )
          list(APPEND CXX_FLAGS  "-fdiagnostics-color=always")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_ELIDE_TYPE STREQUAL "default") )
      if (  JLN_FLAGS_ELIDE_TYPE STREQUAL "on" )
        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) )
          list(APPEND CXX_FLAGS  "-felide-type")
        endif()
      elseif (  ( ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) OR ( CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.4" ) ) ) )
        list(APPEND CXX_FLAGS  "-fno-elide-type")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_EXCEPTIONS STREQUAL "default") )
      if (  JLN_FLAGS_EXCEPTIONS STREQUAL "on" )
        list(APPEND CXX_FLAGS  "-fexceptions")
      else()
        list(APPEND CXX_FLAGS  "-fno-exceptions")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_RTTI STREQUAL "default") )
      if (  JLN_FLAGS_RTTI STREQUAL "on" )
        list(APPEND CXX_FLAGS  "-frtti")
      else()
        list(APPEND CXX_FLAGS  "-fno-rtti")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE STREQUAL "default") )
      if (  ( ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) OR CMAKE_CXX_COMPILER_ID MATCHES "Clang" ) )
        if (  JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE STREQUAL "on" )
          list(APPEND CXX_FLAGS  "-fdiagnostics-show-template-tree")
        else()
          list(APPEND CXX_FLAGS  "-fno-diagnostics-show-template-tree")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_DIAGNOSTICS_FORMAT STREQUAL "default") )
      if (  JLN_FLAGS_DIAGNOSTICS_FORMAT STREQUAL "fixits" )
        if (  ( ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0" ) ) OR ( CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.0" ) ) ) )
          list(APPEND CXX_FLAGS  "-fdiagnostics-parseable-fixits")
        endif()
      elseif (  JLN_FLAGS_DIAGNOSTICS_FORMAT STREQUAL "patch" )
        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0" ) ) )
          list(APPEND CXX_FLAGS  "-fdiagnostics-generate-patch")
        endif()
      elseif (  JLN_FLAGS_DIAGNOSTICS_FORMAT STREQUAL "print_source_range_info" )
        if (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
          list(APPEND CXX_FLAGS  "-fdiagnostics-print-source-range-info")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "default") )
      if (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "on" )
        list(APPEND CXX_FLAGS  "-Werror")
      elseif (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "basic" )
        list(APPEND CXX_FLAGS  "-Werror=non-virtual-dtor" "-Werror=return-type" "-Werror=init-self")
        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.1" ) ) )
          list(APPEND CXX_FLAGS  "-Werror=array-bounds" "-Werror=logical-op" "-Werror=logical-not-parentheses")
        elseif (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
          list(APPEND CXX_FLAGS  "-Werror=array-bounds" "-Werror=division-by-zero")
          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.4" ) )
            list(APPEND CXX_FLAGS  "-Werror=logical-not-parentheses")
            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.6" ) )
              list(APPEND CXX_FLAGS  "-Werror=delete-incomplete")
              if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0" ) )
                list(APPEND CXX_FLAGS  "-Werror=dynamic-class-memaccess")
              endif()
            endif()
          endif()
        endif()
      else()
        list(APPEND CXX_FLAGS  "-Wno-error")
      endif()
    endif()
  elseif (  CMAKE_CXX_COMPILER_ID MATCHES "MSVC" )
    if (  NOT ( JLN_FLAGS_STL_FIX STREQUAL "default") )
      if (  JLN_FLAGS_STL_FIX STREQUAL "on" )
        list(APPEND CXX_FLAGS  "/DNOMINMAX")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_DEBUG STREQUAL "default") )
      if (  JLN_FLAGS_DEBUG STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/DEBUG:NONE")
      else()
        list(APPEND CXX_FLAGS  "/RTC1" "/Od")
        if (  JLN_FLAGS_DEBUG STREQUAL "on" )
          list(APPEND CXX_FLAGS  "/DEBUG")
        elseif (  JLN_FLAGS_DEBUG STREQUAL "line_tables_only" )
          list(APPEND CXX_FLAGS  "/DEBUG:FASTLINK")
        endif()
        if (  NOT ( JLN_FLAGS_OPTIMIZATION STREQUAL "default") )
          if (  JLN_FLAGS_OPTIMIZATION STREQUAL "g" )
            list(APPEND CXX_FLAGS  "/Zi")
          else()
            list(APPEND CXX_FLAGS  "/ZI")
          endif()
        else()
          list(APPEND CXX_FLAGS  "/ZI")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_EXCEPTIONS STREQUAL "default") )
      if (  JLN_FLAGS_EXCEPTIONS STREQUAL "on" )
        list(APPEND CXX_FLAGS  "/EHc")
      else()
        list(APPEND CXX_FLAGS  "/EHc-")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_OPTIMIZATION STREQUAL "default") )
      if (  JLN_FLAGS_OPTIMIZATION STREQUAL "0" )
        list(APPEND CXX_FLAGS  "/Ob0 /Od /Oi- /Oy-")
      elseif (  JLN_FLAGS_OPTIMIZATION STREQUAL "g" )
        list(APPEND CXX_FLAGS  "/Ob1")
      else()
        list(APPEND CXX_FLAGS  "/DNDEBUG")
        if (  JLN_FLAGS_OPTIMIZATION STREQUAL "1" )
          list(APPEND CXX_FLAGS  "/01")
        elseif (  JLN_FLAGS_OPTIMIZATION STREQUAL "2" )
          list(APPEND CXX_FLAGS  "/O2")
          list(APPEND LINK_FLAGS  "/OPT:REF")
        elseif (  JLN_FLAGS_OPTIMIZATION STREQUAL "3" )
          list(APPEND CXX_FLAGS  "/O2")
          list(APPEND LINK_FLAGS  "/OPT:REF")
        elseif (  JLN_FLAGS_OPTIMIZATION STREQUAL "size" )
          list(APPEND CXX_FLAGS  "/O1" "/Gw")
          list(APPEND LINK_FLAGS  "/OPT:REF")
        elseif (  JLN_FLAGS_OPTIMIZATION STREQUAL "fast" )
          list(APPEND CXX_FLAGS  "/O2" "/fp:fast")
          list(APPEND LINK_FLAGS  "/OPT:REF")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_LTO STREQUAL "default") )
      if (  JLN_FLAGS_LTO STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/LTCG:OFF")
      else()
        list(APPEND CXX_FLAGS  "/GL")
        list(APPEND LINK_FLAGS  "/LTCG")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_WHOLE_PROGRAM STREQUAL "default") )
      if (  JLN_FLAGS_WHOLE_PROGRAM STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/GL-")
      else()
        list(APPEND CXX_FLAGS  "/GL" "/Gw")
        list(APPEND LINK_FLAGS  "/LTCG")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_PEDANTIC STREQUAL "default") )
      if (  NOT JLN_FLAGS_PEDANTIC STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/permissive-" "/Zc:__cplusplus")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_RTTI STREQUAL "default") )
      if (  JLN_FLAGS_RTTI STREQUAL "on" )
        list(APPEND CXX_FLAGS  "/GR")
      else()
        list(APPEND CXX_FLAGS  "/GR-")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_STL_DEBUG STREQUAL "default") )
      if (  JLN_FLAGS_STL_DEBUG STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/D_HAS_ITERATOR_DEBUGGING=0")
      else()
        list(APPEND CXX_FLAGS  "/D_DEBUG" "/D_HAS_ITERATOR_DEBUGGING=1")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_CONTROL_FLOW STREQUAL "default") )
      if (  JLN_FLAGS_CONTROL_FLOW STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/guard:cf-")
      else()
        list(APPEND CXX_FLAGS  "/guard:cf")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SANITIZERS STREQUAL "default") )
      if (  JLN_FLAGS_SANITIZERS STREQUAL "on" )
        list(APPEND CXX_FLAGS  "/sdl")
      else()
        if (  NOT ( JLN_FLAGS_STACK_PROTECTOR STREQUAL "default") )
          if (  NOT JLN_FLAGS_STACK_PROTECTOR STREQUAL "off" )
            list(APPEND CXX_FLAGS  "/sdl-")
          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_STACK_PROTECTOR STREQUAL "default") )
      if (  NOT JLN_FLAGS_STACK_PROTECTOR STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/GS" "/sdl")
        if (  JLN_FLAGS_STACK_PROTECTOR STREQUAL "strong" )
          list(APPEND CXX_FLAGS  "/RTC1")
        elseif (  JLN_FLAGS_STACK_PROTECTOR STREQUAL "all" )
          list(APPEND CXX_FLAGS  "/RTC1" "/RTCc")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SHADOW_WARNINGS STREQUAL "default") )
      if (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/wd4456" "/wd4459")
      elseif (  ( JLN_FLAGS_SHADOW_WARNINGS STREQUAL "on" OR JLN_FLAGS_SHADOW_WARNINGS STREQUAL "all" ) )
        list(APPEND CXX_FLAGS  "/w4456" "/w4459")
      elseif (  JLN_FLAGS_SHADOW_WARNINGS STREQUAL "local" )
        list(APPEND CXX_FLAGS  "/w4456" "/wd4459")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_WARNINGS STREQUAL "default") )
      if (  JLN_FLAGS_WARNINGS STREQUAL "on" )
        list(APPEND CXX_FLAGS  "/W4" "/wd4244" "/wd4245")
      elseif (  JLN_FLAGS_WARNINGS STREQUAL "strict" )
        list(APPEND CXX_FLAGS  "/Wall" "/wd4820" "/wd4514" "/wd4710")
      elseif (  JLN_FLAGS_WARNINGS STREQUAL "very_strict" )
        list(APPEND CXX_FLAGS  "/Wall")
      elseif (  JLN_FLAGS_WARNINGS STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/W0")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "default") )
      if (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "on" )
        list(APPEND CXX_FLAGS  "/WX")
        list(APPEND LINK_FLAGS  "/WX")
      elseif (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "off" )
        list(APPEND CXX_FLAGS  "/WX-")
      endif()
    endif()
  endif()
set(${JLN_FLAGS_CXX_VAR} ${CXX_FLAGS} PARENT_SCOPE)
set(${JLN_FLAGS_LINK_VAR} ${LINK_FLAGS} PARENT_SCOPE)
endfunction()
