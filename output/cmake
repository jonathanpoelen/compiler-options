# jln_init_flags([<jln-option> <value>]... [VERBOSE on|1])
function(jln_init_flags)
  cmake_parse_arguments(JLN_DEFAULT_FLAG "" "VERBOSE;COLOR;COVERAGE;DEBUG;DIAGNOSTICS_FORMAT;DIAGNOSTICS_SHOW_TEMPLATE_TREE;ELIDE_TYPE;EXCEPTIONS;FAST_MATH;LTO;OPTIMIZE;PEDANTIC;RELRO;REPRODUCIBLE_BUILD_WARNINGS;RTTI;SANITIZERS;SANITIZERS_EXTRA;STACK_PROTECTOR;STL_DEBUG;STL_FIX;SUGGESTS;WARNINGS;WARNINGS_AS_ERROR" "" ${ARGN})

  if(DEFINED JLN_DEFAULT_FLAG_VERBOSE)
    set(JLN_VERBOSE ${JLN_DEFAULT_FLAG_VERBOSE})
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_COLOR)
    set(JLN_COLOR ${JLN_DEFAULT_FLAG_COLOR} CACHE STING "")
  else()
    set(JLN_COLOR "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_COLOR) OR ("auto" STREQUAL JLN_COLOR) OR ("never" STREQUAL JLN_COLOR) OR ("always" STREQUAL JLN_COLOR)))
    message(FATAL_ERROR "Unknow value \"${JLN_COLOR}\" for JLN_COLOR, expected: default, auto, never, always")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_COVERAGE)
    set(JLN_COVERAGE ${JLN_DEFAULT_FLAG_COVERAGE} CACHE STING "")
  else()
    set(JLN_COVERAGE "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_COVERAGE) OR ("off" STREQUAL JLN_COVERAGE) OR ("on" STREQUAL JLN_COVERAGE)))
    message(FATAL_ERROR "Unknow value \"${JLN_COVERAGE}\" for JLN_COVERAGE, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_DEBUG)
    set(JLN_DEBUG ${JLN_DEFAULT_FLAG_DEBUG} CACHE STING "")
  else()
    set(JLN_DEBUG "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_DEBUG) OR ("off" STREQUAL JLN_DEBUG) OR ("on" STREQUAL JLN_DEBUG) OR ("line_tables_only" STREQUAL JLN_DEBUG) OR ("gdb" STREQUAL JLN_DEBUG) OR ("lldb" STREQUAL JLN_DEBUG) OR ("sce" STREQUAL JLN_DEBUG)))
    message(FATAL_ERROR "Unknow value \"${JLN_DEBUG}\" for JLN_DEBUG, expected: default, off, on, line_tables_only, gdb, lldb, sce")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_DIAGNOSTICS_FORMAT)
    set(JLN_DIAGNOSTICS_FORMAT ${JLN_DEFAULT_FLAG_DIAGNOSTICS_FORMAT} CACHE STING "")
  else()
    set(JLN_DIAGNOSTICS_FORMAT "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_DIAGNOSTICS_FORMAT) OR ("fixits" STREQUAL JLN_DIAGNOSTICS_FORMAT) OR ("patch" STREQUAL JLN_DIAGNOSTICS_FORMAT) OR ("print_source_range_info" STREQUAL JLN_DIAGNOSTICS_FORMAT)))
    message(FATAL_ERROR "Unknow value \"${JLN_DIAGNOSTICS_FORMAT}\" for JLN_DIAGNOSTICS_FORMAT, expected: default, fixits, patch, print_source_range_info")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_DIAGNOSTICS_SHOW_TEMPLATE_TREE)
    set(JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE ${JLN_DEFAULT_FLAG_DIAGNOSTICS_SHOW_TEMPLATE_TREE} CACHE STING "")
  else()
    set(JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE) OR ("off" STREQUAL JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE) OR ("on" STREQUAL JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE)))
    message(FATAL_ERROR "Unknow value \"${JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE}\" for JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_ELIDE_TYPE)
    set(JLN_ELIDE_TYPE ${JLN_DEFAULT_FLAG_ELIDE_TYPE} CACHE STING "")
  else()
    set(JLN_ELIDE_TYPE "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_ELIDE_TYPE) OR ("off" STREQUAL JLN_ELIDE_TYPE) OR ("on" STREQUAL JLN_ELIDE_TYPE)))
    message(FATAL_ERROR "Unknow value \"${JLN_ELIDE_TYPE}\" for JLN_ELIDE_TYPE, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_EXCEPTIONS)
    set(JLN_EXCEPTIONS ${JLN_DEFAULT_FLAG_EXCEPTIONS} CACHE STING "")
  else()
    set(JLN_EXCEPTIONS "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_EXCEPTIONS) OR ("off" STREQUAL JLN_EXCEPTIONS) OR ("on" STREQUAL JLN_EXCEPTIONS)))
    message(FATAL_ERROR "Unknow value \"${JLN_EXCEPTIONS}\" for JLN_EXCEPTIONS, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_FAST_MATH)
    set(JLN_FAST_MATH ${JLN_DEFAULT_FLAG_FAST_MATH} CACHE STING "")
  else()
    set(JLN_FAST_MATH "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_FAST_MATH) OR ("off" STREQUAL JLN_FAST_MATH) OR ("on" STREQUAL JLN_FAST_MATH)))
    message(FATAL_ERROR "Unknow value \"${JLN_FAST_MATH}\" for JLN_FAST_MATH, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_LTO)
    set(JLN_LTO ${JLN_DEFAULT_FLAG_LTO} CACHE STING "")
  else()
    set(JLN_LTO "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_LTO) OR ("off" STREQUAL JLN_LTO) OR ("on" STREQUAL JLN_LTO) OR ("fat" STREQUAL JLN_LTO)))
    message(FATAL_ERROR "Unknow value \"${JLN_LTO}\" for JLN_LTO, expected: default, off, on, fat")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_OPTIMIZE)
    set(JLN_OPTIMIZE ${JLN_DEFAULT_FLAG_OPTIMIZE} CACHE STING "")
  else()
    set(JLN_OPTIMIZE "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_OPTIMIZE) OR ("off" STREQUAL JLN_OPTIMIZE) OR ("on" STREQUAL JLN_OPTIMIZE) OR ("size" STREQUAL JLN_OPTIMIZE) OR ("speed" STREQUAL JLN_OPTIMIZE) OR ("whole_program" STREQUAL JLN_OPTIMIZE)))
    message(FATAL_ERROR "Unknow value \"${JLN_OPTIMIZE}\" for JLN_OPTIMIZE, expected: default, off, on, size, speed, whole_program")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_PEDANTIC)
    set(JLN_PEDANTIC ${JLN_DEFAULT_FLAG_PEDANTIC} CACHE STING "")
  else()
    set(JLN_PEDANTIC "on" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_PEDANTIC) OR ("off" STREQUAL JLN_PEDANTIC) OR ("on" STREQUAL JLN_PEDANTIC) OR ("as_error" STREQUAL JLN_PEDANTIC)))
    message(FATAL_ERROR "Unknow value \"${JLN_PEDANTIC}\" for JLN_PEDANTIC, expected: default, off, on, as_error")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_RELRO)
    set(JLN_RELRO ${JLN_DEFAULT_FLAG_RELRO} CACHE STING "")
  else()
    set(JLN_RELRO "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_RELRO) OR ("off" STREQUAL JLN_RELRO) OR ("on" STREQUAL JLN_RELRO) OR ("full" STREQUAL JLN_RELRO)))
    message(FATAL_ERROR "Unknow value \"${JLN_RELRO}\" for JLN_RELRO, expected: default, off, on, full")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_REPRODUCIBLE_BUILD_WARNINGS)
    set(JLN_REPRODUCIBLE_BUILD_WARNINGS ${JLN_DEFAULT_FLAG_REPRODUCIBLE_BUILD_WARNINGS} CACHE STING "")
  else()
    set(JLN_REPRODUCIBLE_BUILD_WARNINGS "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_REPRODUCIBLE_BUILD_WARNINGS) OR ("off" STREQUAL JLN_REPRODUCIBLE_BUILD_WARNINGS) OR ("on" STREQUAL JLN_REPRODUCIBLE_BUILD_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_REPRODUCIBLE_BUILD_WARNINGS}\" for JLN_REPRODUCIBLE_BUILD_WARNINGS, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_RTTI)
    set(JLN_RTTI ${JLN_DEFAULT_FLAG_RTTI} CACHE STING "")
  else()
    set(JLN_RTTI "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_RTTI) OR ("off" STREQUAL JLN_RTTI) OR ("on" STREQUAL JLN_RTTI)))
    message(FATAL_ERROR "Unknow value \"${JLN_RTTI}\" for JLN_RTTI, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SANITIZERS)
    set(JLN_SANITIZERS ${JLN_DEFAULT_FLAG_SANITIZERS} CACHE STING "")
  else()
    set(JLN_SANITIZERS "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_SANITIZERS) OR ("off" STREQUAL JLN_SANITIZERS) OR ("on" STREQUAL JLN_SANITIZERS)))
    message(FATAL_ERROR "Unknow value \"${JLN_SANITIZERS}\" for JLN_SANITIZERS, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SANITIZERS_EXTRA)
    set(JLN_SANITIZERS_EXTRA ${JLN_DEFAULT_FLAG_SANITIZERS_EXTRA} CACHE STING "")
  else()
    set(JLN_SANITIZERS_EXTRA "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_SANITIZERS_EXTRA) OR ("off" STREQUAL JLN_SANITIZERS_EXTRA) OR ("thread" STREQUAL JLN_SANITIZERS_EXTRA) OR ("pointer" STREQUAL JLN_SANITIZERS_EXTRA)))
    message(FATAL_ERROR "Unknow value \"${JLN_SANITIZERS_EXTRA}\" for JLN_SANITIZERS_EXTRA, expected: default, off, thread, pointer")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_STACK_PROTECTOR)
    set(JLN_STACK_PROTECTOR ${JLN_DEFAULT_FLAG_STACK_PROTECTOR} CACHE STING "")
  else()
    set(JLN_STACK_PROTECTOR "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_STACK_PROTECTOR) OR ("off" STREQUAL JLN_STACK_PROTECTOR) OR ("on" STREQUAL JLN_STACK_PROTECTOR) OR ("strong" STREQUAL JLN_STACK_PROTECTOR) OR ("all" STREQUAL JLN_STACK_PROTECTOR)))
    message(FATAL_ERROR "Unknow value \"${JLN_STACK_PROTECTOR}\" for JLN_STACK_PROTECTOR, expected: default, off, on, strong, all")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_STL_DEBUG)
    set(JLN_STL_DEBUG ${JLN_DEFAULT_FLAG_STL_DEBUG} CACHE STING "")
  else()
    set(JLN_STL_DEBUG "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_STL_DEBUG) OR ("off" STREQUAL JLN_STL_DEBUG) OR ("on" STREQUAL JLN_STL_DEBUG) OR ("allow_broken_abi" STREQUAL JLN_STL_DEBUG) OR ("assert_as_exception" STREQUAL JLN_STL_DEBUG)))
    message(FATAL_ERROR "Unknow value \"${JLN_STL_DEBUG}\" for JLN_STL_DEBUG, expected: default, off, on, allow_broken_abi, assert_as_exception")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_STL_FIX)
    set(JLN_STL_FIX ${JLN_DEFAULT_FLAG_STL_FIX} CACHE STING "")
  else()
    set(JLN_STL_FIX "on" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_STL_FIX) OR ("off" STREQUAL JLN_STL_FIX) OR ("on" STREQUAL JLN_STL_FIX)))
    message(FATAL_ERROR "Unknow value \"${JLN_STL_FIX}\" for JLN_STL_FIX, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_SUGGESTS)
    set(JLN_SUGGESTS ${JLN_DEFAULT_FLAG_SUGGESTS} CACHE STING "")
  else()
    set(JLN_SUGGESTS "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_SUGGESTS) OR ("off" STREQUAL JLN_SUGGESTS) OR ("on" STREQUAL JLN_SUGGESTS)))
    message(FATAL_ERROR "Unknow value \"${JLN_SUGGESTS}\" for JLN_SUGGESTS, expected: default, off, on")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_WARNINGS)
    set(JLN_WARNINGS ${JLN_DEFAULT_FLAG_WARNINGS} CACHE STING "")
  else()
    set(JLN_WARNINGS "on" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_WARNINGS) OR ("off" STREQUAL JLN_WARNINGS) OR ("on" STREQUAL JLN_WARNINGS) OR ("strict" STREQUAL JLN_WARNINGS)))
    message(FATAL_ERROR "Unknow value \"${JLN_WARNINGS}\" for JLN_WARNINGS, expected: default, off, on, strict")
  endif()

  if(DEFINED JLN_DEFAULT_FLAG_WARNINGS_AS_ERROR)
    set(JLN_WARNINGS_AS_ERROR ${JLN_DEFAULT_FLAG_WARNINGS_AS_ERROR} CACHE STING "")
  else()
    set(JLN_WARNINGS_AS_ERROR "default" CACHE STRING "")
  endif()

  if(NOT(("default" STREQUAL JLN_WARNINGS_AS_ERROR) OR ("off" STREQUAL JLN_WARNINGS_AS_ERROR) OR ("on" STREQUAL JLN_WARNINGS_AS_ERROR)))
    message(FATAL_ERROR "Unknow value \"${JLN_WARNINGS_AS_ERROR}\" for JLN_WARNINGS_AS_ERROR, expected: default, off, on")
  endif()

  if("${JLN_VERBOSE}" STREQUAL "on" OR "${JLN_VERBOSE}" STREQUAL "1")
    message(STATUS "JLN_COLOR=${JLN_COLOR}	[default, auto, never, always]")
    message(STATUS "JLN_COVERAGE=${JLN_COVERAGE}	[default, off, on]")
    message(STATUS "JLN_DEBUG=${JLN_DEBUG}	[default, off, on, line_tables_only, gdb, lldb, sce]")
    message(STATUS "JLN_DIAGNOSTICS_FORMAT=${JLN_DIAGNOSTICS_FORMAT}	[default, fixits, patch, print_source_range_info]")
    message(STATUS "JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE=${JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE}	[default, off, on]")
    message(STATUS "JLN_ELIDE_TYPE=${JLN_ELIDE_TYPE}	[default, off, on]")
    message(STATUS "JLN_EXCEPTIONS=${JLN_EXCEPTIONS}	[default, off, on]")
    message(STATUS "JLN_FAST_MATH=${JLN_FAST_MATH}	[default, off, on]")
    message(STATUS "JLN_LTO=${JLN_LTO}	[default, off, on, fat]")
    message(STATUS "JLN_OPTIMIZE=${JLN_OPTIMIZE}	[default, off, on, size, speed, whole_program]")
    message(STATUS "JLN_PEDANTIC=${JLN_PEDANTIC}	[default, off, on, as_error]")
    message(STATUS "JLN_RELRO=${JLN_RELRO}	[default, off, on, full]")
    message(STATUS "JLN_REPRODUCIBLE_BUILD_WARNINGS=${JLN_REPRODUCIBLE_BUILD_WARNINGS}	[default, off, on]")
    message(STATUS "JLN_RTTI=${JLN_RTTI}	[default, off, on]")
    message(STATUS "JLN_SANITIZERS=${JLN_SANITIZERS}	[default, off, on]")
    message(STATUS "JLN_SANITIZERS_EXTRA=${JLN_SANITIZERS_EXTRA}	[default, off, thread, pointer]")
    message(STATUS "JLN_STACK_PROTECTOR=${JLN_STACK_PROTECTOR}	[default, off, on, strong, all]")
    message(STATUS "JLN_STL_DEBUG=${JLN_STL_DEBUG}	[default, off, on, allow_broken_abi, assert_as_exception]")
    message(STATUS "JLN_STL_FIX=${JLN_STL_FIX}	[default, off, on]")
    message(STATUS "JLN_SUGGESTS=${JLN_SUGGESTS}	[default, off, on]")
    message(STATUS "JLN_WARNINGS=${JLN_WARNINGS}	[default, off, on, strict]")
    message(STATUS "JLN_WARNINGS_AS_ERROR=${JLN_WARNINGS_AS_ERROR}	[default, off, on]")
  endif()

endfunction()

# jln_target_interface(<libname> [<jln-option> <value>]... [DISABLE_OTHERS on|off])
function(jln_target_interface name type)
  jln_flags(CXX_VAR cxx LINK_VAR link ${ARGV})
  target_link_libraries(${name} INTERFACE ${link})
  target_compile_options(${name} INTERFACE ${cxx})
endfunction()

# jln_flags(CXX_VAR <out-variable> LINK_VAR <out-variable> [<jln-option> <value>]... [DISABLE_OTHERS on|off])
function(jln_flags)
  set(CXX_FLAGS "")
  set(LINK_LINK "")
  cmake_parse_arguments(JLN_FLAGS "DISABLE_OTHERS" "CXX_VAR;LINK_VAR;COLOR;COVERAGE;DEBUG;DIAGNOSTICS_FORMAT;DIAGNOSTICS_SHOW_TEMPLATE_TREE;ELIDE_TYPE;EXCEPTIONS;FAST_MATH;LTO;OPTIMIZE;PEDANTIC;RELRO;REPRODUCIBLE_BUILD_WARNINGS;RTTI;SANITIZERS;SANITIZERS_EXTRA;STACK_PROTECTOR;STL_DEBUG;STL_FIX;SUGGESTS;WARNINGS;WARNINGS_AS_ERROR" "" ${ARGN})

  if(NOT DEFINED JLN_FLAGS_COLOR)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_COLOR "default")
    else()
      set(JLN_FLAGS_COLOR "${JLN_COLOR}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_COVERAGE)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_COVERAGE "default")
    else()
      set(JLN_FLAGS_COVERAGE "${JLN_COVERAGE}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_DEBUG)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_DEBUG "default")
    else()
      set(JLN_FLAGS_DEBUG "${JLN_DEBUG}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_DIAGNOSTICS_FORMAT)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_DIAGNOSTICS_FORMAT "default")
    else()
      set(JLN_FLAGS_DIAGNOSTICS_FORMAT "${JLN_DIAGNOSTICS_FORMAT}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE "default")
    else()
      set(JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE "${JLN_DIAGNOSTICS_SHOW_TEMPLATE_TREE}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_ELIDE_TYPE)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_ELIDE_TYPE "default")
    else()
      set(JLN_FLAGS_ELIDE_TYPE "${JLN_ELIDE_TYPE}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_EXCEPTIONS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_EXCEPTIONS "default")
    else()
      set(JLN_FLAGS_EXCEPTIONS "${JLN_EXCEPTIONS}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_FAST_MATH)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_FAST_MATH "default")
    else()
      set(JLN_FLAGS_FAST_MATH "${JLN_FAST_MATH}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_LTO)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_LTO "default")
    else()
      set(JLN_FLAGS_LTO "${JLN_LTO}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_OPTIMIZE)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_OPTIMIZE "default")
    else()
      set(JLN_FLAGS_OPTIMIZE "${JLN_OPTIMIZE}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_PEDANTIC)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_PEDANTIC "on")
    else()
      set(JLN_FLAGS_PEDANTIC "${JLN_PEDANTIC}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_RELRO)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_RELRO "default")
    else()
      set(JLN_FLAGS_RELRO "${JLN_RELRO}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS "default")
    else()
      set(JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS "${JLN_REPRODUCIBLE_BUILD_WARNINGS}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_RTTI)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_RTTI "default")
    else()
      set(JLN_FLAGS_RTTI "${JLN_RTTI}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_SANITIZERS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_SANITIZERS "default")
    else()
      set(JLN_FLAGS_SANITIZERS "${JLN_SANITIZERS}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_SANITIZERS_EXTRA)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_SANITIZERS_EXTRA "default")
    else()
      set(JLN_FLAGS_SANITIZERS_EXTRA "${JLN_SANITIZERS_EXTRA}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_STACK_PROTECTOR)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_STACK_PROTECTOR "default")
    else()
      set(JLN_FLAGS_STACK_PROTECTOR "${JLN_STACK_PROTECTOR}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_STL_DEBUG)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_STL_DEBUG "default")
    else()
      set(JLN_FLAGS_STL_DEBUG "${JLN_STL_DEBUG}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_STL_FIX)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_STL_FIX "on")
    else()
      set(JLN_FLAGS_STL_FIX "${JLN_STL_FIX}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_SUGGESTS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_SUGGESTS "default")
    else()
      set(JLN_FLAGS_SUGGESTS "${JLN_SUGGESTS}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_WARNINGS)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_WARNINGS "on")
    else()
      set(JLN_FLAGS_WARNINGS "${JLN_WARNINGS}")
    endif()
  endif()

  if(NOT DEFINED JLN_FLAGS_WARNINGS_AS_ERROR)
    if(${JLN_FLAGS_DISABLE_OTHERS})
      set(JLN_FLAGS_WARNINGS_AS_ERROR "default")
    else()
      set(JLN_FLAGS_WARNINGS_AS_ERROR "${JLN_WARNINGS_AS_ERROR}")
    endif()
  endif()

  if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang" ) )
  
    if (  NOT ( JLN_FLAGS_COVERAGE STREQUAL "default") )
    
      if (  JLN_FLAGS_COVERAGE STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "--coverage")
        set(LINK_FLAGS ${LINK_FLAGS}  "--coverage")
        if (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
        
          set(LINK_FLAGS ${LINK_FLAGS}  "-lprofile_rt")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_DEBUG STREQUAL "default") )
    
      if (  JLN_FLAGS_DEBUG STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-g0")

      
      elseif (  JLN_FLAGS_DEBUG STREQUAL "gdb" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-ggdb")

      
      elseif (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
      
        if (  JLN_FLAGS_DEBUG STREQUAL "line_tables_only" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-gline-tables-only")

        endif()
        if (  JLN_FLAGS_DEBUG STREQUAL "lldb" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-glldb")

        
        elseif (  JLN_FLAGS_DEBUG STREQUAL "sce" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-gsce")

        
        else()
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-g")

        endif()
      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-g")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_LTO STREQUAL "default") )
    
      if (  JLN_FLAGS_LTO STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-fno-lto")
        set(LINK_FLAGS ${LINK_FLAGS}  "-fno-lto")
      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-flto")
        set(LINK_FLAGS ${LINK_FLAGS}  "-flto")
        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.0" ) ) )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-flto-odr-type-merging")
          set(LINK_FLAGS ${LINK_FLAGS}  "-flto-odr-type-merging")
          if (  JLN_FLAGS_LTO STREQUAL "fat" )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "-ffat-lto-objects")

          endif()
        
        else()
        
          if (  NOT ( JLN_FLAGS_OPTIMIZE STREQUAL "default") )
          
            if (  JLN_FLAGS_OPTIMIZE STREQUAL "whole_program" )
            
              if (  ( CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.9" ) ) )
              
                set(CXX_FLAGS ${CXX_FLAGS}  "-fwhole-program-vtables")
                set(LINK_FLAGS ${LINK_FLAGS}  "-fwhole-program-vtables")
              endif()
            endif()
          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_FAST_MATH STREQUAL "default") )
    
      if (  JLN_FLAGS_FAST_MATH STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-ffast-math")
        set(LINK_FLAGS ${LINK_FLAGS}  "-ffast-math")
      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-fno-fast-math")
        set(LINK_FLAGS ${LINK_FLAGS}  "-fno-fast-math")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_OPTIMIZE STREQUAL "default") )
    
      if (  JLN_FLAGS_OPTIMIZE STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-O2")
        set(LINK_FLAGS ${LINK_FLAGS}  "-O2")
      
      elseif (  JLN_FLAGS_OPTIMIZE STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-O0")
        set(LINK_FLAGS ${LINK_FLAGS}  "-O0")
      
      elseif (  JLN_FLAGS_OPTIMIZE STREQUAL "size" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-Os")
        set(LINK_FLAGS ${LINK_FLAGS}  "-Os")
      
      elseif (  JLN_FLAGS_OPTIMIZE STREQUAL "speed" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-O3")
        set(LINK_FLAGS ${LINK_FLAGS}  "-O3")
      
      elseif (  JLN_FLAGS_OPTIMIZE STREQUAL "whole_program" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-O3" "-march=native")
        set(LINK_FLAGS ${LINK_FLAGS}  "-s" "-O3" "-march=native")
        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0" ) ) )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fforce-emit-vtables")
          set(LINK_FLAGS ${LINK_FLAGS}  "-fforce-emit-vtables")
        
        elseif (  CMAKE_CXX_COMPILER_ID MATCHES "GNU" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fwhole-program")
          set(LINK_FLAGS ${LINK_FLAGS}  "-fwhole-program")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_PEDANTIC STREQUAL "default") )
    
      if (  NOT JLN_FLAGS_PEDANTIC STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-pedantic")

        if (  JLN_FLAGS_PEDANTIC STREQUAL "as_error" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-pedantic-errors")

        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_STACK_PROTECTOR STREQUAL "default") )
    
      if (  NOT JLN_FLAGS_STACK_PROTECTOR STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-Wstack-protector" "-fstack-protector" -D_FORTIFY_SOURCE=2)
        set(LINK_FLAGS ${LINK_FLAGS}  "-fstack-protector")
        if (  JLN_FLAGS_STACK_PROTECTOR STREQUAL "strong" )
        
          if (  NOT ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "-fstack-protector-strong")
            set(LINK_FLAGS ${LINK_FLAGS}  "-fstack-protector-strong")
          
          elseif (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=safe-stack")
            set(LINK_FLAGS ${LINK_FLAGS}  "-fsanitize=safe-stack")
          endif()
        
        elseif (  JLN_FLAGS_STACK_PROTECTOR STREQUAL "all" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fstack-protector-all")
          set(LINK_FLAGS ${LINK_FLAGS}  "-fstack-protector-all")
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_RELRO STREQUAL "default") )
    
      if (  JLN_FLAGS_RELRO STREQUAL "off" )
      
        set(LINK_FLAGS ${LINK_FLAGS}  "-Wl,-z,norelro")
      
      elseif (  JLN_FLAGS_RELRO STREQUAL "on" )
      
        set(LINK_FLAGS ${LINK_FLAGS}  "-Wl,-z,relro")
      
      elseif (  JLN_FLAGS_RELRO STREQUAL "full" )
      
        set(LINK_FLAGS ${LINK_FLAGS}  "-Wl,-z,relro,-z,now")
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SUGGESTS STREQUAL "default") )
    
      if (  NOT JLN_FLAGS_SUGGESTS STREQUAL "off" )
      
        if (  CMAKE_CXX_COMPILER_ID MATCHES "GNU" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-Wsuggest-attribute=pure" "-Wsuggest-attribute=const")

          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.0" ) )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "-Wsuggest-final-types" "-Wsuggest-final-methods")

            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.1" ) )
            
              set(CXX_FLAGS ${CXX_FLAGS}  "-Wnoexcept")

            endif()
          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_STL_DEBUG STREQUAL "default") )
    
      if (  NOT JLN_FLAGS_STL_DEBUG STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  -D_LIBCPP_DEBUG=1)

        if (  JLN_FLAGS_STL_DEBUG STREQUAL "assert_as_exception" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  -D_LIBCPP_DEBUG_USE_EXCEPTIONS)

        endif()
        if (  JLN_FLAGS_STL_DEBUG STREQUAL "allow_broken_abi" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  -D_GLIBCXX_DEBUG)

        
        else()
        
          set(CXX_FLAGS ${CXX_FLAGS}  -D_GLIBCXX_ASSERTIONS)

        endif()
        if (  NOT ( JLN_FLAGS_PEDANTIC STREQUAL "default") )
        
          if (  NOT JLN_FLAGS_PEDANTIC STREQUAL "off" )
          
            set(CXX_FLAGS ${CXX_FLAGS}  -D_GLIBCXX_DEBUG_PEDANTIC)

          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_WARNINGS STREQUAL "default") )
    
      if (  JLN_FLAGS_WARNINGS STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-w")

      
      else()
      
        if (  CMAKE_CXX_COMPILER_ID MATCHES "GNU" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-Wall" "-Wextra" "-Wcast-align" "-Wcast-qual" "-Wdisabled-optimization" "-Wfloat-equal" "-Wformat-security" "-Wformat-signedness" "-Wformat=2" "-Wmissing-declarations" "-Wmissing-include-dirs" "-Wnon-virtual-dtor" "-Wold-style-cast" "-Woverloaded-virtual" "-Wpacked" "-Wredundant-decls" "-Wundef" "-Wuninitialized" "-Wunused-macros" "-Wvla")

          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.7" ) )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "-Wsuggest-attribute=noreturn" "-Wzero-as-null-pointer-constant" "-Wlogical-op" "-Wvector-operation-performance" "-Wdouble-promotion" "-Wtrampolines")

            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.8" ) )
            
              set(CXX_FLAGS ${CXX_FLAGS}  "-Wuseless-cast")

              if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) )
              
                set(CXX_FLAGS ${CXX_FLAGS}  "-Wconditionally-supported" "-Wfloat-conversion" "-Wopenmp-simd")

                if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.1" ) )
                
                  set(CXX_FLAGS ${CXX_FLAGS}  "-fsized-deallocation" "-Warray-bounds=2" "-Wconditionally-supported" "-Wsized-deallocation" "-Wstrict-null-sentinel" "-Wsuggest-override")

                  if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "6.1" ) )
                  
                    set(CXX_FLAGS ${CXX_FLAGS}  "-Wduplicated-cond" "-Wnull-dereference")

                    if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0" ) )
                    
                      set(CXX_FLAGS ${CXX_FLAGS}  "-Waligned-new")

                      if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.1" ) )
                      
                        set(CXX_FLAGS ${CXX_FLAGS}  "-Walloc-zero" "-Walloca" "-Wformat-overflow" "-Wshadow=compatible-local" "-Wduplicated-branches")

                        if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) )
                        
                          set(CXX_FLAGS ${CXX_FLAGS}  "-Wclass-memaccess")

                        endif()
                      endif()
                    endif()
                  endif()
                endif()
              endif()
            endif()
          endif()
        endif()
        if (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-Weverything" "-Wno-c++98-compat" "-Wno-c++98-compat-pedantic" "-Wno-mismatched-tags" "-Wno-padded" "-Wno-shadow" "-Wno-global-constructors" "-Wno-weak-vtables" "-Wno-exit-time-destructors" "-Wno-covered-switch-default" "-Wno-switch-default" "-Wno-switch-enum" "-Wno-inconsistent-missing-destructor-override")

        endif()
        if (  JLN_FLAGS_WARNINGS STREQUAL "strict" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-Wconversion")

          if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "-Wcast-align=strict")

          endif()
        
        elseif (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-Wno-conversion" "-Wno-sign-conversion")

        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SANITIZERS STREQUAL "default") )
    
      if (  JLN_FLAGS_SANITIZERS STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-fno-sanitize=all")
        set(LINK_FLAGS ${LINK_FLAGS}  "-fno-sanitize=all")
      
      else()
      
        if (  CMAKE_CXX_COMPILER_ID MATCHES "Clang" )
        
          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.1" ) )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=undefined" "-fsanitize=address" "-fsanitize-address-use-after-scope" "-fno-omit-frame-pointer" "-fno-optimize-sibling-calls")
            set(LINK_FLAGS ${LINK_FLAGS}  "-fsanitize=undefined" "-fsanitize=address")
            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.4" ) )
            
              set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=leak")
              set(LINK_FLAGS ${LINK_FLAGS}  "-fsanitize=leak")
              if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "6.0" ) )
              
                set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=bounds")
                set(LINK_FLAGS ${LINK_FLAGS}  "-fsanitize=bounds")
              endif()
            endif()
          endif()
        
        else()
        
          if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.8" ) )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=address" "-fno-omit-frame-pointer" "-fno-optimize-sibling-calls")
            set(LINK_FLAGS ${LINK_FLAGS}  "-fsanitize=address")
            if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) )
            
              set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=undefined" "-fsanitize=leak")
              set(LINK_FLAGS ${LINK_FLAGS}  "-fsanitize=undefined" "-fsanitize=leak")
              if (  NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "6.0" ) )
              
                set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=bounds" "-fsanitize=bounds-strict")

              endif()
            endif()
          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SANITIZERS_EXTRA STREQUAL "default") )
    
      if (  JLN_FLAGS_SANITIZERS_EXTRA STREQUAL "thread" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=thread")

      
      elseif (  JLN_FLAGS_SANITIZERS_EXTRA STREQUAL "pointer" )
      
        if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fsanitize=pointer-compare" "-fsanitize=pointer-subtract")

        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS STREQUAL "default") )
    
      if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) ) )
      
        if (  JLN_FLAGS_REPRODUCIBLE_BUILD_WARNINGS STREQUAL "on" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-Wdate-time")

        
        else()
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-Wno-date-time")

        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_COLOR STREQUAL "default") )
    
      if (  ( ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "4.9" ) ) OR CMAKE_CXX_COMPILER_ID MATCHES "Clang" ) )
      
        if (  JLN_FLAGS_COLOR STREQUAL "auto" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fdiagnostics-color=auto")

        
        elseif (  JLN_FLAGS_COLOR STREQUAL "never" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fdiagnostics-color=never")

        
        elseif (  JLN_FLAGS_COLOR STREQUAL "always" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fdiagnostics-color=always")

        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_ELIDE_TYPE STREQUAL "default") )
    
      if (  ( ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) OR ( CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "3.4" ) ) ) )
      
        if (  JLN_FLAGS_ELIDE_TYPE STREQUAL "on" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-felide-type")

        
        else()
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fno-elide-type")

        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_EXCEPTIONS STREQUAL "default") )
    
      if (  JLN_FLAGS_EXCEPTIONS STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-fexceptions")

      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-fno-exceptions")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_RTTI STREQUAL "default") )
    
      if (  JLN_FLAGS_RTTI STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-frtti")

      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  "fno-rtti")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE STREQUAL "default") )
    
      if (  ( ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "8.0" ) ) OR CMAKE_CXX_COMPILER_ID MATCHES "Clang" ) )
      
        if (  JLN_FLAGS_DIAGNOSTICS_SHOW_TEMPLATE_TREE STREQUAL "on" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fdiagnostics-show-template-tree")

        
        else()
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fno-diagnostics-show-template-tree")

        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_DIAGNOSTICS_FORMAT STREQUAL "default") )
    
      if (  JLN_FLAGS_DIAGNOSTICS_FORMAT STREQUAL "fixits" )
      
        if (  ( ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0" ) ) OR ( CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "5.0" ) ) ) )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "-fdiagnostics-parseable-fixits")

        endif()
      
      elseif (  JLN_FLAGS_DIAGNOSTICS_FORMAT STREQUAL "patch" )
      
      endif()
      if (  ( CMAKE_CXX_COMPILER_ID MATCHES "GNU" AND NOT ( CMAKE_CXX_COMPILER_VERSION VERSION_LESS "7.0" ) ) )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-fdiagnostics-generate-patch")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "default") )
    
      if (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-Werror")

      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  "-Wno-error")

      endif()
    endif()
  
  elseif (  CMAKE_CXX_COMPILER_ID MATCHES "MSVC" )
  
    if (  NOT ( JLN_FLAGS_STL_FIX STREQUAL "default") )
    
      if (  JLN_FLAGS_STL_FIX STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/DNOMINMAX")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_DEBUG STREQUAL "default") )
    
      if (  JLN_FLAGS_DEBUG STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/DEBUG:NONE")

      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/Z7")

        if (  JLN_FLAGS_DEBUG STREQUAL "on" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "/DEBUG")

        
        elseif (  JLN_FLAGS_DEBUG STREQUAL "line_tables_only" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "/DEBUG:FASTLINK")

        endif()
        if (  NOT ( JLN_FLAGS_OPTIMIZE STREQUAL "default") )
        
          if (  JLN_FLAGS_OPTIMIZE STREQUAL "off" )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "/Od")

          
          else()
          
            set(CXX_FLAGS ${CXX_FLAGS}  "/Zi")

          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_EXCEPTIONS STREQUAL "default") )
    
      if (  JLN_FLAGS_EXCEPTIONS STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/EHc")

      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/EHc-")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_FAST_MATH STREQUAL "default") )
    
      if (  JLN_FLAGS_FAST_MATH STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/fp:fast")

      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/fp:fast-")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_OPTIMIZE STREQUAL "default") )
    
      if (  JLN_FLAGS_OPTIMIZE STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/Ob0 /Od /Oi- /Oy-")

      
      elseif (  JLN_FLAGS_OPTIMIZE STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/O2")

      
      elseif (  JLN_FLAGS_OPTIMIZE STREQUAL "size" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/O1")

      
      elseif (  JLN_FLAGS_OPTIMIZE STREQUAL "speed" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/O2")

      
      elseif (  JLN_FLAGS_OPTIMIZE STREQUAL "whole_program" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/O2" "/GL" "/Gw")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_PEDANTIC STREQUAL "default") )
    
      if (  NOT JLN_FLAGS_PEDANTIC STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/permissive-")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_RTTI STREQUAL "default") )
    
      if (  JLN_FLAGS_RTTI STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/GR")

      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/GR-")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_STL_DEBUG STREQUAL "default") )
    
      if (  JLN_FLAGS_STL_DEBUG STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/D_HAS_ITERATOR_DEBUGGING=0")

      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/D_HAS_ITERATOR_DEBUGGING=1")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_SANITIZERS STREQUAL "default") )
    
      if (  JLN_FLAGS_SANITIZERS STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/guard:cf" "/sdl")

      
      else()
      
          set(CXX_FLAGS ${CXX_FLAGS}  "/guard:cf-")

        if (  NOT ( JLN_FLAGS_STACK_PROTECTOR STREQUAL "default") )
        
          if (  NOT JLN_FLAGS_STACK_PROTECTOR STREQUAL "off" )
          
            set(CXX_FLAGS ${CXX_FLAGS}  "/sdl-")

          endif()
        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_STACK_PROTECTOR STREQUAL "default") )
    
      if (  NOT JLN_FLAGS_STACK_PROTECTOR STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/GS" "/sdl")

        if (  JLN_FLAGS_STACK_PROTECTOR STREQUAL "strong" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "/RTC1")

        
        elseif (  JLN_FLAGS_STACK_PROTECTOR STREQUAL "all" )
        
          set(CXX_FLAGS ${CXX_FLAGS}  "/RTC1" "/RTCc")

        endif()
      endif()
    endif()
    if (  NOT ( JLN_FLAGS_WARNINGS STREQUAL "default") )
    
      if (  JLN_FLAGS_WARNINGS STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/W4")

      
      elseif (  JLN_FLAGS_WARNINGS STREQUAL "strict" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/Wall")

      
      elseif (  JLN_FLAGS_WARNINGS STREQUAL "off" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/W0")

      endif()
    endif()
    if (  NOT ( JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "default") )
    
      if (  JLN_FLAGS_WARNINGS_AS_ERROR STREQUAL "on" )
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/WX")
        set(LINK_FLAGS ${LINK_FLAGS}  "/WX")
      
      else()
      
        set(CXX_FLAGS ${CXX_FLAGS}  "/WX-")

      endif()
    endif()
  endif()
set(${JLN_FLAGS_CXX_VAR} ${CXX_FLAGS} PARENT_SCOPE)
set(${JLN_FLAGS_LINK_VAR} ${LINK_FLAGS} PARENT_SCOPE)
endfunction()
