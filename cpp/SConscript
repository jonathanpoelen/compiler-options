#  ```py
#  # launch example: scons jln_sanitizers=on
#  
#  from jln_options import *
#  
#  # jln_set_global_flags(options, compiler=None, version=None, linker=None)
#  # version is a string. Ex: '7.2' or '5'
#  jln_set_global_flags({'rtti': 'off'})
#  
#  vars = Variables(None, ARGUMENTS)
#  jln_add_variables(vars, {'debug':'on'}) # default value of debug to on
#  
#  # {flags=[...], linkflags=[...]}
#  flags1 = jln_flags(vars)
#  flags2 = jln_flags({'debug':'on'})
#  ```
#  
#  
#  # Options
#  
#  Supported options are (in alphabetical order):
#  
#  <!-- ./compiler-options.lua generators/list_options.lua --color -->
#  ```ini
#  color = default auto never always
#  control_flow = default off on branch return allow_bugs
#  coverage = default off on
#  cpu = default generic native
#  debug = default off on line_tables_only gdb lldb sce
#  diagnostics_format = default fixits patch print_source_range_info
#  diagnostics_show_template_tree = default off on
#  elide_type = default off on
#  exceptions = default off on
#  fix_compiler_error = on default off
#  linker = default bfd gold lld native
#  lto = default off on fat thin
#  microsoft_abi_compatibility_warning = off default on
#  msvc_isystem = default anglebrackets include_and_caexcludepath
#  msvc_isystem_with_template_from_non_external = default off on
#  optimization = default 0 g 1 2 3 fast size
#  pedantic = on default off as_error
#  pie = default off on pic
#  relro = default off on full
#  reproducible_build_warnings = default off on
#  rtti = default off on
#  sanitizers = default off on
#  sanitizers_extra = default off thread pointer
#  shadow_warnings = off default on local compatible_local all
#  stack_protector = default off on strong all
#  stl_debug = default off on allow_broken_abi allow_broken_abi_and_bugs assert_as_exception
#  stl_fix = on default off
#  suggestions = default off on
#  warnings = on default off strict very_strict
#  warnings_as_error = default off on basic
#  whole_program = default off on strip_all
#  ```
#  <!-- ./compiler-options.lua -->
#  
#  The value `default` does nothing.
#  
#  If not specified, `fix_compiler_error`, `pedantic`, `stl_fix` and `warnings` are `on` ; `microsoft_abi_compatibility_warning` and `shadow_warnings` are `off`.
#  
#  - `control_flow=allow_bugs`
#    - clang: Can crash programs with "illegal hardware instruction" on totally unlikely lines. It can also cause link errors and force `-fvisibility=hidden` and `-flto`.
#  - `stl_debug=allow_broken_abi_and_bugs`
#    - clang: libc++ can crash on dynamic memory releases in the standard classes. This bug is fixed with the library associated with version 8.
#  
#  
#  ## Recommended options
#  
#  category | options
#  ---------|---------
#  debug | `control_flow=on`<br>`debug=on`<br>`sanitizers=on`<br>`stl_debug=allow_broken_abi` or `on`<br>
#  release | `cpu=native`<br>`linker=gold`, `lld` or `native`<br>`lto=on` or `thin`<br>`optimization=3`<br>`rtti=off`<br>`whole_program=strip_all`
#  security | `control_flow=on`<br>`relro=full`<br>`stack_protector=strong`
#  really strict warnings | `pedantic=as_error`<br>`shadow_warnings=local`<br>`suggestions=on`<br>`warnings=very_strict`
#  
#  

# File generated with https://github.com/jonathanpoelen/cpp-compiler-options

from SCons.Environment import Environment
from SCons.Variables.EnumVariable import EnumVariable

_jln_default_flags = {
  'color': 'default',
  'control_flow': 'default',
  'coverage': 'default',
  'cpu': 'default',
  'debug': 'default',
  'diagnostics_format': 'default',
  'diagnostics_show_template_tree': 'default',
  'elide_type': 'default',
  'exceptions': 'default',
  'fix_compiler_error': 'on',
  'linker': 'default',
  'lto': 'default',
  'microsoft_abi_compatibility_warning': 'off',
  'msvc_isystem': 'default',
  'msvc_isystem_with_template_from_non_external': 'default',
  'optimization': 'default',
  'pedantic': 'on',
  'pie': 'default',
  'relro': 'default',
  'reproducible_build_warnings': 'default',
  'rtti': 'default',
  'sanitizers': 'default',
  'sanitizers_extra': 'default',
  'shadow_warnings': 'off',
  'stack_protector': 'default',
  'stl_debug': 'default',
  'stl_fix': 'on',
  'suggestions': 'default',
  'warnings': 'on',
  'warnings_as_error': 'default',
  'whole_program': 'default',
}

_jln_var2opts = {
  'jln_color': 'color',
  'jln_control_flow': 'control_flow',
  'jln_coverage': 'coverage',
  'jln_cpu': 'cpu',
  'jln_debug': 'debug',
  'jln_diagnostics_format': 'diagnostics_format',
  'jln_diagnostics_show_template_tree': 'diagnostics_show_template_tree',
  'jln_elide_type': 'elide_type',
  'jln_exceptions': 'exceptions',
  'jln_fix_compiler_error': 'fix_compiler_error',
  'jln_linker': 'linker',
  'jln_lto': 'lto',
  'jln_microsoft_abi_compatibility_warning': 'microsoft_abi_compatibility_warning',
  'jln_msvc_isystem': 'msvc_isystem',
  'jln_msvc_isystem_with_template_from_non_external': 'msvc_isystem_with_template_from_non_external',
  'jln_optimization': 'optimization',
  'jln_pedantic': 'pedantic',
  'jln_pie': 'pie',
  'jln_relro': 'relro',
  'jln_reproducible_build_warnings': 'reproducible_build_warnings',
  'jln_rtti': 'rtti',
  'jln_sanitizers': 'sanitizers',
  'jln_sanitizers_extra': 'sanitizers_extra',
  'jln_shadow_warnings': 'shadow_warnings',
  'jln_stack_protector': 'stack_protector',
  'jln_stl_debug': 'stl_debug',
  'jln_stl_fix': 'stl_fix',
  'jln_suggestions': 'suggestions',
  'jln_warnings': 'warnings',
  'jln_warnings_as_error': 'warnings_as_error',
  'jln_whole_program': 'whole_program',
}

_jln_opt2vars = {
  'color': 'jln_color',
  'control_flow': 'jln_control_flow',
  'coverage': 'jln_coverage',
  'cpu': 'jln_cpu',
  'debug': 'jln_debug',
  'diagnostics_format': 'jln_diagnostics_format',
  'diagnostics_show_template_tree': 'jln_diagnostics_show_template_tree',
  'elide_type': 'jln_elide_type',
  'exceptions': 'jln_exceptions',
  'fix_compiler_error': 'jln_fix_compiler_error',
  'linker': 'jln_linker',
  'lto': 'jln_lto',
  'microsoft_abi_compatibility_warning': 'jln_microsoft_abi_compatibility_warning',
  'msvc_isystem': 'jln_msvc_isystem',
  'msvc_isystem_with_template_from_non_external': 'jln_msvc_isystem_with_template_from_non_external',
  'optimization': 'jln_optimization',
  'pedantic': 'jln_pedantic',
  'pie': 'jln_pie',
  'relro': 'jln_relro',
  'reproducible_build_warnings': 'jln_reproducible_build_warnings',
  'rtti': 'jln_rtti',
  'sanitizers': 'jln_sanitizers',
  'sanitizers_extra': 'jln_sanitizers_extra',
  'shadow_warnings': 'jln_shadow_warnings',
  'stack_protector': 'jln_stack_protector',
  'stl_debug': 'jln_stl_debug',
  'stl_fix': 'jln_stl_fix',
  'suggestions': 'jln_suggestions',
  'warnings': 'jln_warnings',
  'warnings_as_error': 'jln_warnings_as_error',
  'whole_program': 'jln_whole_program',
}

def jln_set_global_flags(default_values):
  _jln_default_flags.update(default_values)

def jln_add_variables(vars, default_values={}):
  vars.AddVariables(
    EnumVariable('jln_color', '', default_values.get('color', _jln_default_flags['color']),
                 allowed_values=('default', 'auto', 'never', 'always')),
    EnumVariable('jln_control_flow', '', default_values.get('control_flow', _jln_default_flags['control_flow']),
                 allowed_values=('default', 'off', 'on', 'branch', 'return', 'allow_bugs')),
    EnumVariable('jln_coverage', '', default_values.get('coverage', _jln_default_flags['coverage']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_cpu', '', default_values.get('cpu', _jln_default_flags['cpu']),
                 allowed_values=('default', 'generic', 'native')),
    EnumVariable('jln_debug', '', default_values.get('debug', _jln_default_flags['debug']),
                 allowed_values=('default', 'off', 'on', 'line_tables_only', 'gdb', 'lldb', 'sce')),
    EnumVariable('jln_diagnostics_format', '', default_values.get('diagnostics_format', _jln_default_flags['diagnostics_format']),
                 allowed_values=('default', 'fixits', 'patch', 'print_source_range_info')),
    EnumVariable('jln_diagnostics_show_template_tree', '', default_values.get('diagnostics_show_template_tree', _jln_default_flags['diagnostics_show_template_tree']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_elide_type', '', default_values.get('elide_type', _jln_default_flags['elide_type']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_exceptions', '', default_values.get('exceptions', _jln_default_flags['exceptions']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_fix_compiler_error', '', default_values.get('fix_compiler_error', _jln_default_flags['fix_compiler_error']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_linker', '', default_values.get('linker', _jln_default_flags['linker']),
                 allowed_values=('default', 'bfd', 'gold', 'lld', 'native')),
    EnumVariable('jln_lto', '', default_values.get('lto', _jln_default_flags['lto']),
                 allowed_values=('default', 'off', 'on', 'fat', 'thin')),
    EnumVariable('jln_microsoft_abi_compatibility_warning', '', default_values.get('microsoft_abi_compatibility_warning', _jln_default_flags['microsoft_abi_compatibility_warning']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_msvc_isystem', '', default_values.get('msvc_isystem', _jln_default_flags['msvc_isystem']),
                 allowed_values=('default', 'anglebrackets', 'include_and_caexcludepath')),
    EnumVariable('jln_msvc_isystem_with_template_from_non_external', '', default_values.get('msvc_isystem_with_template_from_non_external', _jln_default_flags['msvc_isystem_with_template_from_non_external']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_optimization', '', default_values.get('optimization', _jln_default_flags['optimization']),
                 allowed_values=('default', '0', 'g', '1', '2', '3', 'fast', 'size')),
    EnumVariable('jln_pedantic', '', default_values.get('pedantic', _jln_default_flags['pedantic']),
                 allowed_values=('default', 'off', 'on', 'as_error')),
    EnumVariable('jln_pie', '', default_values.get('pie', _jln_default_flags['pie']),
                 allowed_values=('default', 'off', 'on', 'pic')),
    EnumVariable('jln_relro', '', default_values.get('relro', _jln_default_flags['relro']),
                 allowed_values=('default', 'off', 'on', 'full')),
    EnumVariable('jln_reproducible_build_warnings', '', default_values.get('reproducible_build_warnings', _jln_default_flags['reproducible_build_warnings']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_rtti', '', default_values.get('rtti', _jln_default_flags['rtti']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_sanitizers', '', default_values.get('sanitizers', _jln_default_flags['sanitizers']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_sanitizers_extra', '', default_values.get('sanitizers_extra', _jln_default_flags['sanitizers_extra']),
                 allowed_values=('default', 'off', 'thread', 'pointer')),
    EnumVariable('jln_shadow_warnings', '', default_values.get('shadow_warnings', _jln_default_flags['shadow_warnings']),
                 allowed_values=('default', 'off', 'on', 'local', 'compatible_local', 'all')),
    EnumVariable('jln_stack_protector', '', default_values.get('stack_protector', _jln_default_flags['stack_protector']),
                 allowed_values=('default', 'off', 'on', 'strong', 'all')),
    EnumVariable('jln_stl_debug', '', default_values.get('stl_debug', _jln_default_flags['stl_debug']),
                 allowed_values=('default', 'off', 'on', 'allow_broken_abi', 'allow_broken_abi_and_bugs', 'assert_as_exception')),
    EnumVariable('jln_stl_fix', '', default_values.get('stl_fix', _jln_default_flags['stl_fix']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_suggestions', '', default_values.get('suggestions', _jln_default_flags['suggestions']),
                 allowed_values=('default', 'off', 'on')),
    EnumVariable('jln_warnings', '', default_values.get('warnings', _jln_default_flags['warnings']),
                 allowed_values=('default', 'off', 'on', 'strict', 'very_strict')),
    EnumVariable('jln_warnings_as_error', '', default_values.get('warnings_as_error', _jln_default_flags['warnings_as_error']),
                 allowed_values=('default', 'off', 'on', 'basic')),
    EnumVariable('jln_whole_program', '', default_values.get('whole_program', _jln_default_flags['whole_program']),
                 allowed_values=('default', 'off', 'on', 'strip_all'))  )

def jln_varname_to_optname(options):
  return {_jln_var2opts.get(k, k):v for k,v in options.items()}
def jln_optname_to_varname(options):
  return {_jln_opt2vars.get(k, k):v for k,v in options.items()}
def jln_variables_to_options(vars):
  args = vars.args
  return {_jln_var2opts[v.key]:args.get(v.key, v.default) for v in vars.options}

_jln_default_env = Environment()
_jln_map_compiler = {"g++": "gcc", "mingw": "gcc", "clang++": "clang"}
def jln_flags(options, compiler=None, version=None, linker=None):
  compiler = compiler or _jln_default_env['CXX']

  _compiler = None
  for comp in ('clang', 'g++', 'gcc', 'msvc'):
    if compiler.find(comp) != -1:
      _compiler = comp
      break

  if not _compiler:
    return {}

  compiler = _jln_map_compiler.get(_compiler, _compiler)
  version = version or _jln_default_env['CXXVERSION']
  version = version.split(".")
  version[0] = int(version[0])
  version[1] = int(version[1]) if len(version) == 1 else 0

  options = options if type(options) == dict else jln_variables_to_options(options)

  def verless(major, minor):
    return version[0] < major or (version[0] == major and version[1] < minor)

  flags=[]
  linkflags=[]
  if ( compiler == 'gcc' or compiler == 'clang' or compiler == 'clang-cl' ) :
    if not ( options.get('warnings', _jln_default_flags['warnings']) == 'default') :
      if options.get('warnings', _jln_default_flags['warnings']) == 'off' :
'-w',       else:
        if compiler == 'gcc' :
'-Wall', '-Wextra', '-Wcast-align', '-Wcast-qual', '-Wdisabled-optimization', '-Wfloat-equal', '-Wformat-security', '-Wformat=2', '-Wmissing-include-dirs', '-Wpacked', '-Wredundant-decls', '-Wundef', '-Wunused-macros', '-Winvalid-pch', '-Wpointer-arith', '-Wmissing-declarations', '-Wnon-virtual-dtor', '-Wold-style-cast', '-Woverloaded-virtual',           if not ( verless(4, 7) ) :
'-Wsuggest-attribute=noreturn', '-Wzero-as-null-pointer-constant', '-Wlogical-op', '-Wvector-operation-performance', '-Wdouble-promotion', '-Wtrampolines',             if not ( verless(4, 8) ) :
'-Wuseless-cast',               if not ( verless(4, 9) ) :
'-Wconditionally-supported', '-Wfloat-conversion',                 if not ( verless(5, 1) ) :
'-Wformat-signedness', '-Warray-bounds=2', '-Wstrict-null-sentinel', '-Wsuggest-override',                   if not ( verless(6, 1) ) :
'-Wduplicated-cond', '-Wnull-dereference',                     if not ( verless(7, 0) ) :
'-Waligned-new',                       if not ( verless(7, 1) ) :
'-Walloc-zero', '-Walloca', '-Wformat-overflow=2', '-Wduplicated-branches',                         if not ( verless(8, 0) ) :
'-Wclass-memaccess',         else:
          if ( compiler == 'clang' or compiler == 'clang-cl' ) :
'-Weverything', '-Wno-documentation', '-Wno-documentation-unknown-command', '-Wno-newline-eof', '-Wno-c++98-compat', '-Wno-c++98-compat-pedantic', '-Wno-padded', '-Wno-global-constructors', '-Wno-weak-vtables', '-Wno-exit-time-destructors', '-Wno-covered-switch-default', '-Wno-switch-default', '-Wno-switch-enum',             if not ( verless(3, 9) ) :
'-Wno-undefined-var-template',               if not ( verless(5, 0) ) :
'-Wno-inconsistent-missing-destructor-override',                 if not ( verless(9, 0) ) :
'-Wno-ctad-maybe-unsupported',         if ( options.get('warnings', _jln_default_flags['warnings']) == 'strict' or options.get('warnings', _jln_default_flags['warnings']) == 'very_strict' ) :
'-Wconversion',           if ( compiler == 'gcc' and not ( verless(8, 0) ) ) :
'-Wcast-align=strict',         else:
          if ( compiler == 'clang' or compiler == 'clang-cl' ) :
'-Wno-conversion', '-Wno-sign-conversion',     if not ( options.get('microsoft_abi_compatibility_warning', _jln_default_flags['microsoft_abi_compatibility_warning']) == 'default') :
      if options.get('microsoft_abi_compatibility_warning', _jln_default_flags['microsoft_abi_compatibility_warning']) == 'on' :
        if ( compiler == 'gcc' and not ( verless(10, 0) ) ) :
'-Wmismatched-tags',         else:
          if ( compiler == 'clang' or compiler == 'clang-cl' ) :
'-Wmismatched-tags',       else:
        if ( compiler == 'gcc' and not ( verless(10, 0) ) ) :
'-Wno-mismatched-tags',         else:
          if ( compiler == 'clang' or compiler == 'clang-cl' ) :
'-Wno-mismatched-tags',     if not ( options.get('warnings_as_error', _jln_default_flags['warnings_as_error']) == 'default') :
      if options.get('warnings_as_error', _jln_default_flags['warnings_as_error']) == 'on' :
'-Werror',       else:
        if options.get('warnings_as_error', _jln_default_flags['warnings_as_error']) == 'basic' :
'-Werror=return-type', '-Werror=init-self',           if ( compiler == 'gcc' and not ( verless(5, 1) ) ) :
'-Werror=array-bounds', '-Werror=logical-op', '-Werror=logical-not-parentheses',           else:
            if ( compiler == 'clang' or compiler == 'clang-cl' ) :
'-Werror=array-bounds', '-Werror=division-by-zero',               if not ( verless(3, 4) ) :
'-Werror=logical-not-parentheses',                 if not ( verless(3, 6) ) :
'-Werror=delete-incomplete',                   if not ( verless(7, 0) ) :
'-Werror=dynamic-class-memaccess',         else:
'-Wno-error',     if not ( options.get('suggestions', _jln_default_flags['suggestions']) == 'default') :
      if not ( options.get('suggestions', _jln_default_flags['suggestions']) == 'off' ) :
        if compiler == 'gcc' :
'-Wsuggest-attribute=pure', '-Wsuggest-attribute=const',           if not ( verless(5, 0) ) :
'-Wsuggest-final-types', '-Wsuggest-final-methods',             if not ( verless(5, 1) ) :
'-Wnoexcept',     if not ( options.get('sanitizers', _jln_default_flags['sanitizers']) == 'default') :
      if options.get('sanitizers', _jln_default_flags['sanitizers']) == 'off' :
'-fno-sanitize=all', '-fno-sanitize=all',       else:
        if compiler == 'clang-cl' :
'-fsanitize=undefined', '-fsanitize=address', '-fsanitize-address-use-after-scope',         else:
          if compiler == 'clang' :
            if not ( verless(3, 1) ) :
'-fsanitize=undefined', '-fsanitize=address', '-fsanitize-address-use-after-scope', '-fno-omit-frame-pointer', '-fno-optimize-sibling-calls', '-fsanitize=undefined', '-fsanitize=address',               if not ( verless(3, 4) ) :
'-fsanitize=leak', '-fsanitize=leak',           else:
            if compiler == 'gcc' :
              if not ( verless(4, 8) ) :
'-fsanitize=address', '-fno-omit-frame-pointer', '-fno-optimize-sibling-calls', '-fsanitize=address',                 if not ( verless(4, 9) ) :
'-fsanitize=undefined', '-fsanitize=leak', '-fsanitize=undefined', '-fsanitize=leak',     if not ( options.get('control_flow', _jln_default_flags['control_flow']) == 'default') :
      if options.get('control_flow', _jln_default_flags['control_flow']) == 'off' :
        if ( compiler == 'gcc' and not ( verless(8, 0) ) ) :
'-fcf-protection=none',         else:
          if compiler == 'clang-cl' :
'-fcf-protection=none', '-fno-sanitize-cfi-cross-dso',         if compiler == 'clang' :
'-fno-sanitize=cfi', '-fno-sanitize=cfi',       else:
        if ( ( compiler == 'gcc' and not ( verless(8, 0) ) ) or compiler == 'clang-cl' ) :
          if options.get('control_flow', _jln_default_flags['control_flow']) == 'branch' :
'-fcf-protection=branch',           else:
            if options.get('control_flow', _jln_default_flags['control_flow']) == 'return' :
'-fcf-protection=return',             else:
'-fcf-protection=full',         else:
          if ( options.get('control_flow', _jln_default_flags['control_flow']) == 'allow_bugs' and compiler == 'clang' ) :
'-fsanitize=cfi', '-fvisibility=hidden', '-flto', '-fsanitize=cfi', '-flto',     if not ( options.get('color', _jln_default_flags['color']) == 'default') :
      if ( ( compiler == 'gcc' and not ( verless(4, 9) ) ) or compiler == 'clang' or compiler == 'clang-cl' ) :
        if options.get('color', _jln_default_flags['color']) == 'auto' :
'-fdiagnostics-color=auto',         else:
          if options.get('color', _jln_default_flags['color']) == 'never' :
'-fdiagnostics-color=never',           else:
            if options.get('color', _jln_default_flags['color']) == 'always' :
'-fdiagnostics-color=always',     if not ( options.get('reproducible_build_warnings', _jln_default_flags['reproducible_build_warnings']) == 'default') :
      if ( compiler == 'gcc' and not ( verless(4, 9) ) ) :
        if options.get('reproducible_build_warnings', _jln_default_flags['reproducible_build_warnings']) == 'on' :
'-Wdate-time',         else:
'-Wno-date-time',     if not ( options.get('diagnostics_format', _jln_default_flags['diagnostics_format']) == 'default') :
      if options.get('diagnostics_format', _jln_default_flags['diagnostics_format']) == 'fixits' :
        if ( ( compiler == 'gcc' and not ( verless(7, 0) ) ) or ( compiler == 'clang' and not ( verless(5, 0) ) ) or ( compiler == 'clang-cl' and not ( verless(5, 0) ) ) ) :
'-fdiagnostics-parseable-fixits',       else:
        if options.get('diagnostics_format', _jln_default_flags['diagnostics_format']) == 'patch' :
          if ( compiler == 'gcc' and not ( verless(7, 0) ) ) :
'-fdiagnostics-generate-patch',         else:
          if options.get('diagnostics_format', _jln_default_flags['diagnostics_format']) == 'print_source_range_info' :
            if compiler == 'clang' :
'-fdiagnostics-print-source-range-info',     if not ( options.get('fix_compiler_error', _jln_default_flags['fix_compiler_error']) == 'default') :
      if options.get('fix_compiler_error', _jln_default_flags['fix_compiler_error']) == 'on' :
        if compiler == 'gcc' :
          if not ( verless(4, 7) ) :
'-Werror=narrowing',             if not ( verless(7, 1) ) :
'-Werror=literal-suffix', '-Werror=write-strings',       else:
        if ( compiler == 'clang' or compiler == 'clang-cl' ) :
'-Wno-error=c++11-narrowing', '-Wno-reserved-user-defined-literal',   if ( compiler == 'gcc' or compiler == 'clang' ) :
    if not ( options.get('coverage', _jln_default_flags['coverage']) == 'default') :
      if options.get('coverage', _jln_default_flags['coverage']) == 'on' :
'--coverage', '--coverage',         if compiler == 'clang' :
'-lprofile_rt',     if not ( options.get('debug', _jln_default_flags['debug']) == 'default') :
      if options.get('debug', _jln_default_flags['debug']) == 'off' :
'-g0',       else:
        if options.get('debug', _jln_default_flags['debug']) == 'gdb' :
'-ggdb',         else:
          if compiler == 'clang' :
            if options.get('debug', _jln_default_flags['debug']) == 'line_tables_only' :
'-gline-tables-only',             if options.get('debug', _jln_default_flags['debug']) == 'lldb' :
'-glldb',             else:
              if options.get('debug', _jln_default_flags['debug']) == 'sce' :
'-gsce',               else:
'-g',           else:
'-g',     if not ( options.get('linker', _jln_default_flags['linker']) == 'default') :
      if options.get('linker', _jln_default_flags['linker']) == 'native' :
        if compiler == 'gcc' :
'-fuse-ld=gold',         else:
'-fuse-ld=lld',       else:
        if options.get('linker', _jln_default_flags['linker']) == 'bfd' :
'-fuse-ld=bfd',         else:
          if ( options.get('linker', _jln_default_flags['linker']) == 'gold' or ( compiler == 'gcc' and not ( not ( verless(9, 0) ) ) ) ) :
'-fuse-ld=gold',           else:
            if not ( options.get('lto', _jln_default_flags['lto']) == 'default') :
              if ( not ( options.get('lto', _jln_default_flags['lto']) == 'off' ) and compiler == 'gcc' ) :
'-fuse-ld=gold',               else:
'-fuse-ld=lld',             else:
'-fuse-ld=lld',     if not ( options.get('lto', _jln_default_flags['lto']) == 'default') :
      if options.get('lto', _jln_default_flags['lto']) == 'off' :
'-fno-lto', '-fno-lto',       else:
        if compiler == 'gcc' :
'-flto', '-flto',           if not ( verless(5, 0) ) :
            if not ( options.get('warnings', _jln_default_flags['warnings']) == 'default') :
              if not ( options.get('warnings', _jln_default_flags['warnings']) == 'off' ) :
'-flto-odr-type-merging', '-flto-odr-type-merging',             if options.get('lto', _jln_default_flags['lto']) == 'fat' :
'-ffat-lto-objects',             else:
              if options.get('lto', _jln_default_flags['lto']) == 'thin' :
'-fuse-linker-plugin',         else:
          if ( options.get('lto', _jln_default_flags['lto']) == 'thin' and compiler == 'clang' and not ( verless(6, 0) ) ) :
'-flto=thin', '-flto=thin',           else:
'-flto', '-flto',     if not ( options.get('optimization', _jln_default_flags['optimization']) == 'default') :
      if options.get('optimization', _jln_default_flags['optimization']) == '0' :
'-O0', '-O0',       else:
        if options.get('optimization', _jln_default_flags['optimization']) == 'g' :
'-Og', '-Og',         else:
'-DNDEBUG', '-Wl,-O1',           if options.get('optimization', _jln_default_flags['optimization']) == 'size' :
'-Os', '-Os',           else:
            if options.get('optimization', _jln_default_flags['optimization']) == 'fast' :
'-Ofast', '-Ofast',             else:
              if options.get('optimization', _jln_default_flags['optimization']) == '1' :
'-O1', '-O1',               else:
                if options.get('optimization', _jln_default_flags['optimization']) == '2' :
'-O2', '-O2',                 else:
                  if options.get('optimization', _jln_default_flags['optimization']) == '3' :
'-O3', '-O3',     if not ( options.get('cpu', _jln_default_flags['cpu']) == 'default') :
      if options.get('cpu', _jln_default_flags['cpu']) == 'generic' :
'-mtune=generic', '-mtune=generic',       else:
'-march=native', '-mtune=native', '-march=native', '-mtune=native',     if not ( options.get('whole_program', _jln_default_flags['whole_program']) == 'default') :
      if options.get('whole_program', _jln_default_flags['whole_program']) == 'off' :
'-fno-whole-program',         if ( compiler == 'clang' and not ( verless(3, 9) ) ) :
'-fno-whole-program-vtables', '-fno-whole-program-vtables',       else:
        if linker == 'ld64' :
'-Wl,-dead_strip', '-Wl,-S',         else:
'-s',           if options.get('whole_program', _jln_default_flags['whole_program']) == 'strip_all' :
'-Wl,--gc-sections', '-Wl,--strip-all',         if compiler == 'gcc' :
'-fwhole-program', '-fwhole-program',         else:
          if compiler == 'clang' :
            if not ( verless(3, 9) ) :
              if not ( options.get('lto', _jln_default_flags['lto']) == 'default') :
                if not ( options.get('lto', _jln_default_flags['lto']) == 'off' ) :
'-fwhole-program-vtables', '-fwhole-program-vtables',               if not ( verless(7, 0) ) :
'-fforce-emit-vtables', '-fforce-emit-vtables',     if not ( options.get('pedantic', _jln_default_flags['pedantic']) == 'default') :
      if not ( options.get('pedantic', _jln_default_flags['pedantic']) == 'off' ) :
'-pedantic',         if options.get('pedantic', _jln_default_flags['pedantic']) == 'as_error' :
'-pedantic-errors',     if not ( options.get('stack_protector', _jln_default_flags['stack_protector']) == 'default') :
      if options.get('stack_protector', _jln_default_flags['stack_protector']) == 'off' :
'-Wno-stack-protector', '-U_FORTIFY_SOURCE', '-Wno-stack-protector',       else:
'-D_FORTIFY_SOURCE=2', '-Wstack-protector',         if options.get('stack_protector', _jln_default_flags['stack_protector']) == 'strong' :
          if ( compiler == 'gcc' and not ( verless(4, 9) ) ) :
'-fstack-protector-strong', '-fstack-protector-strong',           else:
            if compiler == 'clang' :
'-fstack-protector-strong', '-fsanitize=safe-stack', '-fstack-protector-strong', '-fsanitize=safe-stack',         else:
          if options.get('stack_protector', _jln_default_flags['stack_protector']) == 'all' :
'-fstack-protector-all', '-fstack-protector-all',             if compiler == 'clang' :
'-fsanitize=safe-stack', '-fsanitize=safe-stack',               if not ( verless(11, 0) ) :
'-fstack-clash-protection', '-fstack-clash-protection',           else:
'-fstack-protector', '-fstack-protector',         if compiler == 'clang' :
'-fsanitize=shadow-call-stack', '-fsanitize=shadow-call-stack',     if not ( options.get('relro', _jln_default_flags['relro']) == 'default') :
      if options.get('relro', _jln_default_flags['relro']) == 'off' :
'-Wl,-z,norelro',       else:
        if options.get('relro', _jln_default_flags['relro']) == 'on' :
'-Wl,-z,relro',         else:
          if options.get('relro', _jln_default_flags['relro']) == 'full' :
'-Wl,-z,relro,-z,now',     if not ( options.get('pie', _jln_default_flags['pie']) == 'default') :
      if options.get('pie', _jln_default_flags['pie']) == 'off' :
'-no-pic',       else:
        if options.get('pie', _jln_default_flags['pie']) == 'on' :
'-pie',         else:
          if options.get('pie', _jln_default_flags['pie']) == 'pic' :
'-fPIC',     if not ( options.get('stl_debug', _jln_default_flags['stl_debug']) == 'default') :
      if not ( options.get('stl_debug', _jln_default_flags['stl_debug']) == 'off' ) :
        if options.get('stl_debug', _jln_default_flags['stl_debug']) == 'assert_as_exception' :
'-D_LIBCPP_DEBUG_USE_EXCEPTIONS',         if ( options.get('stl_debug', _jln_default_flags['stl_debug']) == 'allow_broken_abi' or options.get('stl_debug', _jln_default_flags['stl_debug']) == 'allow_broken_abi_and_bugs' ) :
          if compiler == 'clang' :
            if ( not ( verless(8, 0) ) or options.get('stl_debug', _jln_default_flags['stl_debug']) == 'allow_broken_abi_and_bugs' ) :
'-D_LIBCPP_DEBUG=1', '-D_GLIBCXX_DEBUG',         else:
'-D_GLIBCXX_ASSERTIONS',         if not ( options.get('pedantic', _jln_default_flags['pedantic']) == 'default') :
          if not ( options.get('pedantic', _jln_default_flags['pedantic']) == 'off' ) :
'-D_GLIBCXX_DEBUG_PEDANTIC',     if not ( options.get('shadow_warnings', _jln_default_flags['shadow_warnings']) == 'default') :
      if options.get('shadow_warnings', _jln_default_flags['shadow_warnings']) == 'off' :
'-Wno-shadow',         if ( compiler == 'clang' and not ( verless(8, 0) ) ) :
'-Wno-shadow-field',       else:
        if options.get('shadow_warnings', _jln_default_flags['shadow_warnings']) == 'on' :
'-Wshadow',         else:
          if options.get('shadow_warnings', _jln_default_flags['shadow_warnings']) == 'all' :
            if compiler == 'clang' :
'-Wshadow-all',             else:
'-Wshadow',           else:
            if ( compiler == 'gcc' and not ( verless(7, 1) ) ) :
              if options.get('shadow_warnings', _jln_default_flags['shadow_warnings']) == 'local' :
'-Wshadow=local',               else:
                if options.get('shadow_warnings', _jln_default_flags['shadow_warnings']) == 'compatible_local' :
'-Wshadow=compatible-local',     if not ( options.get('elide_type', _jln_default_flags['elide_type']) == 'default') :
      if options.get('elide_type', _jln_default_flags['elide_type']) == 'on' :
        if ( compiler == 'gcc' and not ( verless(8, 0) ) ) :
'-felide-type',       else:
        if ( ( compiler == 'gcc' and not ( verless(8, 0) ) ) or ( compiler == 'clang' and not ( verless(3, 4) ) ) ) :
'-fno-elide-type',     if not ( options.get('exceptions', _jln_default_flags['exceptions']) == 'default') :
      if options.get('exceptions', _jln_default_flags['exceptions']) == 'on' :
'-fexceptions',       else:
'-fno-exceptions',     if not ( options.get('rtti', _jln_default_flags['rtti']) == 'default') :
      if options.get('rtti', _jln_default_flags['rtti']) == 'on' :
'-frtti',       else:
'-fno-rtti',     if not ( options.get('diagnostics_show_template_tree', _jln_default_flags['diagnostics_show_template_tree']) == 'default') :
      if ( ( compiler == 'gcc' and not ( verless(8, 0) ) ) or compiler == 'clang' ) :
        if options.get('diagnostics_show_template_tree', _jln_default_flags['diagnostics_show_template_tree']) == 'on' :
'-fdiagnostics-show-template-tree',         else:
'-fno-diagnostics-show-template-tree',     if not ( options.get('sanitizers_extra', _jln_default_flags['sanitizers_extra']) == 'default') :
      if options.get('sanitizers_extra', _jln_default_flags['sanitizers_extra']) == 'thread' :
'-fsanitize=thread',       else:
        if options.get('sanitizers_extra', _jln_default_flags['sanitizers_extra']) == 'pointer' :
          if ( compiler == 'gcc' and not ( verless(8, 0) ) ) :
'-fsanitize=pointer-compare', '-fsanitize=pointer-subtract',   if linker == 'lld-link' :
    if not ( options.get('lto', _jln_default_flags['lto']) == 'default') :
      if options.get('lto', _jln_default_flags['lto']) == 'off' :
'-fno-lto',       else:
        if options.get('lto', _jln_default_flags['lto']) == 'thin' :
'-flto=thin',         else:
'-flto', '-flto',     if not ( options.get('whole_program', _jln_default_flags['whole_program']) == 'default') :
      if options.get('whole_program', _jln_default_flags['whole_program']) == 'off' :
'-fno-whole-program',       else:
        if not ( options.get('lto', _jln_default_flags['lto']) == 'default') :
          if not ( options.get('lto', _jln_default_flags['lto']) == 'off' ) :
'-fwhole-program-vtables', '-fwhole-program-vtables',   if ( compiler == 'msvc' or compiler == 'clang-cl' ) :
    if not ( options.get('stl_fix', _jln_default_flags['stl_fix']) == 'default') :
      if options.get('stl_fix', _jln_default_flags['stl_fix']) == 'on' :
'/DNOMINMAX',     if not ( options.get('debug', _jln_default_flags['debug']) == 'default') :
      if options.get('debug', _jln_default_flags['debug']) == 'off' :
'/DEBUG:NONE',       else:
'/RTC1', '/Od',         if options.get('debug', _jln_default_flags['debug']) == 'on' :
'/DEBUG',         else:
          if options.get('debug', _jln_default_flags['debug']) == 'line_tables_only' :
'/DEBUG:FASTLINK',         if not ( options.get('optimization', _jln_default_flags['optimization']) == 'default') :
          if options.get('optimization', _jln_default_flags['optimization']) == 'g' :
'/Zi',           else:
            if not ( options.get('whole_program', _jln_default_flags['whole_program']) == 'default') :
              if options.get('whole_program', _jln_default_flags['whole_program']) == 'off' :
'/ZI',               else:
'/Zi',             else:
'/ZI',         else:
          if not ( options.get('whole_program', _jln_default_flags['whole_program']) == 'default') :
            if options.get('whole_program', _jln_default_flags['whole_program']) == 'off' :
'/ZI',             else:
'/Zi',           else:
'/ZI',     if not ( options.get('exceptions', _jln_default_flags['exceptions']) == 'default') :
      if options.get('exceptions', _jln_default_flags['exceptions']) == 'on' :
'/EHsc', '/D_HAS_EXCEPTIONS=1',       else:
'/EHs-', '/D_HAS_EXCEPTIONS=0',     if not ( options.get('optimization', _jln_default_flags['optimization']) == 'default') :
      if options.get('optimization', _jln_default_flags['optimization']) == '0' :
'/Ob0', '/Od', '/Oi-', '/Oy-',       else:
        if options.get('optimization', _jln_default_flags['optimization']) == 'g' :
'/Ob1',         else:
'/DNDEBUG',           if options.get('optimization', _jln_default_flags['optimization']) == '1' :
'/O1',           else:
            if options.get('optimization', _jln_default_flags['optimization']) == '2' :
'/O2',             else:
              if options.get('optimization', _jln_default_flags['optimization']) == '3' :
'/O2',               else:
                if options.get('optimization', _jln_default_flags['optimization']) == 'size' :
'/O1', '/Gw',                 else:
                  if options.get('optimization', _jln_default_flags['optimization']) == 'fast' :
'/O2', '/fp:fast',     if not ( options.get('whole_program', _jln_default_flags['whole_program']) == 'default') :
      if options.get('whole_program', _jln_default_flags['whole_program']) == 'off' :
'/GL-',       else:
'/GL', '/Gw', '/LTCG',         if options.get('whole_program', _jln_default_flags['whole_program']) == 'strip_all' :
'/OPT:REF',     if not ( options.get('pedantic', _jln_default_flags['pedantic']) == 'default') :
      if not ( options.get('pedantic', _jln_default_flags['pedantic']) == 'off' ) :
'/permissive-', '/Zc:__cplusplus',     if not ( options.get('rtti', _jln_default_flags['rtti']) == 'default') :
      if options.get('rtti', _jln_default_flags['rtti']) == 'on' :
'/GR',       else:
'/GR-',     if not ( options.get('stl_debug', _jln_default_flags['stl_debug']) == 'default') :
      if options.get('stl_debug', _jln_default_flags['stl_debug']) == 'off' :
'/D_HAS_ITERATOR_DEBUGGING=0',       else:
'/D_DEBUG', '/D_HAS_ITERATOR_DEBUGGING=1',     if not ( options.get('control_flow', _jln_default_flags['control_flow']) == 'default') :
      if options.get('control_flow', _jln_default_flags['control_flow']) == 'off' :
'/guard:cf-',       else:
'/guard:cf',     if not ( options.get('stack_protector', _jln_default_flags['stack_protector']) == 'default') :
      if options.get('stack_protector', _jln_default_flags['stack_protector']) == 'off' :
'/GS-',       else:
'/GS', '/sdl',         if options.get('stack_protector', _jln_default_flags['stack_protector']) == 'strong' :
'/RTC1',         else:
          if options.get('stack_protector', _jln_default_flags['stack_protector']) == 'all' :
'/RTC1', '/RTCc',   if compiler == 'msvc' :
    if not ( options.get('msvc_isystem', _jln_default_flags['msvc_isystem']) == 'default') :
'/experimental:external', '/external:W0',       if options.get('msvc_isystem', _jln_default_flags['msvc_isystem']) == 'anglebrackets' :
'/external:anglebrackets',       else:
'/external:env:INCLUDE', '/external:env:CAExcludePath',       if not ( options.get('msvc_isystem_with_template_from_non_external', _jln_default_flags['msvc_isystem_with_template_from_non_external']) == 'default') :
        if options.get('msvc_isystem_with_template_from_non_external', _jln_default_flags['msvc_isystem_with_template_from_non_external']) == 'off' :
'/external:template',         else:
'/external:template-',       if not ( options.get('warnings', _jln_default_flags['warnings']) == 'default') :
        if options.get('warnings', _jln_default_flags['warnings']) == 'off' :
'/W0',         else:
'/wd4710', '/wd4711',           if not ( not ( verless(19, 21) ) ) :
'/wd4774',           if options.get('warnings', _jln_default_flags['warnings']) == 'on' :
'/W4', '/wd4244', '/wd4245',           else:
'/Wall', '/wd4571', '/wd4355', '/wd4548', '/wd4577', '/wd4820', '/wd5039', '/wd4464', '/wd4868', '/wd5045',             if options.get('warnings', _jln_default_flags['warnings']) == 'strict' :
'/wd4583', '/wd4619',     else:
      if not ( options.get('warnings', _jln_default_flags['warnings']) == 'default') :
        if options.get('warnings', _jln_default_flags['warnings']) == 'off' :
'/W0',         else:
          if options.get('warnings', _jln_default_flags['warnings']) == 'on' :
'/W4', '/wd4244', '/wd4245', '/wd4711',           else:
'/Wall', '/wd4355', '/wd4365', '/wd4514', '/wd4548', '/wd4571', '/wd4577', '/wd4625', '/wd4626', '/wd4668', '/wd4710', '/wd4711',             if not ( not ( verless(19, 21) ) ) :
'/wd4774', '/wd4820', '/wd5026', '/wd5027', '/wd5039', '/wd4464', '/wd4868', '/wd5045',             if options.get('warnings', _jln_default_flags['warnings']) == 'strict' :
'/wd4061', '/wd4266', '/wd4388', '/wd4583', '/wd4619', '/wd4623', '/wd5204',     if not ( options.get('shadow_warnings', _jln_default_flags['shadow_warnings']) == 'default') :
      if options.get('shadow_warnings', _jln_default_flags['shadow_warnings']) == 'off' :
'/wd4456', '/wd4459',       else:
        if ( options.get('shadow_warnings', _jln_default_flags['shadow_warnings']) == 'on' or options.get('shadow_warnings', _jln_default_flags['shadow_warnings']) == 'all' ) :
'/w4456', '/w4459',         else:
          if options.get('shadow_warnings', _jln_default_flags['shadow_warnings']) == 'local' :
'/w4456', '/wd4459',     if not ( options.get('warnings_as_error', _jln_default_flags['warnings_as_error']) == 'default') :
      if options.get('warnings_as_error', _jln_default_flags['warnings_as_error']) == 'on' :
'/WX', '/WX',       else:
        if options.get('warnings_as_error', _jln_default_flags['warnings_as_error']) == 'off' :
'/WX-',     if not ( options.get('lto', _jln_default_flags['lto']) == 'default') :
      if options.get('lto', _jln_default_flags['lto']) == 'off' :
'/LTCG:OFF',       else:
'/GL', '/LTCG',     if not ( options.get('sanitizers', _jln_default_flags['sanitizers']) == 'default') :
      if options.get('sanitizers', _jln_default_flags['sanitizers']) == 'on' :
'/sdl',       else:
        if not ( options.get('stack_protector', _jln_default_flags['stack_protector']) == 'default') :
          if not ( options.get('stack_protector', _jln_default_flags['stack_protector']) == 'off' ) :
'/sdl-',   return {"flags": flags, "linkflags": linkflags}
